{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to knowledge-base","text":""},{"location":"awesome/","title":"Awesome","text":"","tags":["awesome"]},{"location":"awesome/#packages","title":"\ud83d\udce6 Packages","text":"<p>Interesting packages</p> <ul> <li>satis - Ein statischer Composer-Repository-Generator</li> <li>skeema - Skeema ist ein Open-Source-Tool zum Verwalten von MySQL-Schemas und zum Anwenden von \u00c4nderungen an MySQL-Datenbanken.</li> <li>gh-ost - GitHub's Online Schema Migration for MySQL</li> </ul>","tags":["awesome"]},{"location":"awesome/#laravel-packages","title":"\ud83d\udce6 Laravel packages","text":"<p>Interesting Laravel packages</p> <ul> <li>QueryBuilder von Spatie - Ein Paket, um Eloquent-Abfragen \u00fcber Anforderungsparameter zu filtern und zu sortieren</li> </ul>","tags":["awesome"]},{"location":"awesome/#tools","title":"\ud83d\udd27 Tools","text":"<ul> <li>trello - Project Management</li> <li>obsidian - Markdown Editor</li> <li>zotero - Reference Management</li> </ul>","tags":["awesome"]},{"location":"awesome/#interesting","title":"\ud83e\udd14 Interesting","text":"<p>Interesting projects and resources</p> <ul> <li>Laravel - The PHP Framework For Web Artisans</li> <li>stitcher.io - A blog from Brendt about php</li> </ul>","tags":["awesome"]},{"location":"awesome/#resources","title":"\ud83d\udcda Resources","text":"<p>Interesting resources</p> <ul> <li>phptherightway.com - PHP: The Right Way</li> <li>php.net - PHP: Hypertext Preprocessor</li> </ul>","tags":["awesome"]},{"location":"awesome/#examples","title":"\u26a1 Examples","text":"<p>Interesting examples</p> <ul> <li>semver.npmjs.com - Semantic Versioning Calculator</li> <li>developer.mozilla.org - Resources for Developers, by Developers</li> <li>laraveldaily-code-examples - Code Examples for Laravel</li> <li>kirschbaumdevelopment-quick-tips - Quick Tips for Laravel</li> <li>laravel-news - Laravel News</li> </ul>","tags":["awesome"]},{"location":"awesome/#infrastructure-as-a-service-iaas-providers","title":"Infrastructure as a Service (IaaS) - Providers","text":"<p>Infrastructure as a Service (IaaS) - Providers</p> <ul> <li>aws.amazon.com - Amazon Web Services</li> <li>terraform.io - Terraform by HashiCorp</li> <li>ansible.com - Ansible by Red Hat</li> <li>chef.io - Chef</li> <li>puppet.com - Puppet</li> <li>saltstack.com - SaltStack</li> </ul>","tags":["awesome"]},{"location":"awesome/#peer-to-peer-netzwerken-p2p","title":"Peer-to-Peer-Netzwerken (P2P)","text":"<p>Peer-to-Peer-Netzwerken (P2P)</p> <ul> <li>Hyperswarm - Hyperswarm ist ein dezentrales Peer-to-Peer-Netzwerk, das f\u00fcr die Verwendung mit Hypercore entwickelt wurde.</li> <li>socket.io - Socket.IO enables real-time, bidirectional and event-based communication.</li> <li>PubNub - PubNub powers realtime experiences because of the PubNub Data Stream Network, which is a global network of data centers that power low-latency messaging at massive scale.</li> <li>firebase - Firebase Cloud Messaging (FCM) ist eine Cross-Plattform-L\u00f6sung zum Senden von Nachrichten und Benachrichtigungen an Android-, iOS- und Web-Anwendungen, die kostenlos und zuverl\u00e4ssig ist.</li> <li>Soketi - Soketi ist ein Open-Source-Server f\u00fcr WebSocket-Verbindungen, der in Rust geschrieben wurde.</li> </ul>","tags":["awesome"]},{"location":"awesome/#sicherheits-tools","title":"Sicherheits-Tools","text":"<p>Sicherheits-Tools</p> <ul> <li>locust.io - An open source load testing tool</li> <li>jit.io - Security Tools</li> <li>burp - Burp Suite - Application Security Testing Software</li> </ul>","tags":["awesome"]},{"location":"mac-os-commands/","title":"Mac OS Kommandobefehle","text":"","tags":["awesome"]},{"location":"mac-os-commands/#dateiverwaltung","title":"Dateiverwaltung:","text":"","tags":["awesome"]},{"location":"mac-os-commands/#cd","title":"cd","text":"<p>\u00c4ndern des aktuellen Verzeichnisses. Zum Beispiel: <code>cd ~/Documents</code> \u00e4ndert das aktuelle Verzeichnis zu \"Documents\" im Home-Verzeichnis.</p>","tags":["awesome"]},{"location":"mac-os-commands/#ls","title":"ls","text":"<p>Listet den Inhalt des aktuellen Verzeichnisses auf. Zum Beispiel: <code>ls -l</code> zeigt eine Liste der Dateien und Verzeichnisse im aktuellen Verzeichnis an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#pwd","title":"pwd","text":"<p>Zeigt das aktuelle Verzeichnis an. Zum Beispiel: <code>pwd</code> zeigt das aktuelle Verzeichnis an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#mkdir","title":"mkdir","text":"<p>Erstellt ein neues Verzeichnis. Zum Beispiel: <code>mkdir ~/Documents/MyProject</code> erstellt ein neues Verzeichnis namens \"MyProject\" im Verzeichnis \"Documents\" im Home-Verzeichnis.</p>","tags":["awesome"]},{"location":"mac-os-commands/#rm","title":"rm","text":"<p>Entfernt eine Datei oder ein Verzeichnis. Zum Beispiel: <code>rm ~/Documents/MyProject</code> entfernt das Verzeichnis \"MyProject\" im Verzeichnis \"Documents\" im Home-Verzeichnis.</p>","tags":["awesome"]},{"location":"mac-os-commands/#cp","title":"cp","text":"<p>Kopiert eine Datei oder ein Verzeichnis. Zum Beispiel: <code>cp ~/Documents/MyProject ~/Desktop/MyProject</code> kopiert das Verzeichnis \"MyProject\" im Verzeichnis \"Documents\" im Home-Verzeichnis in das Verzeichnis \"MyProject\" auf dem Desktop.</p>","tags":["awesome"]},{"location":"mac-os-commands/#mv","title":"mv","text":"<p>Verschiebt eine Datei oder ein Verzeichnis. Zum Beispiel: <code>mv ~/Documents/MyProject ~/Desktop/MyProject</code> verschiebt das Verzeichnis \"MyProject\" im Verzeichnis \"Documents\" im Home-Verzeichnis in das Verzeichnis \"MyProject\" auf dem Desktop.</p>","tags":["awesome"]},{"location":"mac-os-commands/#open","title":"open","text":"<p>\u00d6ffnet eine Datei oder ein Verzeichnis. Zum Beispiel: <code>open ~/Documents/MyProject</code> \u00f6ffnet das Verzeichnis \"MyProject\" im Verzeichnis \"Documents\" im Home-Verzeichnis.</p>","tags":["awesome"]},{"location":"mac-os-commands/#find","title":"find","text":"<p>Sucht nach Dateien und Verzeichnissen. Zum Beispiel: <code>find ~/Documents -name MyProject</code> sucht nach Dateien und Verzeichnissen mit dem Namen \"MyProject\" im Verzeichnis \"Documents\" im Home-Verzeichnis.</p>","tags":["awesome"]},{"location":"mac-os-commands/#grep","title":"grep","text":"<p>Durchsucht eine Datei oder einen Text nach einem bestimmten Muster oder Ausdruck. Zum Beispiel: <code>grep \"error\" log.txt</code> zeigt alle Zeilen in der Datei \"log.txt\" an, die das Wort \"error\" enthalten.</p>","tags":["awesome"]},{"location":"mac-os-commands/#less","title":"less","text":"<p>Zeigt den Inhalt einer Datei an. Zum Beispiel: <code>less log.txt</code> zeigt den Inhalt der Datei \"log.txt\" an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#head","title":"head","text":"<p>Zeigt die ersten Zeilen einer Datei an. Zum Beispiel: <code>head log.txt</code> zeigt die ersten 10 Zeilen der Datei \"log.txt\" an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#tail","title":"tail","text":"<p>Zeigt die letzten Zeilen einer Datei an. Zum Beispiel: <code>tail log.txt</code> zeigt die letzten 10 Zeilen der Datei \"log.txt\" an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#touch","title":"touch","text":"<p>Erstellt eine leere Datei. Zum Beispiel: <code>touch log.txt</code> erstellt eine leere Datei namens \"log.txt\".</p>","tags":["awesome"]},{"location":"mac-os-commands/#systemuberwachung","title":"System\u00fcberwachung","text":"","tags":["awesome"]},{"location":"mac-os-commands/#top","title":"top","text":"<p>Zeigt eine Liste der laufenden Prozesse an. Zum Beispiel: <code>top</code> zeigt eine Liste der laufenden Prozesse an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#ps","title":"ps","text":"<p>Zeigt eine Liste der laufenden Prozesse an. Zum Beispiel: <code>ps aux</code> zeigt alle Prozesse auf dem System an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#ifconfig","title":"ifconfig","text":"<p>Zeigt die Netzwerkkonfiguration an. Zum Beispiel: <code>ifconfig en0</code> zeigt die Konfiguration des Netzwerkadapters \"en0\" an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#netzwerk-tools","title":"Netzwerk-Tools","text":"","tags":["awesome"]},{"location":"mac-os-commands/#ping","title":"ping","text":"<p>Sendet einen Ping an einen Host. Zum Beispiel: <code>ping google.com</code> sendet einen Ping an \"google.com\".</p>","tags":["awesome"]},{"location":"mac-os-commands/#ssh","title":"ssh","text":"<p>Verbindet sich mit einem entfernten Server per Secure Shell (SSH). Zum Beispiel: <code>ssh user@server.com</code> verbindet sich mit dem Server \"server.com\" als Benutzer \"user\".</p>","tags":["awesome"]},{"location":"mac-os-commands/#dateisystem-tools","title":"Dateisystem-Tools","text":"","tags":["awesome"]},{"location":"mac-os-commands/#df","title":"df","text":"<p>Zeigt den freien Speicherplatz auf den Dateisystemen an. Zum Beispiel: <code>df -h</code> zeigt den freien Speicherplatz in einer menschenlesbaren Form an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#du","title":"du","text":"<p>Zeigt die Gr\u00f6\u00dfe von Dateien und Verzeichnissen an. Zum Beispiel: <code>du -sh</code> zeigt die Gr\u00f6\u00dfe des aktuellen Verzeichnisses in einer menschenlesbaren Form an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#tar","title":"tar","text":"<p>Erstellt oder extrahiert ein tar-Archiv. Zum Beispiel: <code>tar -xvf archive.tar</code> extrahiert das Archiv \"archive.tar\".</p>","tags":["awesome"]},{"location":"mac-os-commands/#unzip","title":"unzip","text":"<p>Entpackt eine ZIP-Datei. Zum Beispiel: <code>unzip archive.zip</code> entpackt die ZIP-Datei \"archive.zip\".</p>","tags":["awesome"]},{"location":"mac-os-commands/#diskutil","title":"diskutil","text":"<p>Zeigt Informationen \u00fcber die Festplatten an. Zum Beispiel: <code>diskutil list</code> zeigt eine Liste der Festplatten an.</p>","tags":["awesome"]},{"location":"mac-os-commands/#ln","title":"ln","text":"<p>Erstellt einen symbolischen Link. Zum Beispiel: <code>ln -s ~/Documents/MyProject ~/Desktop/MyProject</code> erstellt einen symbolischen Link zum Verzeichnis \"MyProject\" im Verzeichnis \"Documents\" im Home-Verzeichnis auf dem Desktop.</p>","tags":["awesome"]},{"location":"mac-os-commands/#mount","title":"mount","text":"<p>Bindet ein Dateisystem ein. Zum Beispiel: <code>mount -t iso9660 image.iso /mnt/iso</code> bindet die ISO-Datei \"image.iso\" in das Verzeichnis \"/mnt/iso\" ein.</p>","tags":["awesome"]},{"location":"mac-os-commands/#zugriffsrechte-tools","title":"Zugriffsrechte-Tools","text":"","tags":["awesome"]},{"location":"mac-os-commands/#chmod","title":"chmod","text":"<p>\u00c4ndert die Zugriffsrechte f\u00fcr eine Datei oder ein Verzeichnis. Zum Beispiel: <code>chmod 755 script.sh</code> gibt dem Skript \"script.sh\" die Berechtigung, ausgef\u00fchrt zu werden.</p>","tags":["awesome"]},{"location":"mac-os-commands/#chown","title":"chown","text":"<p>\u00c4ndert den Eigent\u00fcmer einer Datei oder eines Verzeichnisses. Zum Beispiel: <code>chown user file.txt</code> \u00e4ndert den Eigent\u00fcmer der Datei \"file.txt\" auf den Benutzer \"user\".</p>","tags":["awesome"]},{"location":"mac-os-commands/#root-tools","title":"Root-Tools","text":"","tags":["awesome"]},{"location":"mac-os-commands/#sudo","title":"sudo","text":"<p>F\u00fchrt einen Befehl als Superuser aus. Zum Beispiel: <code>sudo reboot</code> startet den Computer neu.</p>","tags":["awesome"]},{"location":"shortcuts/","title":"Shortcuts","text":""},{"location":"shortcuts/#visual-studio-code","title":"Visual Studio Code","text":"Shortcut Beschreibung Cmd (\u2318) + Shift (\u21e7) + c \u00d6ffnet Consolen-IDE Iterm und springt direkt zum Projekt Cmd (\u2318) + Shift (\u21e7) + e \u00d6ffnet den Workspace-Explorer Cmd (\u2318) + Rechts Spring zum Ende der Zeile Cmd (\u2318) + Links Spring zum Anfang der Zeile Cmd (\u2318) + Oben Springt zur ersten Zeile Cmd (\u2318) + Unten Springt zur letzten Zeile Cmd (\u2318) + Enter Zeile nach unten einf\u00fcgen Cmd (\u2318) + L Komplette Zeile markieren Cmd (\u2318) + D Wort ausw\u00e4hlen - Wiederholen Sie die Auswahl anderer Vorkommen Cmd (\u2318) + F Wort markieren und es wird im Suchfenster angezeigt, Suchfenster wird selektiert Cmd (\u2318) + E Wort markieren und es wird im Suchfenster angezeigt, Markierung bleibt auf das Wor Cmd (\u2318) + A Alles selektieren Cmd (\u2318) + C Markierung kopieren Cmd (\u2318) + X Markierung ausschneiden Cmd (\u2318) + V Kopierten Zwischenspeicher einf\u00fcgen Shift (\u21e7) + ESC Suchfenster schlie\u00dfen Option (\u2325) + Oben Zeile nach oben verschieben Option (\u2325) + Unten Zeile nach unten verschieben Option (\u2325) + Shift (\u21e7) + oben Zeile nach oben kopieren Option (\u2325) + Shift (\u21e7) + unten Zeile nach unten kopieren Cmd (\u2318) + Option (\u2325) + Shift (\u21e7) + Oben Zeile nach oben markieren und cursor platzieren Cmd (\u2318) + Option (\u2325) + Shift (\u21e7) + rechts Zeile nach rechts markieren und cursor platzieren Cmd (\u2318) + Option (\u2325) + Shift (\u21e7) + unten Zeile nach unten markieren und cursor platzieren Cmd (\u2318) + Option (\u2325) + Shift (\u21e7) + links Zeile nach links markieren und cursor platzieren Option (\u2325) + Rechts Cursor zum Wort-Ende Option (\u2325) + Shift (\u21e7) + Rechts Markiert das n\u00e4chste Wort nach rechts Option (\u2325) + Links Cursor zum Wort+ Anfang Option (\u2325) + Shift (\u21e7) + Rechts Markiert das n\u00e4chste Wort nach links Ctrl (\u2303) + A Zeilen Anfang Ctrl (\u2303) + E Zeilen Ende Ctrl (\u2303) + Shift (\u21e7) + A Vom Cursor alles bis zum Anfang markieren Ctrl (\u2303) + Shift (\u21e7) + E Vom Cursor alles bis zum Ende markieren Ctrl (\u2303) + Tab Zwischen den offenen Dateien wechseln Ctrl (\u2303) + D L\u00f6schen nach Rechts Ctrl (\u2303) + H L\u00f6schen nach Links Tab Markierten Text ein Tab Schritt nach rechts verschieben Cmd (\u2318) + Tab Markierten Text ein Tab Schritt nach lins verschieben Option (\u2325) + H Github History anzeigen Option (\u2325) + Enter \u00d6ffnet Workbench View Cmd (\u2318) + DEL Vom Curosr alles nach links l\u00f6schen Cmd (\u2318) + Backspace Vom Curosr alles nach rechts l\u00f6schen Cmd (\u2318) + Ctrl (\u2303) + DEL Vom Curosr das n\u00e4chste WortPaar nach links l\u00f6schen Cmd (\u2318) + Ctrl (\u2303) + Backspace Vom Curosr das n\u00e4chste WortPaar nach rechts l\u00f6schen Cmd (\u2318) + K + C Zeile auskommentieren Cmd (\u2318) + K + U Zeile einkommentieren Cmd (\u2318) + Shift (\u21e7) + A Toggle Block-Kommentare / ein- und auskommentieren Cmd (\u2318)o + Shift (\u21e7) + / Toggle Line-Kommentare / ein- und auskommentieren Cmd (\u2318) + Shift (\u21e7) + K Zeile l\u00f6schen Cmd (\u2318) + Option (\u2325) + Ctrl (\u2303) + / Gehe zum Klammerende"},{"location":"shortcuts/#mac","title":"Mac","text":""},{"location":"shortcuts/#ausschneiden-kopieren-einsetzen-und-andere-haufig-verwendete-kurzbefehle","title":"Ausschneiden, Kopieren, Einsetzen und andere h\u00e4ufig verwendete Kurzbefehle","text":"Shortcut Beschreibung Cmd (\u2318) + X Ausgew\u00e4hltes Objekt aus dem Originaltext l\u00f6schen und in die Zwischenablage kopieren. Cmd (\u2318) + C Ausgew\u00e4hltes Objekt in die Zwischenablage kopieren. Dies funktioniert auch mit Dateien im Finder. Cmd (\u2318) + V Den Inhalt der Zwischenablage in das aktuelle Dokument oder die aktuelle App einf\u00fcgen. Dies funktioniert auch mit Dateien im Finder. Cmd (\u2318) + Z Den vorherigen Befehl widerrufen. Du kannst anschlie\u00dfend zum Wiederholen den Tastaturkurzbefehl Shift (\u21e7) + Cmd (\u2318) +Z dr\u00fccken, um den Widerrufen+ Befehl umzukehren. In manchen Apps kannst du mehrere Befehle widerrufen und wiederholen. Cmd (\u2318) + A Alle Objekte ausw\u00e4hlen. Cmd (\u2318) + F Elemente in einem Dokument suchen oder ein Suchfenster \u00f6ffnen. Cmd (\u2318) + G Das n\u00e4chste Auftreten des gefundenen Objekts suchen (vorw\u00e4rts suchen). Um das vorherige Auftreten zu suchen (r\u00fcckw\u00e4rts suchen), dr\u00fccke Shift (\u21e7) + Cmd (\u2318) +G. Cmd (\u2318) + H Die Fenster der vordersten App ausblenden. Um nur die vorderste App anzuzeigen und alle anderen Apps auszublenden, dr\u00fccke Option (\u2325) + Cmd (\u2318) + H. Cmd (\u2318) + M Das vorderste Fenster im Dock ablegen. Um alle Fenster der vordersten App im Dock abzulegen, dr\u00fccke Option (\u2325) + Cmd (\u2318) +M. Cmd (\u2318) + O Das ausgew\u00e4hlte Objekt oder ein Dialogfenster zur Auswahl einer Datei \u00f6ffnen. Cmd (\u2318) + P Das aktuelle Dokument drucken. Cmd (\u2318) + S Das aktuelle Dokument sichern. Cmd (\u2318) + T Einen neuen Tab \u00f6ffnen. Cmd (\u2318) + W Das vorderste Fenster schlie\u00dfen. Um alle Fenster der App zu schlie\u00dfen, dr\u00fccke Option (\u2325) + Cmd (\u2318) + W. Option (\u2325) + Cmd (\u2318) + Esc Beenden einer App erzwingen. Cmd (\u2318) + Leertaste Das Spotlight-Suchfeld\u00a0ein- oder ausblenden. Um eine Spotlight-Suche aus einem Finder+ Fenster durchzuf\u00fchren, dr\u00fccke Cmd (\u2318) +Option (\u2325) + Leertaste. (Wenn du\u00a0mehrere Eingabequellen verwendest, um in anderen Sprachen zu schreiben, \u00e4ndern diese Kurzbefehle die Eingabequelle, anstatt Spotlight anzuzeigen. Hier erf\u00e4hrst du, wie du\u00a0einen nicht eindeutigen Tastaturkurzbefehl \u00e4nderst Ctrl (\u2303) + Cmd (\u2318) + Leertaste Die Zeichen\u00fcbersicht einblenden, in der du w\u00e4hlen kannst. Ctrl (\u2303) + Cmd (\u2318) + F App im Vollbildmodus verwenden, falls die App dies unterst\u00fctzt. Leertaste verwenden, um eine Vorschau des ausgew\u00e4hlten Objekts zu sehen. Cmd (\u2318) + Tab Unter den ge\u00f6ffneten Apps zur zuletzt verwendeten wechseln. Cmd (\u2318) + Abw\u00e4rtsakzent (`) Zwischen den Fenstern der App wechseln, die du gerade verwendest. (Das Zeichen auf der zweiten Taste ist je nach Tastatur unterschiedlich. Die Taste befindet sich in der Regel \u00fcber der Tab und links von der Zahl\u00a01.) Shift (\u21e7) + Cmd (\u2318) + 5 In macOS\u00a0Mojave ein Bildschirmfoto oder eine Bildschirmaufnahme erstellen. Verwende bei \u00e4lteren macOS-Versionen Shift (\u21e7) + Cmd (\u2318) +3 oder Shift (\u21e7) + Cmd (\u2318) +4, um Bildschirmfotos aufzunehmen. Shift (\u21e7) + Cmd (\u2318) + N Einen neuen Ordner im Finder anlegen. Cmd (\u2318) + Komma\u00a0(,) Einstellungen f\u00fcr die vorderste App \u00f6ffnen."},{"location":"shortcuts/#kurzbefehle-fur-ruhezustand-abmelden-und-ausschalten","title":"Kurzbefehle f\u00fcr Ruhezustand, Abmelden und Ausschalten","text":"<p>M\u00f6glicherweise musst du einige dieser Kurzbefehle etwas l\u00e4nger gedr\u00fcckt halten als andere. So kannst du vermeiden, sie versehentlich zu verwenden.</p> Shortcut Beschreibung Ein-/Ausschalter Dr\u00fccken, um deinen Mac einzuschalten oder den Ruhezustand zu beenden.\u00a0Halte den Schalter 1,5\u00a0Sekunden lang gedr\u00fcckt, um deinen Mac in den Ruhezustand zu versetzen.* Halte den Schalter l\u00e4nger gedr\u00fcckt, um das Ausschalten des Mac zu erzwingen. Option (\u2325) + Cmd (\u2318) + Ein-/Ausschalter* oder\u00a0Option (\u2325) + Cmd (\u2318) +Medienauswurftaste Ruhezustand des Mac aktivieren. Ctrl (\u2303) + Shift (\u21e7) + Ein-/Ausschalter*\u00a0oder\u00a0Ctrl (\u2303) + Shift (\u21e7) + Medienauswurftaste Displays in Ruhezustand versetzen. Ctrl (\u2303) + Ein-/Ausschalter*\u00a0oder\u00a0Ctrl (\u2303) + Medienauswurftaste Ein Dialogfenster anzeigen, das dir die Wahlm\u00f6glichkeiten \"Neustart\", \"Ruhezustand\" oder Ausschalten\" anbietet. Ctrl (\u2303) + Cmd (\u2318) + Ein-/Ausschalter *\u00a0Neustart des Mac erzwingen, ohne zum Sichern von ge\u00f6ffneten oder nicht gesicherten Dokumenten aufzufordern. Ctrl (\u2303) + Cmd (\u2318) +Medienauswurftaste Alle Apps beenden und den Mac anschlie\u00dfend neu starten. Falls ge\u00f6ffnete Dokumente nicht gesicherte \u00c4nderungen enthalten, wirst du gefragt, ob du sie sichern m\u00f6chtest. Ctrl (\u2303) + Option (\u2325) + Cmd (\u2318) + Ein-/Ausschalter* oder\u00a0Ctrl (\u2303) + Option (\u2325) + Cmd (\u2318) +Medienauswurftaste Alle Apps beenden und den Mac anschlie\u00dfend ausschalten. Falls ge\u00f6ffnete Dokumente nicht gesicherte \u00c4nderungen enthalten, wirst du gefragt, ob du sie sichern m\u00f6chtest. Ctrl (\u2303) + Cmd (\u2318) +Q Den Bildschirm sofort sperren. Shift (\u21e7) + Cmd (\u2318) +Q Von deinem macOS+ Benutzeraccount abmelden. Du wirst zur Best\u00e4tigung des Vorgangs aufgefordert. Um dich sofort ohne Best\u00e4tigung abzumelden, dr\u00fccke Option (\u2325) + Shift (\u21e7) + Cmd (\u2318) +Q. <p>* Gilt nicht f\u00fcr den\u00a0Touch\u00a0ID-Sensor.</p>"},{"location":"shortcuts/#finder-und-systemkurzbefehle","title":"Finder- und Systemkurzbefehle","text":"Shortcut Beschreibung Cmd (\u2318) + D Ausgew\u00e4hlte Dateien duplizieren. Cmd (\u2318) + E Ausgew\u00e4hltes Laufwerk oder Volume auswerfen. Cmd (\u2318) + F Eine Spotlight-Suche im Finder+ Fenster starten. Cmd (\u2318) + I Fenster \"Informationen\" f\u00fcr eine markierte Datei anzeigen. Cmd (\u2318) + R (1)\u00a0Wenn im Finder ein Alias ausgew\u00e4hlt ist urspr\u00fcngliche Datei f\u00fcr ausgew\u00e4hlten Alias anzeigen. (2)\u00a0In einigen Apps wie Kalender oder Safari die Seite aktualisieren oder neu laden. (3)\u00a0Unter Softwareupdate\u00a0nochmals nach Softwareupdates suchen. Shift (\u21e7) + Cmd (\u2318) + C Fenster \"Computer\" \u00f6ffnen. Shift (\u21e7) + Cmd (\u2318) + D Ordner \"Schreibtisch\" \u00f6ffnen. Shift (\u21e7) + Cmd (\u2318) + F Fenster \"Zuletzt benutzt\" \u00f6ffnen, das alle k\u00fcrzlich angesehenen oder ge\u00e4nderten Dateien auflistet. Shift (\u21e7) + Cmd (\u2318) + G Ein Fenster \"Gehe zum Ordner\" \u00f6ffnen. Shift (\u21e7) + Cmd (\u2318) + H Benutzerordner des aktuellen macOS+ Benutzeraccounts \u00f6ffnen. Shift (\u21e7) + Cmd (\u2318) + I iCloud Drive \u00f6ffnen. Shift (\u21e7) + Cmd (\u2318) + K Fenster \"Netzwerk\" \u00f6ffnen. Option (\u2325) + Cmd (\u2318) + L Ordner \"Downloads\" \u00f6ffnen. Shift (\u21e7) + Cmd (\u2318) + N Neuen Ordner erstellen. Shift (\u21e7) + Cmd (\u2318) + O Ordner \"Dokumente\" \u00f6ffnen. Shift (\u21e7) + Cmd (\u2318) + P Vorschaufenster in Finder+ Fenstern ein- oder ausblenden. Shift (\u21e7) + Cmd (\u2318) + R Fenster \"AirDrop\" \u00f6ffnen. Shift (\u21e7) + Cmd (\u2318) + T Tableiste in Finder+ Fenstern ein- oder ausblenden. Ctrl (\u2303) + Shift (\u21e7) + Cmd (\u2318) + T Das ausgew\u00e4hlte Finder+ Objekt dem Dock hinzuf\u00fcgen (OS\u00a0X Mavericks oder neuer) Shift (\u21e7) + Cmd (\u2318) + U Ordner \"Dienstprogramme\" \u00f6ffnen. Option (\u2325) + Cmd (\u2318) + D Dock ein- oder ausblenden. Ctrl (\u2303) + Cmd (\u2318) + T Das ausgew\u00e4hlte Objekt der Seitenleiste hinzuf\u00fcgen (OS\u00a0X Mavericks oder neuer). Option (\u2325) + Cmd (\u2318) + P Pfadleiste in Finder+ Fenstern ein- oder ausblenden. Option (\u2325) + Cmd (\u2318) + S Seitenleiste in Finder+ Fenstern ein- oder ausblenden. Cmd (\u2318) + Schr\u00e4gstrich (/) Statusleiste in Finder+ Fenstern ein- oder ausblenden. Cmd (\u2318) + J DarstellungsOption (\u2325)en einblenden. Cmd (\u2318) + K Das Fenster \"Mit Server verbinden\" \u00f6ffnen. Ctrl (\u2303) + Cmd (\u2318) + A Erstelle einen Alias f\u00fcr das ausgew\u00e4hlte Element. Cmd (\u2318) + N Ein neues Finder+ Fenster \u00f6ffnen. Option (\u2325) + Cmd (\u2318) + N Neuen intelligenten Ordner erstellen. Cmd (\u2318) + T Tableiste ein- oder ausblenden, wenn nur ein Tab im aktuellen Finder ge\u00f6ffnet ist. Option (\u2325) + Cmd (\u2318) + T Symbolleiste ein- oder ausblenden, wenn nur ein Tab im aktuellen Finder+ Fenster ge\u00f6ffnet ist. Option (\u2325) + Cmd (\u2318) + V Dateien in der Zwischenablage von ihrem urspr\u00fcnglichen zum aktuellen Speicherort bewegen. Cmd (\u2318) + Y Die Funktion \"\u00dcbersicht\" zum Anzeigen einer Vorschau der ausgew\u00e4hlten Dateien nutzen. Option (\u2325) + Cmd (\u2318) + Y In der \u00dcbersicht eine Diashow der ausgew\u00e4hlten Dateien anzeigen. Cmd (\u2318) + 1 Die Objekte im Finder+ Fenster als Symbole anzeigen. Cmd (\u2318) + 2 Die Objekte im Finder+ Fenster als Liste anzeigen. Cmd (\u2318) + 3 Die Objekte im Finder+ Fenster in Spalten anzeigen. Cmd (\u2318) + 4 Die Objekte im Finder+ Fenster in einer Galerie anzeigen. Cmd (\u2318) + linke eckige Klammer ([) Zum vorherigen Ordner wechseln. Cmd (\u2318) + rechte eckige Klammer (]) Zum n\u00e4chsten Ordner wechseln. Cmd (\u2318) + Aufw\u00e4rtspfeil Ordner mit dem aktuellen Ordner \u00f6ffnen. Cmd (\u2318) + Ctrl (\u2303) + Aufw\u00e4rtspfeil Ordner mit dem aktuellen Ordner in einem neuen Fenster \u00f6ffnen. Cmd (\u2318) + Abw\u00e4rtspfeil Ausgew\u00e4hltes Objekt \u00f6ffnen. Rechtspfeil Ausgew\u00e4hlten Ordner \u00f6ffnen. Diese Funktion ist nur in der Listendarstellung verf\u00fcgbar. Linkspfeil Ausgew\u00e4hlten Ordner schlie\u00dfen. Diese Funktion ist nur in der Listendarstellung verf\u00fcgbar. Cmd (\u2318) + R\u00fcckschritttaste Das markierte Objekt in den Papierkorb verschieben. Shift (\u21e7) + Cmd (\u2318) + R\u00fcckschritttaste Den Papierkorb leeren. Option (\u2325) + Shift (\u21e7) + Cmd (\u2318) + R\u00fcckschritttaste Den Papierkorb ohne Best\u00e4tigungsdialog leeren. Cmd (\u2318) + Helligkeit verringern Bildschirmsynchronisation ein- bzw. ausschalten, wenn der Mac mit mehr als einem Monitor verbunden ist. Option (\u2325) + Helligkeit erh\u00f6hen Systemeinstellung \"Monitore\" \u00f6ffnen. Dies funktioniert mit beiden Helligkeitstasten. Ctrl (\u2303) + Helligkeit erh\u00f6hen oder Ctrl (\u2303) + Helligkeit verringern Helligkeit des externen Displays \u00e4ndern (falls vom Display unterst\u00fctzt). Option (\u2325) + Shift (\u21e7) + Helligkeit erh\u00f6hen oder Option (\u2325) + Shift (\u21e7) + Helligkeit verringern Display-Helligkeit in kleineren Schritten \u00e4ndern. F\u00fcge die Ctrl (\u2303) + Taste hinzu, um die Anpassung am externen Display vorzunehmen, sofern das Display dies unterst\u00fctzt. Option (\u2325) + Mission Control Systemeinstellung \"Mission Control\" \u00f6ffnen. Cmd (\u2318) +Mission Control Den Schreibtisch anzeigen. Ctrl (\u2303) + Abw\u00e4rtspfeil Alle Fenster der vordersten App einblenden. Option (\u2325) + Lauter Systemeinstellung \"Ton\" \u00f6ffnen. Dies funktioniert mit allen Lautst\u00e4rketasten. Option (\u2325) + Shift (\u21e7) + Lauter oder Option (\u2325) + Shift (\u21e7) + Leiser Lautst\u00e4rke in kleineren Schritten regeln. Option (\u2325) + Tastaturhelligkeit erh\u00f6hen Systemeinstellung \"Tastatur\" \u00f6ffnen. Dies funktioniert mit beiden Tastaturhelligkeitstasten. Option (\u2325) + Shift (\u21e7) + Tastaturhelligkeit erh\u00f6hen oder Option (\u2325) + Shift (\u21e7) + Tastaturhelligkeit verringern Tastaturhelligkeit in kleineren Schritten anpassen. Option (\u2325) + Doppelklick Einen Ordner in einem neuen Fenster \u00f6ffnen und das aktuelle Fenster schlie\u00dfen. Cmd (\u2318) + Doppelklick Einen Ordner in einem neuen Tab oder Fenster \u00f6ffnen. Cmd (\u2318) beim Ziehen auf ein anderes Volume Gezogenes Objekt auf ein anderes Volume verschieben, anstatt es zu kopieren. Option (\u2325) beim Ziehen Gezogenes Objekt kopieren. Der Mauszeiger \u00e4ndert sich, w\u00e4hrend du das Objekt ziehst. Option (\u2325) + Cmd (\u2318) beim Ziehen Alias des gezogenen Objekts erstellen. Der Mauszeiger \u00e4ndert sich, w\u00e4hrend du das Objekt ziehst. Option (\u2325) + Klick auf ein Erweiterungsdreieck Alle Ordner im ausgew\u00e4hlten Ordner \u00f6ffnen. Diese Funktion ist nur in der Listendarstellung verf\u00fcgbar. Cmd (\u2318) + Klick auf Fenstertitel Ordner anzeigen, die den aktuellen Ordner enthalten. Klicke in der Finder-Men\u00fcleiste auf das Men\u00fc \"Gehe zu\", um Kurzbefehle zum \u00d6ffnen vieler h\u00e4ufig benutzter Ordner zu sehen, z.\u00a0B. \"Programme\", \"Dokumente\", \"Downloads\", \"Dienstprogramme\" und \"iCloud Drive\"."},{"location":"shortcuts/#kurzbefehle-fur-dokumente","title":"Kurzbefehle f\u00fcr Dokumente","text":"<p>Das Verhalten dieser Kurzbefehle kann je nach verwendeter App variieren.</p> Shortcut Beschreibung Cmd (\u2318) + B Den ausgew\u00e4hlten Text fett formatieren bzw. Fettschrift ein- oder ausschalten. Cmd (\u2318) + I Den ausgew\u00e4hlten Text kursiv formatieren bzw. Kursivschrift ein- oder ausschalten. Cmd (\u2318) + K Einen Weblink hinzuf\u00fcgen. Cmd (\u2318) + U Den ausgew\u00e4hlten Text unterstrichen formatieren bzw. Unterstreichung ein- oder ausschalten. Cmd (\u2318) + T Das Fenster \"Schriften\" ein- oder ausblenden. Cmd (\u2318) + D Den Ordner \"Schreibtisch\" in den Dialogfenstern \"\u00d6ffnen\" oder \"Sichern\" ausw\u00e4hlen. Ctrl (\u2303) + Cmd (\u2318) + D Die Definition eines ausgew\u00e4hlten Worts ein- oder ausblenden. Shift (\u21e7) + Cmd (\u2318) + Doppelpunkt ( ) Fenster \"Rechtschreibung und Grammatik\" einblenden. Cmd (\u2318) +Semikolon (;) Falsch geschriebene W\u00f6rter im Dokument suchen. Option (\u2325) + R\u00fcckschritttaste Das Wort links von der Einf\u00fcgemarke l\u00f6schen. Ctrl (\u2303) + H Das Zeichen links von der Einf\u00fcgemarke l\u00f6schen. Verwende alternativ die R\u00fcckschritttaste. Ctrl (\u2303) + D Das Zeichen rechts von der Einf\u00fcgemarke l\u00f6schen. Verwende alternativ Fn + R\u00fcckschritttaste. Fn + R\u00fcckschritttaste Vorw\u00e4rts l\u00f6schen auf Tastaturen, die keine Entf-Taste haben. Verwende alternativ Ctrl (\u2303) + D. Ctrl (\u2303) + K Text zwischen der Einf\u00fcgemarke und dem Ende der aktuellen Zeile oder des Absatzes l\u00f6schen. Fn + Aufw\u00e4rtspfeil Seite nach oben Eine Seite nach oben bl\u00e4ttern. Fn + Abw\u00e4rtspfeil Seite nach unten Eine Seite nach unten bl\u00e4ttern. Fn + Linkspfeil Pos1 Zum Anfang eines Dokuments bl\u00e4ttern. Fn + Rechtspfeil Ende Zum Ende eines Dokuments bl\u00e4ttern. Cmd (\u2318) + Aufw\u00e4rtspfeil Einf\u00fcgemarke an den Anfang des Dokuments bewegen. Cmd (\u2318) + Abw\u00e4rtspfeil Einf\u00fcgemarke an das Ende des Dokuments bewegen. Cmd (\u2318) + Linkspfeil Einf\u00fcgemarke an den Anfang der aktuellen Zeile bewegen. Cmd (\u2318) + Rechtspfeil Einf\u00fcgemarke an das Ende der aktuellen Zeile bewegen. Option (\u2325) + Linkspfeil Einf\u00fcgemarke an den Anfang des vorhergehenden Worts bewegen. Option (\u2325) + Rechtspfeil Einf\u00fcgemarke an das Ende des n\u00e4chsten Worts bewegen. Shift (\u21e7) + Cmd (\u2318) + Aufw\u00e4rtspfeil Text zwischen der Einf\u00fcgemarke und dem Anfang des Dokuments markieren. Shift (\u21e7) + Cmd (\u2318) + Abw\u00e4rtspfeil Text zwischen der Einf\u00fcgemarke und dem Ende des Dokuments markieren. Shift (\u21e7) + Cmd (\u2318) + Linkspfeil Text zwischen der Einf\u00fcgemarke und dem Anfang der aktuellen Zeile markieren. Shift (\u21e7) + Cmd (\u2318) + Rechtspfeil Text zwischen der Einf\u00fcgemarke und dem Ende der aktuellen Zeile markieren. Shift (\u21e7) + Aufw\u00e4rtspfeil Textauswahl auf das der aktuellen Position am n\u00e4chsten liegende Zeichen in der dar\u00fcberliegenden Zeile erweitern. Shift (\u21e7) + Abw\u00e4rtspfeil Textauswahl auf das der aktuellen Position am n\u00e4chsten liegende Zeichen in der darunterliegenden Zeile erweitern. Shift (\u21e7) + Linkspfeil Textauswahl um ein Zeichen nach links erweitern. Shift (\u21e7) + Rechtspfeil Textauswahl um ein Zeichen nach rechts erweitern. Option (\u2325) + Shift (\u21e7) + Aufw\u00e4rtspfeil Textauswahl bis zum Anfang des aktuellen Absatzes erweitern, bei nochmaligem Dr\u00fccken bis zum Anfang des n\u00e4chsten Absatzes. Option (\u2325) + Shift (\u21e7) + Abw\u00e4rtspfeil Textauswahl bis zum Ende des aktuellen Absatzes erweitern, bei nochmaligem Dr\u00fccken bis zum Ende des n\u00e4chsten Absatzes. Option (\u2325) + Shift (\u21e7) + Linkspfeil Textauswahl bis zum Anfang des aktuellen Worts erweitern, bei nochmaligem Dr\u00fccken bis zum Anfang des n\u00e4chsten Worts. Option (\u2325) + Shift (\u21e7) + Rechtspfeil Textauswahl bis zum Ende des aktuellen Worts erweitern, bei nochmaligem Dr\u00fccken bis zum Ende des n\u00e4chsten Worts. Ctrl (\u2303) + A Zum Anfang der Zeile oder des Absatzes bewegen. Ctrl (\u2303) + E Zum Ende einer Zeile oder eines Absatzes bewegen. Ctrl (\u2303) + F Ein Zeichen vor bewegen. Ctrl (\u2303) + B Ein Zeichen zur\u00fcck bewegen. Ctrl (\u2303) + L Cursor oder Auswahl im sichtbaren Bereich zentrieren. Ctrl (\u2303) + P Eine Zeile nach oben bewegen Ctrl (\u2303) + N Eine Zeile nach unten bewegen. Ctrl (\u2303) + O Neue Zeile hinter der Einf\u00fcgemarke einf\u00fcgen. Ctrl (\u2303) + T Das Zeichen hinter der Einf\u00fcgemarke mit dem Zeichen davor austauschen. Cmd (\u2318) + Linke geschweifte Klammer ({) Linksb\u00fcndig. Cmd (\u2318) + Rechte geschweifte Klammer (}) Rechtsb\u00fcndig. Shift (\u21e7) + Cmd (\u2318) +Senkrechtstrich ( ) Zentrieren. Option (\u2325) + Cmd (\u2318) + F Zum Suchfeld wechseln. Option (\u2325) + Cmd (\u2318) + T Symbolleiste in der App ein- oder ausblenden. Option (\u2325) + Cmd (\u2318) +C Stil kopieren Formatierungseinstellungen des ausgew\u00e4hlten Objekts in die Zwischenablage kopieren. Option (\u2325) + Cmd (\u2318) +V Stil einsetzen Die kopierten Formatierungseinstellungen auf das ausgew\u00e4hlte Objekt anwenden. Option (\u2325) + Shift (\u21e7) + Cmd (\u2318) +V Einsetzen und Stil anpassen Den Stil des umgebenden Inhalts auf das darin eingesetzte Objekt anwenden. Option (\u2325) + Cmd (\u2318) + I Das Fenster \"Informationen\" ein- oder ausblenden. Shift (\u21e7) + Cmd (\u2318) + P Papierformat Ein Fenster zur Auswahl von Dokumenteinstellungen anzeigen. Shift (\u21e7) + Cmd (\u2318) + S Dialogfenster \"Sichern unter\" anzeigen oder aktuelles Dokument duplizieren. Shift (\u21e7) + Cmd (\u2318) + (\u2013) Ausgew\u00e4hltes Objekt verkleinern. Shift (\u21e7) + Cmd (\u2318) + (+) Ausgew\u00e4hltes Objekt vergr\u00f6\u00dfern. Cmd (\u2318) +Gleichheitszeichen (=) f\u00fchrt dieselbe Funktion aus. Shift (\u21e7) + Cmd (\u2318) + (?) Hilfe-Men\u00fc \u00f6ffnen."},{"location":"vs-code-plugins/","title":"Vs code plugins","text":"Plugin Auto Close Tag Better Comments Better Pest DotENV Dummy Text Generator EditorConfig for VS Code Filament Snippets Git Blame Git History GitHub Pull Requests and Issues GitHub Theme gitignore Image preview Laravel Artisan Laravel Blade formatter Laravel Blade Snippets Laravel Create View Laravel Extension Pack Laravel goto view laravel intellisense Laravel Pint Formatter Laravel Snippets laravel-goto-components Livewire Language Support Markdown All in One Markdown Preview Mermaid Support Mermaid Markdown Syntax Highlighting Mermaid Preview MSSQL Snippets Output Colorizer Pest Snippets PHP Intelephense PHP IntelliSense Rainbow Brackets 2 Remote - SSH Remote - SSH: Editing Configuration Files SVG TODO Highlight vscode-icons Sort lines"},{"location":"atlassian/manage-kanban-boards/","title":"Manage kanban boards","text":"","tags":["atlassian","boards-loeschen"]},{"location":"atlassian/manage-kanban-boards/#kanban-board-erstellen","title":"Kanban-Board erstellen","text":"<ol> <li>\u00d6ffne Jira und melde dich mit deinen Anmeldedaten an.</li> <li>Klicke auf \"Boards\" in der oberen Navigationsleiste und w\u00e4hle \"Create Board\" aus dem Dropdown-Men\u00fc.</li> <li>W\u00e4hle \"Kanban Board\" aus der Liste der Board-Typen aus und klicke auf \"Weiter\".</li> <li>Gib dem Board einen Namen und w\u00e4hle die Projekte aus, die du auf dem Board abbilden m\u00f6chtest, indem du die STRG- oder CMD-Taste gedr\u00fcckt h\u00e4ltst.</li> <li>Lege die Filteroptionen f\u00fcr das Board fest, indem du die entsprechenden Kriterien ausw\u00e4hlst und klicke auf \"Create Board\", um das Kanban-Board zu erstellen.</li> </ol> <p>Sobald das Board erstellt wurde, kannst du Tasks und Stories erstellen und diese den entsprechenden Spalten auf dem Board zuweisen. Wenn du Aufgaben aus anderen Projekten hinzuf\u00fcgen m\u00f6chtest, kannst du dies tun, indem du sie den entsprechenden Spalten auf dem Board zuweist. Dadurch kannst du eine \u00dcbersicht \u00fcber Aufgaben aus verschiedenen Projekten auf einem Board erhalten.</p>","tags":["atlassian","boards-loeschen"]},{"location":"atlassian/manage-kanban-boards/#neue-kategorie-erstellen","title":"Neue Kategorie erstellen","text":"<ol> <li>Klicke auf das Kanban-Board, zu dem du eine neue Kategorie hinzuf\u00fcgen m\u00f6chtest.</li> <li>Klicke auf das Zahnradsymbol in der oberen rechten Ecke des Boards und w\u00e4hle \"Board-Einstellungen\" aus dem Dropdown-Men\u00fc aus.</li> <li>Klicke im linken Men\u00fc auf \"Spalten\".</li> <li>Klicke auf \"Spalte hinzuf\u00fcgen\", um eine neue Spalte zu erstellen.</li> <li>Gib einen Namen f\u00fcr die neue Spalte ein und lege die Position der Spalte auf dem Board fest.</li> <li>Lege optional WIP-Limits (Work-in-Progress-Limits) f\u00fcr die Spalte fest.</li> <li>Klicke auf \"Spalte hinzuf\u00fcgen\", um die neue Kategorie zu erstellen.</li> </ol> <p>Nachdem du die neue Kategorie erstellt hast, kannst du Aufgaben und Stories in die neue Spalte ziehen und ablegen.</p>","tags":["atlassian","boards-loeschen"]},{"location":"atlassian/manage-kanban-boards/#kanban-board-loschen","title":"Kanban-Board l\u00f6schen","text":"<p>Um ein Board in Atlassian zu l\u00f6schen, solltest du folgende Schritte befolgen:</p> <ol> <li>Gehe zu deinem Atlassian-Konto und melde dich an.</li> <li>Klicke auf die Schaltfl\u00e4che \"Boards\" (Boards) in der oberen Men\u00fcleiste.</li> <li>W\u00e4hle das Board aus, das du l\u00f6schen m\u00f6chtest.</li> <li>Klicke auf das Zahnrad-Symbol in der oberen rechten Ecke des Boards.</li> <li>Klicke auf \"Board l\u00f6schen\" (Delete Board).</li> <li>Best\u00e4tige die L\u00f6schung des Boards, indem du auf \"L\u00f6schen\" (Delete) klickst.</li> </ol> <p>Warning</p> <p>Bitte beachte, dass beim L\u00f6schen eines Boards alle damit verbundenen Aufgaben und Kommentare ebenfalls gel\u00f6scht werden. Stelle daher sicher, dass du alle wichtigen Informationen vor dem L\u00f6schen des Boards sicherst oder exportierst.</p>","tags":["atlassian","boards-loeschen"]},{"location":"aws/access-key-change/","title":"Access key change","text":"","tags":["aws","passwort-aendern","access-key"]},{"location":"aws/access-key-change/#access-key-andern","title":"Access Key \u00e4ndern","text":"<p>Um den Access Key in der AWS Management Console zu \u00e4ndern, folgst du bitte diesen Schritten:</p> <ol> <li>Melde dich bei der AWS Management Console an.</li> <li>W\u00e4hle im oberen Men\u00fc die Option \"Services\" und w\u00e4hle dann \"IAM\" aus.</li> <li>Klicke auf \"Benutzer\" und w\u00e4hle den Benutzer aus, dessen Access Key du \u00e4ndern m\u00f6chtest.</li> <li>Klicke auf die Registerkarte \"Sicherheitsanmeldeinformationen\" und scrolle nach unten zu \"Zugriffsschl\u00fcssel\".</li> <li>Klicke auf \"Zugriffsschl\u00fcssel erstellen\" und notiere dir die Access Key-ID und den geheimen Zugriffsschl\u00fcssel.</li> <li>Deaktiviere den alten Zugriffsschl\u00fcssel, indem du auf die Schaltfl\u00e4che \"Deaktivieren\" klickst.</li> <li>Teste den neuen Zugriffsschl\u00fcssel, indem du ihn in deine Anwendungen oder Dienste einbindest.</li> </ol> <p>Bitte beachte, dass das \u00c4ndern des Access Keys Auswirkungen auf alle Anwendungen oder Dienste hat, die den alten Zugriffsschl\u00fcssel verwenden. Stelle sicher, dass du alle relevanten Anwendungen aktualisierst, um sicherzustellen, dass sie den neuen Zugriffsschl\u00fcssel verwenden.</p>","tags":["aws","passwort-aendern","access-key"]},{"location":"best-practice/destruct-method/","title":"PHP __desctruct","text":"<p>In PHP,</p> <p><code>__construct()</code></p> <p>wird bei der Erstellung eines Objekts aufgerufen und</p> <p><code>__destruct()</code></p> <p>wird aufgerufen, w\u00e4hrend das Objekt aus dem Speicher entfernt wird. Mit diesem Wissen k\u00f6nnen wir fl\u00fcssigere APIs erstellen, wie Freek Van der Herten in diesem kurzen Video zeigt.</p> <p>Schauen wir uns nun an, wann PHP Folgendes aufruft</p> <p><code>__destruct()</code> <code>exactly.</code></p> <p>Ein Objekt wird aus dem Speicher entfernt, wenn Sie es explizit entfernen:</p> <pre><code>&lt;?php\n$object = new Object();\nunset($object); // __destruct will be called immediately.\n$object = null; // __destruct will be called immediately.\n</code></pre> <p>Sie wird auch aufgerufen, wenn der Bereich, in dem das Objekt lebt, beendet werden soll, zum Beispiel am Ende einer Controller-Methode:</p> <pre><code>&lt;?php\nfunction store(Request $request)\n{\n$object = new Object();\nUser::create(...);\n// __destruct will be called here.\nreturn view('welcome');\n}\n</code></pre> <p>Selbst wenn wir uns in einem lang laufenden Prozess befinden, zum Beispiel in einer Warteschlange, wird __destruct vor dem Ende der Handle-Methode aufgerufen:</p> <pre><code>&lt;?php\nfunction handle()\n{\n$object = new Object();\nUser::create(...);\n// __destruct will be called here.\n}\n</code></pre> <p>Es wird auch aufgerufen, wenn das Skript beendet wird:</p> <pre><code>&lt;?php\nfunction handle()\n{\n$object = new Object();\nUser::create(...);\n// __destruct will be called here.\nexit(1);\n}\n</code></pre> <ul> <li>Original article by Mohamed Said</li> </ul>","tags":["php","desctruct"]},{"location":"best-practice/pull-request-splitting/","title":"Pull request splitting","text":"","tags":["git","github","best-practice","pull-request","pull-request-splitting"]},{"location":"best-practice/pull-request-splitting/#pull-request-splitting-pull-request-partitioning","title":"Pull Request Splitting | Pull Request Partitioning","text":"<p>In der Softwareentwicklung gibt es den Fachbegriff \"Pull Request Splitting\" oder \"Pull Request Partitioning\", um einen Pull Request in mehrere kleinere Pull Requests aufzuteilen.</p> <p>Der Prozess des Pull Request Splitting ist eine Methode, um die Code-Review und die Integration von \u00c4nderungen in eine Codebasis zu vereinfachen. Bei komplexen oder umfangreichen \u00c4nderungen kann es schwierig sein, einen gro\u00dfen Pull Request zu \u00fcberpr\u00fcfen und zu integrieren. Durch das Aufteilen des Pull Requests in kleinere Einheiten wird es einfacher, \u00c4nderungen zu \u00fcberpr\u00fcfen und in die Codebasis zu integrieren.</p> <p>Ein Beispiel f\u00fcr Pull Request Splitting k\u00f6nnte sein, wenn ein Entwickler eine neue Funktion in eine bestehende Anwendung integrieren m\u00f6chte. Anstatt alle \u00c4nderungen in einem gro\u00dfen Pull Request zu b\u00fcndeln, k\u00f6nnte der Entwickler den Pull Request in mehrere kleinere Einheiten aufteilen, wie z.B. eine Einheit f\u00fcr die neue Datenbank-Tabelle, eine Einheit f\u00fcr die Backend-Logik und eine Einheit f\u00fcr die Frontend-Integration. Auf diese Weise k\u00f6nnen die Reviewer die \u00c4nderungen leichter nachvollziehen und gezielter Feedback geben.</p> <p>Das Pull Request Splitting ist also eine Methode, um gro\u00dfe und komplexe \u00c4nderungen in kleinere und leichter verst\u00e4ndliche Einheiten aufzuteilen, um die Code-Review und Integration von \u00c4nderungen zu erleichtern.</p>","tags":["git","github","best-practice","pull-request","pull-request-splitting"]},{"location":"best-practice/race-condition/","title":"Race condition","text":"","tags":["best-practice","race-condition"]},{"location":"best-practice/race-condition/#race-condition","title":"Race Condition","text":"<p>Eine Race Condition (ein Wettrennen um den Zugriff auf Ressourcen) ist eine unerw\u00fcnschte Situation, die entsteht, wenn ein Ger\u00e4t oder System versucht, zwei oder mehr Operationen gleichzeitig auszuf\u00fchren. Aber wegen des jeweiligen besonderen Charakters der Ger\u00e4te oder Systeme m\u00fcssen die Operationen in der richtigen Reihenfolge ausgef\u00fchrt werden, um wirklich korrekt zu sein.</p> <p>Ein einfaches Beispiel f\u00fcr eine Race Condition ist ein Lichtschalter. In einigen H\u00e4usern oder Wohnungen gibt es mehrere Lichtschalter, die mit einem gemeinsamen Deckenlicht verbunden sind. Wenn diese Schaltungstypen benutzt werden, wird die jeweilige Schalterposition irrelevant. Ist das Licht eingeschaltet, und man bewegt jeden anderen Schalter aus seiner gegenw\u00e4rtigen (Einschalt-)Position, wird das Licht wieder ausgeschaltet. Entsprechend gestaltet sich die Situation, wenn das Licht ausgeschaltet ist: Durch die Benutzung jeden Schalters in seiner aktuellen Position wird das Licht eingeschaltet. Auf dieser Grundlage muss man sich nun vorstellen, was passieren k\u00f6nnte, wenn zwei Personen an zwei verschiedenen Schaltern genau zum gleichen Zeitpunkt versuchen, das Licht einzuschalten. Ein Schaltvorgang k\u00f6nnte den anderen ausschalten oder beide gleichzeitigen Aktionen k\u00f6nnten zu einem Kurzschluss f\u00fchren.</p> <p>Race Conditions werden in aller Regel mit Computer Science und IT assoziiert. Bei Computer-Memory oder [[Storage]] kann eine Race Condition auftreten, wenn Lese- und Schreibbefehle f\u00fcr gro\u00dfe Datenmengen fast zum gleichen Zeitpunkt empfangen werden und das Ger\u00e4t versucht, einige oder alle der alten Daten zu \u00fcberschreiben, w\u00e4hrend diese alten Daten noch gelesen werden. In der Folge k\u00f6nnen eines oder mehrere der folgenden Ph\u00e4nomene auftreten: ein Computer-Crash, eine nicht n\u00e4her identifizierbare \u201eillegale Operation\u201c, Aufrufen und Shutdown eines Programms, Fehler beim Lesen der alten Daten oder Fehler beim Schreiben der neuen Daten. Eine Race Condition kann auch auftreten, wenn Anordnungen nicht in der korrekten Reihenfolge umgesetzt werden.</p> <p>Nehmen wir zum Beispiel an, dass zwei Prozesse einen Bit Flip (Bit-Wechsel) an einem spezifischen Memory-Ort vornehmen m\u00fcssen. Unter normalen Umst\u00e4nden sollte die Operation wie folgt ablaufen:</p> <p>Process 1</p><p>Process 2</p><p>Memory Value</p><p>Read value</p><p>0</p><p>Flip value</p><p>1</p><p>Read value</p><p>1</p><p>Flip value</p><p>0</p> <p>Prozess 1 f\u00fchrt also einen Bit Flip durch, indem er den Memory-Wert von 0 auf 1 setzt. Prozess 2 f\u00fchrt dann einen Bit Flip durch und \u00e4ndert den Memory-Wert von 1 auf 0.</p> <p>Bei einer Race Condition f\u00fchren diese zwei Prozesse zu einer \u00dcberlappung, und die Sequenz k\u00f6nnte wom\u00f6glich wie folgt aussehen:</p> <p>Process 1</p><p>Process 2</p><p>Memory Value</p><p>Read value</p><p>0</p><p>Read value</p><p>0</p><p>Flip value</p><p>1</p><p>Flip value</p><p>1</p> <p>In diesem Beispiel hat das Bit einen Schlusswert von 1, sollte aber einen Wert von 0 haben. Dies passiert, weil der zweite Prozess nicht wei\u00df, dass Prozess 1 einen zeitgleichen Bit Flip durchf\u00fchrt.</p>","tags":["best-practice","race-condition"]},{"location":"best-practice/race-condition/#wie-man-race-conditions-verhindert","title":"Wie man Race Conditions verhindert","text":"<p>In Rechner-Umgebungen kann man Race Conditions verhindern, indem man den Memory- oder Speicherzugang priorisiert. Dies bedeutet, dass der Lesebefehl immer zuerst ausgef\u00fchrt und beendet wird, wenn Lese- und Schreibkommandos in etwa zeitgleich empfangen werden.</p> <p>In einem Netzwerk kann eine Race Condition auftreten, wenn zwei Anwender zum gleichen Zeitpunkt auf einen verf\u00fcgbaren Kanal zugreifen wollen und keiner der beteiligten Computer vor seiner Zugangsgenehmigung eine Mitteilung erh\u00e4lt, dass der Kanal bereits besetzt ist. Statistisch gesehen wird diese Art von \u00dcberschneidung mit hoher Wahrscheinlichkeit in Netzwerken mit langen Zeitverz\u00f6gerungen auftreten \u2013 zum Beispiel in solchen, die auf geostation\u00e4ren Satelliten beruhen. Um zu verhindern, dass sich so eine Wettbewerbssituation entwickelt, muss man eine Priorit\u00e4tsregelung entwerfen. Diese kann zum Beispiel darin bestehen, dass der Anwender, dessen Nutzernamen mit einem fr\u00fcheren Buchstaben im Alphabet (oder einer niedrigeren Nummer) beginnt, immer dann als erster den Zugang bekommt, wenn zwei Anwender in einem definierten Zeitraum versuchen, auf das System zuzugreifen. Hacker sind in der Lage, solche sensiblen Race Conditions f\u00fcr sich auszunutzen und sich mit ihrer Hilfe unautorisierten Zugang zu Netzwerken zu verschaffen.</p> <p>Race Conditions treten gelegentlich auch bei logischen Zugangsorten (Gates) auf, wenn bestimmte Inputs miteinander in Konflikt geraten. Weil der Output des Gates eine bestimmte Zeit beansprucht, um auf jede \u00c4nderung der Inputs zu reagieren, k\u00f6nnen empfindliche Netze oder Ger\u00e4te hinter dem Gate dar\u00fcber get\u00e4uscht werden, in welchem Zustand sich der Output gerade befindet, und deshalb nicht korrekt fungieren.</p>","tags":["best-practice","race-condition"]},{"location":"best-practice/try-catch-finally/","title":"php","text":"","tags":["php","try-catch"]},{"location":"best-practice/try-catch-finally/#try-catch-finally","title":"Try catch finally","text":"<p>Beim Ausf\u00fchren unserer Skripte treten Fehler und Ausnahmen auf, das geh\u00f6rt zur Natur der Sache. Jedoch ist es n\u00f6tig, Fehler voneinander zu unterscheiden und entsprechend zu behandeln. Daf\u00fcr k\u00f6nnen wir in PHP die Schl\u00fcsselw\u00f6rter try, catch und finally verwenden.</p>","tags":["php","try-catch"]},{"location":"best-practice/try-catch-finally/#try-catch-block","title":"try catch Block","text":"<p>Fehler und Ausnahmen k\u00f6nnen wir behandeln, wenn der Code, der diese produziert, in einem try Block geschrieben wird. Mit dem Schl\u00fcsselwort catch k\u00f6nnen wir diese dann abfangen.</p> <pre><code>&lt;?php\ntry {\n# Tu was\n} catch (Exception $e) {\n# K\u00fcmmere dich um Ausnahmen\n}\n</code></pre>","tags":["php","try-catch"]},{"location":"best-practice/try-catch-finally/#fehler-und-ausnahmen","title":"Fehler und Ausnahmen","text":"<p>Ein Fehler tritt zum Beispiel auf, wenn du eine Funktion aufrufst, die nie definiert wurde.</p> <pre><code>&lt;?php undefinierte_funktion(); ?&gt;\n</code></pre> <p>Output:</p> <pre><code>Fatal error: Uncaught Error: Call to undefined function undefinierte\\_funktion() in C:\\\\xampp\\\\htdocs\\\\codecitrus\\\\try\\_catch.php:1 Stack trace: #0 {main} thrown in C:\\\\xampp\\\\htdocs\\\\codecitrus\\\\try\\_catch.php on line 1\n</code></pre> <p>Um Code zu definieren, der nur ausgef\u00fchrt wird, wenn ein Fehler (Error) auftritt, kannst du try und catch anwenden.</p> <pre><code>&lt;?php\ntry {\nundefinierte_funktion();\necho 'Es ist kein Fehler aufgetreten';\n} catch (Error $e) {\necho 'Ein Fehler ist aufgetreten' . '&lt;br&gt;';\necho $e-&gt;getMessage();\n}\n</code></pre> <p>Output:</p> <pre><code>Ein Fehler ist aufgetreten\nCall to undefined function undefinierte_funktion()\n</code></pre> <p>Wenn stattdessen eine Ausnahme (Exception) auftritt, musst du das im catch Block so angeben, um diese zu behandeln.</p> <pre><code>&lt;?php\nfunction ausnahme() {\nthrow new Exception('Eine Ausnahme ist aufgetreten');\n}\ntry {\nausnahme();\n} catch (Exception $e) {\necho $e-&gt;getMessage();\n}\n</code></pre> <p>Output:</p> <pre><code>Eine Ausnahme ist aufgetreten\n</code></pre>","tags":["php","try-catch"]},{"location":"best-practice/try-catch-finally/#mehrere-catch-blocke","title":"Mehrere catch Bl\u00f6cke","text":"<p>Die vorigen Erkl\u00e4rungen haben sowohl Exceptions als auch Errors behandelt. Um beide abzufangen, k\u00f6nntest du zwei catch Bl\u00f6cke hintereinander definieren.</p> <pre><code>&lt;?php\ntry {\nundefinierte_funktion();\n} catch (Exception $e) {\necho 'Exception';\n} catch (Error $e) {\necho 'Error';\n}\n</code></pre> <p>Output:</p> <pre><code>Error\n</code></pre> <p>Eine weitere M\u00f6glichkeit ist, Throwable mit catch abzufangen. Throwable ist das Interface, das jede PHP-Klasse implementieren muss, soll sie mit throw aufgerufen werden. F\u00fcr das n\u00e4chste Beispiel wird die Funktion ausnahme, die wir vorhin definiert haben, erneut genutzt.</p> <pre><code>&lt;?php\ntry {\nundefinierte_funktion();\n} catch (Throwable $t) {\necho 'Gotta catch \\'em all!';\n}\n// Gotta catch 'em all!\ntry {\nausnahme();\n} catch (Throwable $t) {\necho 'Schnapp sie dir alle!';\n}\n// Schnapp sie dir alle!\n</code></pre>","tags":["php","try-catch"]},{"location":"best-practice/try-catch-finally/#finally-block","title":"finally Block","text":"<p>Mit dem Schl\u00fcsselwort finally kannst du deinem Block weiteren Code hinzuf\u00fcgen. finally erm\u00f6glicht es dir, Code zu schreiben, der ausgef\u00fchrt wird egal ob ein Fehler auftritt oder nicht.</p> <pre><code>&lt;?php\nfunction finally_beispiel_1() {\ntry {\nthrow new Exception();\n} catch (Exception $e) {\necho \"Exception!\" . '&lt;br&gt;';\n} finally {\necho \"Finally!\";\n}\n}\nfinally_beispiel_1();\n</code></pre> <p>Output:</p> <pre><code>Exception!\nFinally!\n</code></pre>","tags":["php","try-catch"]},{"location":"best-practice/try-catch-finally/#return-in-finally","title":"return in finally","text":"<p>return kann bei Verwendung von finally zu unerwarteten Ergebnissen f\u00fchren.</p> <pre><code>&lt;?php\nfunction finally_beispiel_2() {\ntry {\nthrow new Exception();\nreturn 1;\n} catch (Exception $e) {\necho \"Exception!\" . '&lt;br&gt;';\nreturn 2;\n} finally {\necho \"Finally!\" . '&lt;br&gt;';\nreturn 3;\n}\n}\necho finally_beispiel_2();\n</code></pre> <p>Output:</p> <pre><code>Exception!\nFinally!\n3\n</code></pre> <p>Im vorigen Beispiel wurde der Wert von return aus dem catch Block einfach mit dem aus finally \u00fcberschrieben. Dasselbe w\u00fcrde passieren, wenn return bereits einen Wert aus try empfangen h\u00e4tte.</p>","tags":["php","try-catch"]},{"location":"best-practice/try-catch-finally/#fazit","title":"Fazit","text":"<p>Mit try, catch und finally stellt uns PHP m\u00e4chtige Werkzeuge zur Verf\u00fcgung, um Ausnahmef\u00e4lle und Fehler zu behandeln. Damit k\u00f6nnen wir Logs erstellen, alternative Routinen ausf\u00fchren oder einfach unser Skript stoppen. Vorsicht ist jedoch geboten, wenn wir unseren Code in solchen Bl\u00f6cken mit return verwenden, da dies zu unerwarteten Ergebnissen f\u00fchren kann.</p> <ul> <li>Original Artikel von Patrick</li> </ul>","tags":["php","try-catch"]},{"location":"best-practice/workflow-pull-request-splitting/","title":"Workflow pull request splitting","text":"","tags":["git","github","best-practice","pull-request","pull-request-splitting"]},{"location":"best-practice/workflow-pull-request-splitting/#beispiel-workflow","title":"Beispiel-Workflow","text":"<p>Hier ein Beispiel-Workflow f\u00fcr das Erstellen und Verwalten von Blog-Eintr\u00e4gen mit Pull-Request-Splitting:</p> <pre><code>graph TD\n    A((master-branch)) -- erstelle --&gt; B((blog-db-migration))\n    A -- erstelle --&gt; C((blog-list-page))\n    A -- erstelle --&gt; D((blog-create-entry))\n    A -- erstelle --&gt; E((blog-edit-entry))\n    B -- merge --&gt; A\n    C -- merge --&gt; A\n    D -- merge --&gt; A\n    E -- merge --&gt; A\n    B -- merge --&gt; C\n    C -- merge --&gt; D\n    D -- merge --&gt; E</code></pre> <ol> <li>Erstelle einen neuen Branch vom Master-Branch mit einem aussagekr\u00e4ftigen Namen wie z.B. \"blog-db-migration\" f\u00fcr die Migrationen.<ol> <li>F\u00fchre alle notwendigen Schritte durch, um die Migrationen zu implementieren und zu testen.</li> </ol> </li> <li>Erstelle einen weiteren Branch vom aktuellen Master-Branch mit einem Namen wie \"blog-list-page\" f\u00fcr die Auflistung der Blog-Eintr\u00e4ge.<ol> <li>F\u00fchre den vorherigen Branch \"blog-db-migration\" in diesen neuen Branch \"blog-list-page\" ein und f\u00fchre alle notwendigen Schritte durch, um die Auflistung der Blog-Eintr\u00e4ge zu implementieren und zu testen.</li> </ol> </li> <li>Erstelle einen weiteren Branch vom aktuellen Master-Branch mit einem Namen wie \"blog-create-entry\" f\u00fcr das Hinzuf\u00fcgen neuer Blog-Eintr\u00e4ge.<ol> <li>F\u00fchre den vorherigen Branch \"blog-list-page\" in diesen neuen Branch \"blog-create-entry\" ein und f\u00fchre alle notwendigen Schritte durch, um das Hinzuf\u00fcgen neuer Blog-Eintr\u00e4ge zu implementieren und zu testen.</li> </ol> </li> <li>Erstelle einen weiteren Branch vom aktuellen Master-Branch mit einem Namen wie \"blog-edit-entry\" f\u00fcr das Bearbeiten von bestehenden Blog-Eintr\u00e4gen.<ol> <li>F\u00fchre den vorherigen Branch \"blog-create-entry\" in diesen neuen Branch \"blog-edit-entry\" ein und f\u00fchre alle notwendigen Schritte durch, um das Bearbeiten von bestehenden Blog-Eintr\u00e4gen zu implementieren und zu testen.</li> </ol> </li> </ol> <p>Warning</p> <p>Es ist wichtig, dass jeder Pull-Request unabh\u00e4ngig voneinander funktioniert und nur die notwendigen \u00c4nderungen enth\u00e4lt. Daher sollte jeder Pull-Request nur dann bewertet werden, wenn der vorherige Pull-Request bereits gemerged wurde und der zu betrachtende Pull-Request daraufhin aktualisiert wurde. Wenn dies nicht beachtet wird, k\u00f6nnen zu viele Dateien im Pull-Request zum Review angezeigt werden, was das Review erschweren kann. Es ist auch wichtig, in jedem Pull-Request darauf hinzuweisen, auf welchen anderen Pull-Requests er aufbaut, um sicherzustellen, dass sie in der richtigen Reihenfolge gepr\u00fcft und gemerged werden.</p> <p>Tip</p> <p>Stashes k\u00f6nnen als Workaround genutzt werden, um \u00c4nderungen in verschiedenen Branches zu organisieren</p> <p>Falls man w\u00e4hrend der Arbeit bemerkt, dass man im aktuellen Branch \u00c4nderungen vorgenommen hat, die aber eigentlich einem anderen Branch zugeordnet werden m\u00fcssten, kann man das Stashen als Workaround nutzen. Man kann die betreffenden Dateien in einem Stash zwischenspeichern, um sie sp\u00e4ter im richtigen Branch zuzuordnen. Auf diese Weise kann man vermeiden, dass \u00c4nderungen versehentlich im falschen Branch landen und so den Arbeitsablauf durcheinander bringen. Nachdem man den Stash angelegt hat, kann man ihn sp\u00e4ter auf den entsprechenden Branch verteilen und den Stash l\u00f6schen.</p> <p>Tip</p> <p>Es ist sinnvoll, den Code regelm\u00e4\u00dfig mit dem Haupt-Branch zu synchronisieren, um sicherzustellen, dass es zu keinen Konflikten kommt, wenn die Pull-Requests gemerged werden sollen.</p>","tags":["git","github","best-practice","pull-request","pull-request-splitting"]},{"location":"best-practice/workflow-release-into-master/","title":"Workflow release into master","text":"","tags":["git","github","best-practice","pull-request","workflow-release-into-master"]},{"location":"best-practice/workflow-release-into-master/#workflow-release-into-master","title":"Workflow release into master","text":"<p>Dies ist eine von vielen m\u00f6glichen Methoden, um den Release in den Master-Branch zu integrieren. Der Vorteil dieser Methode besteht darin, dass sowohl die lokalen als auch die Origin-Branches auf den neuesten Stand gebracht werden</p> <ol> <li>Checkout des Dev-Release-Branches</li> <li>Pullen der \u00c4nderungen vom Upstream-Release-Branch in den lokalen Dev-Release-Branch</li> <li>Commiten der \u00c4nderungen im lokalen Dev-Release-Branch</li> <li>Pushen des Dev-Release-Branches in den Origin-Release-Branch</li> <li>Checkout des Dev-Master-Branches</li> <li>Pullen der \u00c4nderungen vom Upstream-Master-Branch in den lokalen Dev-Master-Branch</li> <li>Commiten der \u00c4nderungen im lokalen Dev-Master-Branch</li> <li>Pushen des Dev-Master-Branches in den Origin-Master-Branch</li> <li>Erstellen eines neuen Branches mit dem Namen \"release-into-master\", der auf dem Dev-Master-Branch basiert, und Checkout des neuen Branches</li> <li>Pullen der \u00c4nderungen vom Origin-Release-Branch in den neuen Branch \"release-into-master\"</li> <li>Pushen des neuen Branches \"release-into-master\" in den Origin-Release-Into-Master-Branch</li> <li>Erstellen eines Pull Requests, um die \u00c4nderungen vom Dev-Release-Branch in den Dev-Master-Branch zu \u00fcbertragen</li> </ol> <pre><code>sequenceDiagram\n    participant Dev\n    participant Upstream\n    participant Origin\n    Dev -&gt;&gt;+ Upstream: Checkout Dev/Release Branch\n    Upstream --&gt;&gt;- Dev: Send Changes for Dev/Release Branch\n    Dev -&gt;&gt;+ Dev: Pull from Upstream/Release into Dev/Release Branch\n    Dev -&gt;&gt;+ Dev: Commit Changes in Dev/Release Branch\n    Dev -&gt;&gt;+ Origin: Push Dev/Release Branch to Origin/Release\n    Dev -&gt;&gt;+ Upstream: Checkout Dev/Master Branch\n    Upstream --&gt;&gt;- Dev: Send Changes for Dev/Master Branch\n    Dev -&gt;&gt;+ Dev: Pull from Upstream/Master into Dev/Master Branch\n    Dev -&gt;&gt;+ Dev: Commit Changes in Dev/Master Branch\n    Dev -&gt;&gt;+ Origin: Push Dev/Master Branch to Origin/Master\n    Dev -&gt;&gt;+ Dev: Create Release-into-Master Branch based on Dev/Master Branch\n    Dev -&gt;&gt;+ Dev: Checkout Dev/Release-into-Master Branch\n    Dev -&gt;&gt;+ Origin: Pull from Origin/Release into Dev/Release-into-Master Branch\n    Dev -&gt;&gt;+ Origin: Push Dev/Release-into-Master Branch to Origin/Release-into-Master\n    Dev -&gt;&gt;+ Origin: Create Pull Request to merge Origin/Release-into-Master Branch into Upstream/Master Branch</code></pre>","tags":["git","github","best-practice","pull-request","workflow-release-into-master"]},{"location":"best-practice/coding-standards/conventional-commits/","title":"Conventional Commits","text":"","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"best-practice/coding-standards/conventional-commits/#zusammenfassung","title":"Zusammenfassung","text":"<p>Conventional Commits ist eine Methode zur Vereinheitlichung von Commit-Messages in Git-Repositories, die es erleichtert, \u00c4nderungen in der Codebasis zu verfolgen und nachzuvollziehen. Dabei handelt es sich um eine Reihe von Regeln und Konventionen, die festlegen, wie Commit-Messages aufgebaut sein sollten, um eine einheitliche Struktur und eine klare Bedeutung zu gew\u00e4hrleisten.</p> <p>Die Struktur von Conventional Commits besteht aus einem Pr\u00e4fix und einem Nachrichtentext. Das Pr\u00e4fix besteht aus einem Typ, der die Art der \u00c4nderung angibt, und optional einer Bereichsangabe, die den betroffenen Codebereich kennzeichnet. Der Nachrichtentext sollte eine kurze Zusammenfassung der \u00c4nderung enthalten und optional eine l\u00e4ngere Beschreibung oder Erkl\u00e4rung der \u00c4nderung.</p> <p>Durch die Verwendung von Conventional Commits k\u00f6nnen Entwickler schnell herausfinden, welche Art von \u00c4nderungen in einem Commit vorgenommen wurden und welche Codebereiche betroffen sind. Dies erleichtert es, die \u00c4nderungen zu \u00fcberpr\u00fcfen und nachzuvollziehen, was insbesondere bei gr\u00f6\u00dferen Projekten oder bei der Zusammenarbeit mit anderen Entwicklern von Vorteil ist.</p> <p>Conventional Commits ist ein Open-Source-Projekt und kann von Entwicklern auf der ganzen Welt verwendet werden. Es gibt auch eine Reihe von Tools und Plugins, die Conventional Commits unterst\u00fctzen und die Integration in die Entwicklungs-Toolchain erleichtern.</p>","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"best-practice/coding-standards/conventional-commits/#konventionelles-format-fur-commits","title":"Konventionelles Format f\u00fcr Commits","text":"Pr\u00e4fix Art der \u00c4nderung feat Eine neue Funktion fix Eine Fehlerbehebung docs Nur \u00c4nderungen an der Dokumentation style \u00c4nderungen, die die Bedeutung des Codes nicht beeinflussen (Leerzeichen, Formatierung, fehlende Semikolons usw.) refactor Eine Code\u00e4nderung, die weder einen Fehler behebt noch eine Funktion hinzuf\u00fcgt perf Eine Code-\u00c4nderung, die die Leistung verbessert test Hinzuf\u00fcgen fehlender Tests oder Korrigieren vorhandener Tests build \u00c4nderungen, die das Build-System oder externe Abh\u00e4ngigkeiten betreffen (Beispielbereiche: gulp, broccoli, npm) ci \u00c4nderungen an unseren CI-Konfigurationsdateien und -Skripten (Beispielbereiche: Travis, Circle, BrowserStack, SauceLabs) chore Andere \u00c4nderungen, die keine src- oder Testdateien ver\u00e4ndern","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"best-practice/coding-standards/conventional-commits/#klammern-im-prafix-fur-bereichsangaben","title":"Klammern im Pr\u00e4fix f\u00fcr Bereichsangaben","text":"<p>Im Allgemeinen werden Klammern verwendet, um den Bereich des Commits anzugeben, z. B. das Modul oder das Tool, das von der \u00c4nderung betroffen ist. Wenn du Klammern verwendest, solltest du den Bereich in Klammern setzen, gefolgt von einem Doppelpunkt und einer Leerstelle, bevor du den eigentlichen Commit-Beschreibungstext schreibst.</p> Bereichsangabe Beschreibung (area) Der Bereich, der von der \u00c4nderung betroffen ist (z.B. (login), (registration)","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"best-practice/coding-standards/conventional-commits/#beispiel","title":"Beispiel","text":"<pre><code>feat(login): add remember me checkbox\n</code></pre> <p>Die Verwendung von Klammern im Pr\u00e4fix bei Conventional Commits ist optional und h\u00e4ngt von der spezifischen Implementierung oder Konvention ab, die in deinem Projekt oder deiner Organisation verwendet wird.</p> <p>Wenn du dich jedoch f\u00fcr die Verwendung von Klammern im Pr\u00e4fix entscheidest, solltest du sicherstellen, dass dies in der Dokumentation eures Projekts klar angegeben ist, damit alle Entwickler, die am Projekt arbeiten, sich an die gleiche Konvention halten k\u00f6nnen. Wenn du dich entscheidest, keine Klammern im Pr\u00e4fix zu verwenden, ist es jedoch wichtig, dass du eine klare und konsistente Commit-Beschreibung schreibst, die den Zweck und den Umfang der \u00c4nderung angibt, damit andere Entwickler die \u00c4nderung leicht verstehen und nachvollziehen k\u00f6nnen so wie oben beschrieben.</p>","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"best-practice/coding-standards/conventional-commits/#quellen-und-tools","title":"Quellen und Tools","text":"","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"best-practice/coding-standards/conventional-commits/#offizielle-dokumentation","title":"Offizielle Dokumentation","text":"<p>Conventional Commits</p>","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"best-practice/coding-standards/conventional-commits/#commitizen","title":"Commitizen","text":"<p>\"Commitizen\", bietet eine vereinfachte M\u00f6glichkeit, Git-Commit-Nachrichten zu schreiben, die den Konventionen von \"Conventional Commits\" entsprechen.</p> <p>Die Commitizen-Webanwendung stellt eine grafische Benutzeroberfl\u00e4che zur Verf\u00fcgung, die Entwicklern dabei hilft, durch einen interaktiven Prozess eine standardisierte Commit-Nachricht zu erstellen. Dadurch kann sichergestellt werden, dass Commit-Nachrichten konsistent und lesbar sind, was dazu beitragen kann, die Zusammenarbeit in einem Team zu erleichtern.</p> <p>Commitizen</p>","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"best-practice/coding-standards/naming-conventions/","title":"Namenskonventionen","text":"","tags":["coding-standards","best-practice","namenskonventionen"]},{"location":"best-practice/coding-standards/naming-conventions/#kebab-case","title":"Kebab Case","text":"<p>In diesem Format werden W\u00f6rter mit Bindestrichen getrennt, z. B. \"mein-variablen-name\". Dieses Format wird oft in CSS-Dateien verwendet.</p>","tags":["coding-standards","best-practice","namenskonventionen"]},{"location":"best-practice/coding-standards/naming-conventions/#pascal-case","title":"Pascal Case","text":"<p>\u00c4hnlich wie Camel Case, aber der erste Buchstabe jedes Worts wird gro\u00df geschrieben, z.B. \"MeinVariablenName\". Dieses Format wird oft in der objektorientierten Programmierung und in C# verwendet.</p>","tags":["coding-standards","best-practice","namenskonventionen"]},{"location":"best-practice/coding-standards/naming-conventions/#screaming-snake-case","title":"Screaming Snake Case","text":"<p>Dies ist eine Variante des Snake Case, bei der alle Buchstaben gro\u00df geschrieben werden und W\u00f6rter durch Unterstriche getrennt werden, z.B. \"MEINE_VARIABLEN_NAME\". Dieses Format wird oft verwendet, um Konstanten zu kennzeichnen.</p>","tags":["coding-standards","best-practice","namenskonventionen"]},{"location":"best-practice/coding-standards/naming-conventions/#train-case","title":"Train Case","text":"<p>\u00c4hnlich wie Kebab Case, aber mit Gro\u00dfbuchstaben, z.B. \"MEIN-VARIABLEN-NAME\". Dieses Format wird in einigen Sprachen wie Ruby und Lisp verwendet.</p>","tags":["coding-standards","best-practice","namenskonventionen"]},{"location":"best-practice/coding-standards/naming-conventions/#hungarian-notation","title":"Hungarian Notation","text":"<p>In diesem Format wird der Variablenname mit einem Pr\u00e4fix versehen, der die Art der Variablen angibt. Zum Beispiel kann eine Variable, die eine Zeichenkette enth\u00e4lt, mit dem Pr\u00e4fix \"str\" versehen werden, z.B. \"strName\".</p>","tags":["coding-standards","best-practice","namenskonventionen"]},{"location":"best-practice/coding-standards/naming-conventions/#upper-camel-case-oder-studlycase","title":"Upper Camel Case oder StudlyCase","text":"<p>Dies ist \u00e4hnlich wie Pascal Case, aber der erste Buchstabe des ersten Worts wird auch gro\u00df geschrieben. Dieses Format wird manchmal als \"StudlyCase\" bezeichnet, da es an die Gro\u00df- und Kleinschreibung von Studien- oder Stichworten erinnert, z.B. \"MeinTollerVariablenName\".</p>","tags":["coding-standards","best-practice","namenskonventionen"]},{"location":"best-practice/coding-standards/naming-conventions/#lower-camel-case-oder-dromedar-case","title":"Lower Camel Case oder dromedar case","text":"<p>Auch bekannt als \"dromedar case\", \u00e4hnlich wie Camel Case, aber der erste Buchstabe des ersten Worts wird klein geschrieben, z.B. \"meinTollerVariablenName\". Dieses Format wird oft in Java und JavaScript verwendet.</p>","tags":["coding-standards","best-practice","namenskonventionen"]},{"location":"best-practice/coding-standards/naming-conventions/#mixed-case","title":"Mixed Case","text":"<p>Dieses Format enth\u00e4lt sowohl Gro\u00df- als auch Kleinschreibung in zuf\u00e4lliger Weise, z.B. \"MeInVaRiAbLeNaMe\". Es wird nicht empfohlen, da es die Lesbarkeit des Codes beeintr\u00e4chtigen kann.</p>","tags":["coding-standards","best-practice","namenskonventionen"]},{"location":"best-practice/coding-standards/naming-conventions/#abbreviations","title":"Abbreviations","text":"<p>Einige Entwickler verwenden Abk\u00fcrzungen f\u00fcr Variablennamen, um sie k\u00fcrzer zu machen, z.B. \"i\" f\u00fcr \"Index\" oder \"num\" f\u00fcr \"number\". Es ist wichtig sicherzustellen, dass die Abk\u00fcrzungen f\u00fcr alle im Team klar sind, um Missverst\u00e4ndnisse zu vermeiden.</p>","tags":["coding-standards","best-practice","namenskonventionen"]},{"location":"best-practice/coding-standards/semantic-versioning/","title":"Semantic Versioning","text":"","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"best-practice/coding-standards/semantic-versioning/#zusammenfassung","title":"Zusammenfassung","text":"<p>0.0.0</p> <p>MAJOR-Version, wenn inkompatible API-\u00c4nderungen vorgenommen werden MINOR-Version, wenn neue Funktionalit\u00e4ten auf abw\u00e4rtskompatible Weise hinzuf\u00fcgt werden PATCH-Version, wenn abw\u00e4rtskompatible Fehlerbehebungen vorgenommen werden</p> <p>Zus\u00e4tzliche Bezeichnungen f\u00fcr Vorver\u00f6ffentlichungs- und Build-Metadaten sind als Erweiterungen des Formats MAJOR.MINOR.PATCH verf\u00fcgbar.</p> <p>https://semver.org</p>","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"clean-code/boy-scouting-principle/","title":"Boy-Scouting-Principle - Pfadfinderregel","text":"","tags":["clean-code","boy-scouting-principle","pfadfinderregel"]},{"location":"clean-code/boy-scouting-principle/#zusammenfassung","title":"Zusammenfassung","text":"<p>Das Boy-Scout-Softwareentwicklungsprinzip und die Pfadfinderregel in der Softwareentwicklung sind wichtige Grunds\u00e4tze, die Entwickler anwenden k\u00f6nnen, um den Code zu verbessern und sicherzustellen, dass er immer auf dem neuesten Stand bleibt.</p> <p>Das Boy-Scout-Prinzip fordert Entwickler auf, den Code bei jeder Gelegenheit zu verbessern, indem sie ihn \"aufr\u00e4umen\", um sicherzustellen, dass er lesbar, verst\u00e4ndlich und wartbar bleibt. Dies kann bedeuten, dass Entwickler den Code durchsuchen, um potenzielle Fehler oder ineffiziente Codestrukturen zu finden und diese zu korrigieren. Es kann auch bedeuten, dass sie den Code umschreiben, um ihn verst\u00e4ndlicher und leichter zu warten zu machen.</p> <p>Die Pfadfinderregel besagt, dass Entwickler den Code so strukturieren sollten, dass er leicht lesbar, verst\u00e4ndlich und erweiterbar ist. Dies kann bedeuten, dass sie den Code in kleine, gut strukturierte Module aufteilen, die klar definierte Aufgaben erf\u00fcllen. Entwickler sollten auch aussagekr\u00e4ftige Variablennamen, Funktionen und Klassen verwenden, um den Code verst\u00e4ndlicher zu machen, sowie ausreichende Kommentare hinzuf\u00fcgen, um die Funktionsweise und die Absicht des Codes zu beschreiben.</p> <p>Zusammenfassend zielen sowohl das Boy-Scout-Prinzip als auch die Pfadfinderregel darauf ab, den Code lesbarer, verst\u00e4ndlicher und wartbarer zu machen, um sicherzustellen, dass die Software immer auf dem neuesten Stand bleibt und bereit ist, den Anforderungen der Benutzer und der Organisation gerecht zu werden.</p>","tags":["clean-code","boy-scouting-principle","pfadfinderregel"]},{"location":"clean-code/solid-design-principles/","title":"Solid-Design-Principles","text":"","tags":["clean-code","solid-design-principles","solid"]},{"location":"clean-code/solid-design-principles/#zusammenfassung","title":"Zusammenfassung","text":"<p>Die SOLID-Design-Prinzipien sind eine Gruppe von f\u00fcnf Prinzipien, die von Robert C. Martin vorgeschlagen wurden, um Software-Designs zu verbessern. Jedes dieser Prinzipien stellt einen grundlegenden Leitfaden dar, der dabei helfen soll, die Qualit\u00e4t, die Wartbarkeit und die Erweiterbarkeit von Software zu verbessern.</p> <p>Die f\u00fcnf SOLID-Prinzipien sind:</p>","tags":["clean-code","solid-design-principles","solid"]},{"location":"clean-code/solid-design-principles/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>Single Responsibility Principle (SRP): Eine Klasse sollte nur eine Verantwortlichkeit haben. Das bedeutet, dass sie nur eine Aufgabe erf\u00fcllen und nur f\u00fcr eine Art von \u00c4nderungen anf\u00e4llig sein sollte.</p> <pre><code>&lt;?php\n// bad\nclass Customer {\nprivate $name;\nprivate $email;\npublic function __construct($name, $email) {\n$this-&gt;name = $name;\n$this-&gt;email = $email;\n}\npublic function getName() {\nreturn $this-&gt;name;\n}\npublic function getEmail() {\nreturn $this-&gt;email;\n}\npublic function sendEmail($subject, $body) {\n// Code zum Senden einer E-Mail\n}\n}\n/*\nIn diesem Beispiel ist die `Customer`-Klasse sowohl f\u00fcr das Speichern von Kundeninformationen und das Bereitstellen von Zugriffsmethoden als auch f\u00fcr das Senden von E-Mails verantwortlich. Die Klasse hat damit mehrere Verantwortlichkeiten und ist somit schwerer wartbar und erweiterbar.\n*/\n// good\nclass Customer {\nprivate $name;\nprivate $email;\npublic function __construct($name, $email) {\n$this-&gt;name = $name;\n$this-&gt;email = $email;\n}\npublic function getName() {\nreturn $this-&gt;name;\n}\npublic function getEmail() {\nreturn $this-&gt;email;\n}\n}\nclass EmailSender {\npublic function sendEmail(Customer $customer) {\n$email = $customer-&gt;getEmail();\n// Code zum Senden einer E-Mail\n}\n}\n/*\nIn diesem Beispiel ist die `Customer`-Klasse nur f\u00fcr das Speichern von Kundeninformationen und das Bereitstellen von Zugriffsmethoden verantwortlich. Die `EmailSender`-Klasse ist nur f\u00fcr das Senden von E-Mails zust\u00e4ndig. Beide Klassen erf\u00fcllen jeweils nur eine Verantwortlichkeit.\n*/\n</code></pre>","tags":["clean-code","solid-design-principles","solid"]},{"location":"clean-code/solid-design-principles/#open-closed-principle-ocp","title":"Open-Closed Principle (OCP)","text":"<p>Software-Entit\u00e4ten (Klassen, Module, Funktionen usw.) sollten offen f\u00fcr Erweiterungen, aber geschlossen f\u00fcr \u00c4nderungen sein. Das bedeutet, dass die Funktionalit\u00e4t einer Software-Einheit durch Hinzuf\u00fcgen neuer Code-Module oder Klassen erweitert werden sollte, ohne den bestehenden Code \u00e4ndern zu m\u00fcssen.</p> <pre><code>&lt;?php\n// bad\nclass AreaCalculator {\npublic function calculate($shapes) {\n$area = 0;\nforeach ($shapes as $shape) {\nif ($shape instanceof Circle) {\n$area += pi() * pow($shape-&gt;getRadius(), 2);\n} elseif ($shape instanceof Rectangle) {\n$area += $shape-&gt;getLength() * $shape-&gt;getWidth();\n}\n// Weitere Bedingungen f\u00fcr andere Formen\n}\nreturn $area;\n}\n}\n/*\nIn diesem Beispiel ist die `AreaCalculator`-Klasse offen f\u00fcr Modifikationen, da sie ge\u00e4ndert werden muss, wenn eine neue Form hinzugef\u00fcgt wird. Die Klassen `Circle` und `Rectangle` sind auch offen f\u00fcr Modifikationen, da sie neue Methoden ben\u00f6tigen, wenn neue Formen hinzugef\u00fcgt werden.\n*/\n// good\ninterface Shape {\npublic function area();\n}\nclass Circle implements Shape {\nprivate $radius;\npublic function __construct($radius) {\n$this-&gt;radius = $radius;\n}\npublic function area() {\nreturn pi() * pow($this-&gt;radius, 2);\n}\n}\nclass Rectangle implements Shape {\nprivate $length;\nprivate $width;\npublic function __construct($length, $width) {\n$this-&gt;length = $length;\n$this-&gt;width = $width;\n}\npublic function area() {\nreturn $this-&gt;length * $this-&gt;width;\n}\n}\nclass AreaCalculator {\npublic function calculate(Shape $shape) {\nreturn $shape-&gt;area();\n}\n}\n/*\nIn diesem Beispiel sind die Klassen `Circle` und `Rectangle` geschlossen f\u00fcr \u00c4nderungen, da sie ihre Funktionalit\u00e4t nicht \u00e4ndern, wenn neue Formen hinzugef\u00fcgt werden. Die `AreaCalculator`-Klasse ist offen f\u00fcr Erweiterungen, da sie einfach erweitert werden kann, um die Berechnung der Fl\u00e4che neuer Formen zu unterst\u00fctzen.\n*/\n</code></pre>","tags":["clean-code","solid-design-principles","solid"]},{"location":"clean-code/solid-design-principles/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<p>Objekte einer abgeleiteten Klasse sollten durch Objekte ihrer Basisklasse ersetzbar sein, ohne das Programm zu beeintr\u00e4chtigen. Das bedeutet, dass eine abgeleitete Klasse alle Verhaltensweisen ihrer Basisklasse \u00fcbernehmen sollte, ohne dass das Verhalten des Programms sich \u00e4ndert.</p> <pre><code>&lt;?php\n// bad\nclass Vehicle {\nprotected $fuel;\npublic function refuel($fuel) {\n// Code zum Betanken des Fahrzeugs\n}\npublic function accelerate() {\n// Code zum Beschleunigen des Fahrzeugs\n}\n}\nclass Car extends Vehicle {\npublic function refuel($fuel) {\nif ($fuel &gt; 50) {\nthrow new Exception('Too much fuel');\n}\nparent::refuel($fuel);\n}\npublic function accelerate() {\n// Code zum Beschleunigen des Autos\n}\n}\n/*\nIn diesem Beispiel verletzt die `Car`-Klasse das Liskov Substitution Principle, da sie die Vertragsbedingungen der `Vehicle`-Klasse verletzt. Die `refuel()`-Methode der `Car`-Klasse f\u00fchrt eine zus\u00e4tzliche \u00dcberpr\u00fcfung durch, um sicherzustellen, dass nicht zu viel Kraftstoff hinzugef\u00fcgt wird. Wenn ein Code-Abschnitt den Aufruf der `refuel()`-Methode auf einer `Vehicle`-Instanz aufruft und stattdessen eine `Car`-Instanz erh\u00e4lt, f\u00fchrt die zus\u00e4tzliche \u00dcberpr\u00fcfung m\u00f6glicherweise zu unerwarteten Fehlern oder Ausnahmen.\n*/\n// good\nclass Vehicle {\npublic function startEngine() {\n// Code zum Starten des Motors\n}\n}\nclass Car extends Vehicle {\npublic function startEngine() {\nparent::startEngine();\n// Code speziell f\u00fcr Autos zum Starten des Motors\n}\n}\nclass ElectricCar extends Car {\npublic function startEngine() {\n// Code zum Starten des Elektromotors\n}\n}\n/*\nIn diesem Beispiel kann die `ElectricCar`-Klasse ohne Probleme anstelle der `Car`-Klasse verwendet werden, da sie alle Methoden und Verhaltensweisen der `Car`-Klasse erbt und sie auch \u00fcberschreiben kann, wenn dies erforderlich ist.\n*/\n</code></pre>","tags":["clean-code","solid-design-principles","solid"]},{"location":"clean-code/solid-design-principles/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<p>Interface Segregation Principle (ISP): Die Schnittstellen sollten auf die spezifischen Bed\u00fcrfnisse der Clients zugeschnitten sein. Das bedeutet, dass eine Klasse nicht gezwungen werden sollte, Methoden oder Eigenschaften zu implementieren, die sie nicht ben\u00f6tigt.</p> <pre><code>&lt;?php\n// bad\ninterface Animal {\npublic function move();\npublic function fly();\npublic function swim();\n}\nclass Bird implements Animal {\npublic function move() {\n// Code zur Bewegung eines Vogels\n}\npublic function fly() {\n// Code zum Fliegen eines Vogels\n}\npublic function swim() {\nthrow new Exception('Birds cannot swim');\n}\n}\nclass Fish implements Animal {\npublic function move() {\n// Code zur Bewegung eines Fisches\n}\npublic function fly() {\nthrow new Exception('Fish cannot fly');\n}\npublic function swim() {\n// Code zum Schwimmen eines Fisches\n}\n}\n/*\nIn diesem Beispiel verletzt die `Animal`-Schnittstelle das Interface Segregation Principle, da sie Methoden f\u00fcr Fliegen, Schwimmen und Bewegung kombiniert, obwohl nicht alle Tiere diese F\u00e4higkeiten besitzen. Die `Bird`-Klasse muss die `swim()`-Methode implementieren, obwohl V\u00f6gel nicht schwimmen k\u00f6nnen, und die `Fish`-Klasse muss die `fly()`-Methode implementieren, obwohl Fische nicht fliegen k\u00f6nnen. Dies f\u00fchrt zu unerwarteten Fehlern oder Ausnahmen, wenn der Code auf eine Instanz von `Bird` oder `Fish` zugreift und eine unerwartete Methode aufruft.\n*/\n// good\ninterface Animal {\npublic function move();\n}\ninterface FlyableAnimal extends Animal {\npublic function fly();\n}\ninterface SwimmableAnimal extends Animal {\npublic function swim();\n}\nclass Bird implements FlyableAnimal {\npublic function move() {\n// Code zur Bewegung eines Vogels\n}\npublic function fly() {\n// Code zum Fliegen eines Vogels\n}\n}\nclass Fish implements SwimmableAnimal {\npublic function move() {\n// Code zur Bewegung eines Fisches\n}\npublic function swim() {\n// Code zum Schwimmen eines Fisches\n}\n}\n/*\nIn diesem Beispiel haben wir das Interface Segregation Principle angewendet, indem wir separate Schnittstellen f\u00fcr Fliegen und Schwimmen definiert haben, die jeweils von der allgemeinen `Animal`-Schnittstelle erben. Dadurch k\u00f6nnen wir sicherstellen, dass Klassen, die nicht fliegen k\u00f6nnen, nicht gezwungen werden, eine `fly()`-Methode zu implementieren, und Klassen, die nicht schwimmen k\u00f6nnen, nicht gezwungen werden, eine `swim()`-Methode zu implementieren. In diesem Fall implementieren die `Bird`- und `Fish`-Klassen nur die Methoden, die f\u00fcr ihre jeweilige Art der Fortbewegung relevant sind.\n*/\n</code></pre>","tags":["clean-code","solid-design-principles","solid"]},{"location":"clean-code/solid-design-principles/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<p>Dependency Inversion Principle (DIP): Abh\u00e4ngigkeiten sollten auf abstrakten Schnittstellen basieren, nicht auf konkreten Implementierungen. Das bedeutet, dass h\u00f6here Module nicht von niedrigeren Modulen abh\u00e4ngig sein sollten und dass abstrakte Module nicht von konkreten Modulen abh\u00e4ngig sein sollten.</p> <pre><code>&lt;?php\n// bad\nclass MySqlDatabase {\npublic function connect() {\n// Code zur Verbindung mit einer MySQL-Datenbank\n}\n}\nclass UserRepository {\nprivate $database;\npublic function __construct() {\n$this-&gt;database = new MySqlDatabase();\n}\npublic function getUsers() {\n$this-&gt;database-&gt;connect();\n// Code zum Abrufen von Benutzern aus der Datenbank\n}\n}\n/*\nIn diesem Beispiel wird das Dependency Inversion Principle verletzt, da die `UserRepository`-Klasse direkt an die konkrete Implementierung `MySqlDatabase` gebunden ist. Wenn wir eine andere Datenbank wie PostgreSQL verwenden m\u00f6chten, m\u00fcssen wir den Code in der `UserRepository`-Klasse \u00e4ndern. Das f\u00fchrt dazu, dass der Code starr und schwer erweiterbar wird. Um das DIP zu wahren, sollte die `UserRepository`-Klasse die Abstraktion `DatabaseInterface` verwenden, statt direkt an die konkrete Implementierung gebunden zu sein.\n*/\n// good\ninterface DatabaseInterface {\npublic function connect();\n}\nclass MySqlDatabase implements DatabaseInterface {\npublic function connect() {\n// Code zur Verbindung mit einer MySQL-Datenbank\n}\n}\nclass PostgreSqlDatabase implements DatabaseInterface {\npublic function connect() {\n// Code zur Verbindung mit einer PostgreSQL-Datenbank\n}\n}\nclass UserRepository {\nprivate $database;\npublic function __construct(DatabaseInterface $database) {\n$this-&gt;database = $database;\n}\npublic function getUsers() {\n$this-&gt;database-&gt;connect();\n// Code zum Abrufen von Benutzern aus der Datenbank\n}\n}\n/*\nIn diesem Beispiel haben wir das Dependency Inversion Principle angewendet, indem wir eine Abstraktion `DatabaseInterface` geschaffen haben, die von konkreten Implementierungen `MySqlDatabase` und `PostgreSqlDatabase` implementiert wird. Anstatt die konkreten Implementierungen direkt in der `UserRepository`-Klasse zu instanziieren, injizieren wir die Abstraktion durch den Konstruktor. Dadurch wird die `UserRepository`-Klasse nicht mehr direkt an konkrete Implementierungen gebunden, sondern nur an die Abstraktion `DatabaseInterface`. Dies erleichtert das Austauschen der verwendeten Datenbank und f\u00f6rdert die Flexibilit\u00e4t und Wiederverwendbarkeit des Codes.\n*/\n</code></pre>","tags":["clean-code","solid-design-principles","solid"]},{"location":"github/git/","title":"Git","text":"","tags":["github","push","force-push","github-key","lock","clone"]},{"location":"github/git/#force-push-git-branches","title":"Force push git branches","text":"<pre><code>git push --force origin main\ngit push -f origin main\ngit push origin +main\n</code></pre> <ul> <li>Original tweet by Stefan Judis</li> </ul>","tags":["github","push","force-push","github-key","lock","clone"]},{"location":"github/git/#github-key-anpassen-bzw-bereinigen","title":"Github key anpassen bzw. bereinigen","text":"<pre><code>composer update --lock\n</code></pre>","tags":["github","push","force-push","github-key","lock","clone"]},{"location":"github/git/#repository-von-github-herunterzuladen","title":"Repository von GitHub herunterzuladen","text":"<pre><code>git clone your-repository-url\n</code></pre>","tags":["github","push","force-push","github-key","lock","clone"]},{"location":"github/issues-verlinken/","title":"Issues verlinken","text":"<p>Sie k\u00f6nnen einen Pull-Request oder Branch mit einem Issue verkn\u00fcpfen, um anzuzeigen, dass eine Behebung in Bearbeitung ist, und um das Issue automatisch zu schlie\u00dfen, wenn der Pull-Request oder Branch zusammengef\u00fchrt wird.</p> <p>Hinweis: Die speziellen Schl\u00fcsselw\u00f6rter in einer Pull-Request-Beschreibung werden interpretiert, wenn die Pull-Request auf den Default - Branch des Repositorys abzielt. Wenn die Basis des PR jedoch ein anderer Zweig ist, werden diese Schl\u00fcsselw\u00f6rter ignoriert, es werden keine Links erstellt und das Zusammenf\u00fchren des PR hat keine Auswirkung auf die Ausgaben. Wenn Sie einen Pull-Request \u00fcber ein Schl\u00fcsselwort mit einem Issue verkn\u00fcpfen m\u00f6chten, muss sich der PR auf dem Standard-Branch befinden.</p>","tags":["composer","github","github-key"]},{"location":"github/issues-verlinken/#uber-verknupfte-probleme-und-pull-requests","title":"\u00dcber verkn\u00fcpfte Probleme und Pull-Requests","text":"<p>Sie k\u00f6nnen ein Problem manuell mit einer Pull-Anforderung verkn\u00fcpfen oder ein unterst\u00fctztes Schl\u00fcsselwort in der Beschreibung der Pull-Anforderung verwenden.</p> <p>Wenn Sie eine Pull-Anforderung mit dem Problem verkn\u00fcpfen, auf das sich die Pull-Anforderung bezieht, k\u00f6nnen Mitbearbeiter sehen, dass jemand an dem Problem arbeitet.</p> <p>Wenn Sie einen verkn\u00fcpften Pull-Request mit dem Standard-Branch eines Repositorys zusammenf\u00fchren, wird das verkn\u00fcpfte Issue automatisch geschlossen. Weitere Informationen zum Standard-Zweig finden Sie unter \u201e \u00c4ndern des Standard-Zweigs \u201c.</p>","tags":["composer","github","github-key"]},{"location":"github/issues-verlinken/#verknupfen-einer-pull-anforderung-mit-einem-problem-mithilfe-eines-schlusselworts","title":"Verkn\u00fcpfen einer Pull-Anforderung mit einem Problem mithilfe eines Schl\u00fcsselworts","text":"<p>Sie k\u00f6nnen eine Pull-Anforderung mit einem Problem verkn\u00fcpfen, indem Sie ein unterst\u00fctztes Schl\u00fcsselwort in der Beschreibung der Pull-Anforderung oder in einer Commit-Nachricht verwenden. Die Pull-Anfrage muss sich im Standard-Branch befinden.</p> <ul> <li>nah dran</li> <li>schlie\u00dft</li> <li>abgeschlossen</li> <li>Fix</li> <li>behebt</li> <li>Fest</li> <li>beschlie\u00dfen</li> <li>beschlie\u00dft</li> <li>aufgel\u00f6st</li> </ul> <p>Wenn Sie ein Schl\u00fcsselwort verwenden, um auf einen Pull-Request-Kommentar in einem anderen Pull-Request zu verweisen, werden die Pull-Requests verkn\u00fcpft. Durch das Zusammenf\u00fchren der referenzierenden Pull-Anforderung wird auch die referenzierte Pull-Anforderung geschlossen.</p> <p>Die Syntax zum Schlie\u00dfen von Schl\u00fcsselw\u00f6rtern h\u00e4ngt davon ab, ob sich das Problem im selben Repository wie die Pull-Anfrage befindet.</p> Verkn\u00fcpftes Problem Syntax Beispiel Ausgabe im selben Repository SCHL\u00dcSSELWORT # AUSGABE -NUMMER <code>Closes #10</code> Ausgabe in einem anderen Repository KEYWORD OWNER / REPOSITORY # ISSUE-NUMBER <code>Fixes octo-org/octo-repo#100</code> Mehrere Probleme Verwenden Sie f\u00fcr jedes Problem die vollst\u00e4ndige Syntax <code>Resolves #10, resolves #123, resolves octo-org/octo-repo#100</code> <p>Nur manuell verkn\u00fcpfte Pull-Requests k\u00f6nnen manuell entkoppelt werden. Um die Verkn\u00fcpfung eines Problems aufzuheben, das Sie mit einem Schl\u00fcsselwort verkn\u00fcpft haben, m\u00fcssen Sie die Pull-Request-Beschreibung bearbeiten, um das Schl\u00fcsselwort zu entfernen.</p> <p>Sie k\u00f6nnen auch schlie\u00dfende Schl\u00fcsselw\u00f6rter in einer Commit-Nachricht verwenden. Das Problem wird geschlossen, wenn Sie den Commit in den Standard-Branch zusammenf\u00fchren, aber die Pull-Anforderung, die den Commit enth\u00e4lt, wird nicht als verkn\u00fcpfte Pull-Anforderung aufgef\u00fchrt.</p> <p>Jeder mit Schreibberechtigungen f\u00fcr ein Repository kann eine Pull-Anforderung manuell mit einem Vorgang \u00fcber die Seitenleiste f\u00fcr Pull-Anforderungen verkn\u00fcpfen.</p> <p>Sie k\u00f6nnen bis zu zehn Issues manuell mit jeder Pull-Anfrage verkn\u00fcpfen. Das Issue und die Pull-Anforderung m\u00fcssen sich im selben Repository befinden.</p> <ol> <li> <p>Navigieren Sie auf GitHub.com zur Hauptseite des Repositorys.</p> </li> <li> <p>Klicken Sie unter Ihrem Repository-Namen auf Pull-Anforderungen .</p> <p></p> </li> <li> <p>Klicken Sie in der Liste der Pull-Requests auf den Pull-Request, den Sie mit einem Issue verkn\u00fcpfen m\u00f6chten.</p> </li> <li> <p>Klicken Sie in der rechten Seitenleiste im Abschnitt \"Entwicklung\" auf .</p> </li> <li> <p>Klicken Sie auf das Problem, das Sie mit der Pull-Anforderung verkn\u00fcpfen m\u00f6chten. </p> </li> </ol> <p>Jeder mit Schreibberechtigungen f\u00fcr ein Repository kann eine Pull-Anfrage manuell verkn\u00fcpfen oder von der Issue-Seitenleiste zu einem Issue verzweigen.</p> <p>Sie k\u00f6nnen bis zu zehn Issues manuell mit jeder Pull-Anfrage verkn\u00fcpfen. Das Problem kann sich in einem anderen Repository befinden als der verkn\u00fcpfte Pull-Request oder Branch. Ihr zuletzt ausgew\u00e4hltes Repository wird gespeichert</p> <ol> <li> <p>Navigieren Sie auf GitHub.com zur Hauptseite des Repositorys.</p> </li> <li> <p>Klicken Sie unter Ihrem Repository-Namen auf Issues .</p> <p></p> </li> <li> <p>Klicken Sie in der Liste der Issues auf das Issue, mit dem Sie eine Pull-Anfrage oder einen Branch verkn\u00fcpfen m\u00f6chten.</p> </li> <li> <p>Klicken Sie in der rechten Seitenleiste auf Entwicklung . </p> </li> <li> <p>Klicken Sie auf das Repository mit der Pull-Anfrage oder dem Zweig, den Sie mit dem Problem verkn\u00fcpfen m\u00f6chten. </p> </li> <li> <p>Klicken Sie auf den Pull-Request oder Branch, den Sie mit dem Issue verkn\u00fcpfen m\u00f6chten. </p> </li> <li> <p>Klicken Sie auf Anwenden . </p> </li> </ol>","tags":["composer","github","github-key"]},{"location":"github/issues-verlinken/#weiterlesen","title":"Weiterlesen","text":"<ul> <li>\" Automatisch verlinkte Verweise und URLs \"</li> </ul>","tags":["composer","github","github-key"]},{"location":"laravel/arr/","title":"Arr","text":"","tags":["laravel","arr","helper"]},{"location":"laravel/arr/#throw-an-exception","title":"Throw an exception","text":"<pre><code>&lt;?php\n$config = ['.......'];\n$apiKey = Arr::get($config, 'api_key', fn () =&gt; throw new Exeption('your message here'));\n// or\n$apiKey = $config['api_key'] ?? throw new Exeption('your message here'));\n</code></pre> <ul> <li>Original tweet by Steve Bauman</li> </ul>","tags":["laravel","arr","helper"]},{"location":"laravel/collection/","title":"Collection","text":"","tags":["laravel","collection","sort","sortKeys"]},{"location":"laravel/collection/#sort","title":"sort","text":"<pre><code>&lt;?php\n$exampleEntries = [\n'my example exa' =&gt; 'value_4',\n'my example' =&gt; 'value_1',\n'my example ex' =&gt; 'value_3',\n'my example e' =&gt; 'value_2',\n];\n$result = collect($exampleEntries)-&gt;sort()-&gt;toArray();\n$result = [\n\"my example\" =&gt; \"value_1\",\n\"my example e\" =&gt; \"value_2\",\n\"my example ex\" =&gt; \"value_3\",\n\"my example exa\" =&gt; \"value_4\",\n]\n</code></pre>","tags":["laravel","collection","sort","sortKeys"]},{"location":"laravel/collection/#sortkeys","title":"sortKeys","text":"<pre><code>&lt;?php\n$exampleEntries = [\n'key_1' =&gt; 'value_1',\n'key_3' =&gt; 'value_3',\n'key_2' =&gt; 'value_2',\n'key_7' =&gt; 'value_7',\n'key_4' =&gt; 'value_4',\n'key_6' =&gt; 'value_6',\n'key_5' =&gt; 'value_5',\n];\n$result = collect($exampleEntries)-&gt;sortKeys()-&gt;toArray();\n$result = [\n\"key_1\" =&gt; \"value_1\",\n\"key_2\" =&gt; \"value_2\",\n\"key_3\" =&gt; \"value_3\",\n\"key_4\" =&gt; \"value_4\",\n\"key_5\" =&gt; \"value_5\",\n\"key_6\" =&gt; \"value_6\",\n\"key_7\" =&gt; \"value_7\",\n]\n</code></pre>","tags":["laravel","collection","sort","sortKeys"]},{"location":"laravel/eloquent/","title":"Eloquent","text":"","tags":["laravel","eloquent","touch"]},{"location":"laravel/eloquent/#touch-eloquent-method","title":"Touch eloquent method","text":"<pre><code>&lt;?php\n$user = User::find(1);\n// instead of\n$user-&gt;update(['subscribed_at' =&gt; now()]);\n// use\n$user-&gt;touch('subscribed_at');\n</code></pre> <ul> <li>Original tweet by Oussama Sid</li> </ul>","tags":["laravel","eloquent","touch"]},{"location":"laravel/migrations/","title":"Laravel Migrations","text":"<p>Laravel Migrations ist eine Versionskontrolle f\u00fcr die Datenbank mit der Tabellen definiert, angepasst und gel\u00f6scht werden k\u00f6nnenn. Migrations erleichtern vor allem die Zusammenarbeit innerhalb eines Teams.</p>","tags":["laravel","databse","DB","migrations"]},{"location":"laravel/migrations/#erstellen-einer-migration","title":"Erstellen einer Migration","text":"<pre><code>php artisan make:migration create_your_table_name_table\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"laravel/migrations/#migrationen-ausfuhren","title":"Migrationen ausf\u00fchren","text":"<p>Mit folgendem Befehl werden alle up Methoden aller migrations-Dateien ausgef\u00fchrt, die bis Dato noch nicht ausgef\u00fchrt wurden.</p> <pre><code>php artisan migrate\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"laravel/migrations/#welche-migrationen-wurden-bereits-ausgefuhrt","title":"Welche Migrationen wurden bereits ausgef\u00fchrt","text":"<pre><code>php artisan migrate:status\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"laravel/migrations/#migration-zuruckdrehen","title":"Migration zur\u00fcckdrehen","text":"<p>Mit diesem Befehl werden alle down-Methoden der Migrationsdateien ausgef\u00fchrt die vorab durch den Befehl php artisan migrate ausgef\u00fchrt wurden.</p> <pre><code>php artisan migrate:rollback\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"laravel/migrations/#angeben-wieviele-php-artisan-migrate-befehle-wieder-zuruckgedreht-werden-sollen","title":"Angeben wieviele php artisan migrate-Befehle wieder zur\u00fcckgedreht werden sollen","text":"<p>In diesem Fall werden alle down-Methoden der Migrationsdateien ausgef\u00fchrt, die mit den letzten drei php artisan migrate Befehlen eingespielt wurden.</p> <pre><code>php artisan migrate:rollback --step=3\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"laravel/migrations/#migrationen-in-einer-sql-datei-zusammenfuhren-squaschen","title":"Migrationen in einer SQL-Datei zusammenf\u00fchren (squaschen)","text":"<pre><code>php artisan schema:dump\n\n# Dump the current database schema and prune all existing migrations...\nphp artisan schema:dump --prune\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"laravel/route/","title":"Route","text":"","tags":["laravel","route"]},{"location":"laravel/route/#test-route","title":"Test-Route","text":"<pre><code>&lt;?php\nuse Illuminate\\Support\\Facades\\Route;\nRoute::get('/test-route', function () {\n// return your example\n})\n</code></pre>","tags":["laravel","route"]},{"location":"laravel/route/#withoutmiddleware","title":"withoutMiddleware","text":"<pre><code>&lt;?php\nuse App\\Http\\Middleware\\FirstMiddleware;\nuse App\\Http\\Middleware\\SecondMiddleware;\nuse Illuminate\\Support\\Facades\\Route;\nRoute::prefix('my-prefix')\n-&gt;middleware([\nFirstMiddleware::class,\nSecondMiddleware::class,\n])\n-&gt;group(function () {\nRoute::get('my-route', function () {\n// Uses first &amp; second middleware\n});\nRoute::withoutMiddleware(FirstMiddleware::class)\n-&gt;get('route-without-first-middleware', function () {\n// Uses second middleware\n});\nRoute::withoutMiddleware(SecondMiddleware::class)\n-&gt;get('route-without-second-middleware', function () {\n// Uses first middleware\n});\nRoute::withoutMiddleware([\nFirstMiddleware::class,\nSecondMiddleware::class,\n])-&gt;get('route-without-middleware', function () {\n// Uses no middleware\n}\n);\n});\n</code></pre>","tags":["laravel","route"]},{"location":"laravel/route/#with-parameters","title":"with Parameters","text":"<pre><code>&lt;?php\nnamespace App\\Http\\Middleware;\nuse Closure;\nclass EnsureUserHasRole\n{\npublic function handle($request, Closure $next, $role)\n{\nif (! $request-&gt;user()-&gt;hasRole($role)) {\n// Redirect...\n}\nreturn $next($request);\n}\n}\n</code></pre> <pre><code>&lt;?php\nuse Illuminate\\Support\\Facades\\Route;\nRoute::put('/post/{id}', function ($id) {\n//\n})-&gt;middleware('role:editor');\n</code></pre>","tags":["laravel","route"]},{"location":"laravel/tests/","title":"Tests","text":"","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#expectexception-and-expectexceptionmessage","title":"expectException and expectExceptionMessage","text":"<pre><code>&lt;?php\nuse Application\\User\\Queries\\ListUserQuery;\nuse Illuminate\\Http\\Request;\nuse Spatie\\QueryBuilder\\Exceptions\\InvalidFilterQuery;\nuse Tests\\TestCase;\nclass ListUserQueryTest extends TestCase\n{\n/** @test */\npublic function it_throws_an_exception_when_the_key_for_filtering_is_not_supported(): void\n{\n$this-&gt;expectException(InvalidFilterQuery::class);\n$this-&gt;expectExceptionMessage('Requested filter(s) `key_not_supported` are not allowed. Allowed filter(s) are `id, email, nickname`.');\n$request = new Request(['filter' =&gt; ['key_not_supported' =&gt; 'value is irrelevant']]);\nnew ListMyModelQuery($request);\n}\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#it_uses_the_right_query_filters","title":"it_uses_the_right_query_filters","text":"<pre><code>&lt;?php\n/** @test */\npublic function it_uses_the_right_query_filters(): void\n{\n$this-&gt;assertQueryFilterEquals(\nListMyModelQuery::class,\n[\nAllowedFilter::exact('id'),\nAllowedFilter::exact('handle'),\nAllowedFilter::partial('name', 'display_name'),\n]\n);\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#assertthrows-it_throws_an_error_if_model_doesnt_exist","title":"assertThrows | it_throws_an_error_if_model_doesnt_exist","text":"<pre><code>&lt;?php\n/** @test */\npublic function it_throws_an_error_if_model_doesnt_exist(): void\n{\n$className = User::class;\n$this-&gt;assertThrows(\nfn () =&gt; User::findOrFail(0),\nModelNotFoundException::class,\n\"No query results for model [{$className}] 1\"\n);\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#it_uses_the_right_query_class","title":"it_uses_the_right_query_class","text":"<pre><code>&lt;?php\n/** @test */\npublic function it_uses_the_right_query_class(): void\n{\n$query = $this-&gt;mock(\nListMyModelQuery::class,\nfn (MockInterface $mock) =&gt; $mock-&gt;shouldReceive('simplePaginate')\n-&gt;once()\n-&gt;andReturn(MyModelFactory::new()-&gt;create()-&gt;simplePaginate()),\n);\n$controller = new ViewMyModelListController();\n$controller($query, new Request());\n$this-&gt;assertControllerUsesClass(\nViewMyModelListController::class,\nListMyModelQuery::class\n);\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#it_uses_the_right_collection","title":"it_uses_the_right_collection","text":"<pre><code>&lt;?php\n/** @test */\npublic function it_uses_the_right_collection(): void\n{\n$this-&gt;assertControllerReturns(\nViewMyModelListController::class,\nMyModelCollection::class\n);\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#it_uses_the_right_middleware","title":"it_uses_the_right_middleware","text":"<pre><code>&lt;?php\npublic function middlewares(): array\n{\nreturn [\n'group1' =&gt; ['group1_sub1', 'group1_sub2'],\n'group2' =&gt; ['group2_sub1', 'group2_sub2'],\nMyMiddleware::class =&gt; [MyMiddleware::class],\n];\n}\n/**\n     * @test\n     *\n     * @dataProvider middlewares\n     */\npublic function it_uses_the_right_middleware($middleware)\n{\n$this-&gt;assertControllerUsesMiddleware(\nViewMyModelListController::class,\n$middleware,\n);\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#it_returns_the_right_structure-collection","title":"it_returns_the_right_structure | Collection","text":"<pre><code>&lt;?php\n/** @test */\npublic function it_returns_the_right_structure(): void\n{\nMyModelFactory::new()-&gt;create();\n$response = $this-&gt;createResource(MyModelCollection::class, MyModel::simplePaginate());\n$response-&gt;assertJsonStructureExact([\n'data',\n'links',\n'meta',\n]);\n$this-&gt;assertEquals(MyModelResource::class, MyModelCollection::make([])-&gt;collects);\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#it_returns_the_right_structure-resource","title":"it_returns_the_right_structure | Resource","text":"<pre><code>&lt;?php\n/** @test */\npublic function it_returns_the_right_structure(): void\n{\n$response = $this-&gt;createResource(\nMyModelResource::class,\nMyModelFactory::new()-&gt;create()\n);\n$response-&gt;assertJsonStructureExact([\n'id',\n'my_column_one',\n'my_column_two',\n'created_at',\n'updated_at',\n]);\n$response-&gt;assertJson(\nfn (AssertableJson $json) =&gt; $json\n-&gt;whereAllType([\n'id' =&gt; ['integer'],\n'my_column_one' =&gt; ['string'],\n'my_column_two' =&gt; [null, 'string'],\n'created_at' =&gt; ['string'],\n'updated_at' =&gt; ['string'],\n])\n-&gt;etc()\n);\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#examples_for_mock_actions","title":"examples_for_mock_actions","text":"<pre><code>&lt;?php\n/** @test */\npublic function examples_for_mock_actions(): void\n{\n$myAction = $this-&gt;spy(MyActionn::class);\n$myAction-&gt;shouldReceive('execute')\n-&gt;once()\n-&gt;withArgs(fn ($arg) =&gt; $arg === 'foo')\n-&gt;andReturn('bar');\n// or\n$spy = $this-&gt;spy(MyActionn::class);\n$spy-&gt;shouldReceive('execute')\n-&gt;once()\n-&gt;with(MyExampleModel::class, MyExampleData::class)\n-&gt;andReturn('bar');\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#eventfake","title":"Event::fake","text":"","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#event-assertdispatched","title":"Event:: assertDispatched","text":"<pre><code>&lt;?php\n/** @test */\npublic function event_assert_dispatched(): void\n{\nEvent::fake();\n// or\nEvent::fake([\nExampleCreated::class,\n]);\n$myExample = MyExampleFactory::new()-&gt;create();\n// Assert a event was dispatched...\nEvent::assertDispatched(ExampleCreated::class);\n// Assert a event was dispatched...\nEvent::assertDispatched(ExampleCreated::class, function ($event) use ($myExample) {\nreturn $event-&gt;myExample-&gt;is($myExample);\n});\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#event-assertnotdispatched","title":"Event:: assertNotDispatched","text":"<pre><code>&lt;?php\n/** @test */\npublic function event_assert_not_dispatched(): void\n{\nEvent::fake();\n// or\nEvent::fake([\nExampleCreated::class,\n]);\n$myExample = MyExampleFactory::new()-&gt;create();\n// Assert a event was not dispatched...\nEvent::assertNotDispatched(ExampleCreated::class);\nEvent::assertNotDispatched(ExampleCreated::class, function ($event, $payload) {\nreturn $payload[0]-&gt;name === 'John Doe';\n});\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#event-assertdispatchedtimes","title":"Event:: assertDispatchedTimes","text":"<pre><code>&lt;?php\n/** @test */\npublic function event_assert_dispatched_times(): void\n{\nEvent::fake();\n// or\nEvent::fake([\nExampleCreated::class,\n]);\n$myExample = MyExampleFactory::new()-&gt;create();\n// Assert a event was dispatched exactly n times...\nEvent::assertDispatchedTimes(ExampleCreated::class, 1);\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#event-assertlistening","title":"Event:: assertListening","text":"<pre><code>&lt;?php\n/** @test */\npublic function event_assert_listening(): void\n{\nEvent::fake();\n// or\nEvent::fake([\nExampleCreated::class,\n]);\n$myExample = MyExampleFactory::new()-&gt;create();\n// assert that a listener is listening to a given event\nEvent::assertListening(ExampleCreated::class, ExampleListener::class);\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#queuefake","title":"Queue::fake","text":"","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#queue-assertpushed","title":"Queue:: assertPushed","text":"<pre><code>&lt;?php\n/** @test */\npublic function examples_for_queue_fakes(): void\n{\nQueue::fake();\n// or\nQueue::fake([\nExampleJob::class,\n]);\n// queue a job\nExampleJob::dispatch();\n// assert that a job was pushed...\nQueue::assertPushed(ExampleJob::class);\n// assert that a job was pushed a given number of times...\nQueue::assertPushed(ExampleJob::class, 1);\n// assert that a job was pushed with a given payload...\nQueue::assertPushed(ExampleJob::class, function ($job) {\nreturn $job-&gt;example == 'example';\n});\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#queue-assertnotpushed","title":"Queue:: assertNotPushed","text":"<pre><code>&lt;?php\n/** @test */\npublic function queue_assert_not_pushed(): void\n{\nQueue::fake();\n// or\nQueue::fake([\nExampleJob::class,\n]);\n// queue a job\nExampleJob::dispatch();\n// assert that a job was not pushed\nQueue::assertNotPushed(ExampleJob::class);\n// asser that a job was not pushed with a given payload...\nQueue::assertNotPushed(ExampleJob::class, function (ExampleJob $job) {\nreturn $job-&gt;exampleProperty === 'exampleValue';\n});\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#queue-assertnothingpushed","title":"Queue:: assertNothingPushed","text":"<pre><code>&lt;?php\n/** @test */\npublic function queue_assert_nothing_pushed(): void\n{\nQueue::fake();\n// or\nQueue::fake([\nExampleJob::class,\n]);\n// queue a job\nExampleJob::dispatch();\n// assert that no jobs were pushed...\nQueue::assertNothingPushed();\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#queue-assertpushedon","title":"Queue:: assertPushedOn","text":"<pre><code>&lt;?php\n/** @test */\npublic function queue_assert_pushed_on(): void\n{\nQueue::fake();\n// or\nQueue::fake([\nExampleJob::class,\n]);\n// queue a job\nExampleJob::dispatch();\n// assert that a job was pushed on a given queue...\nQueue::assertPushedOn('queue-name', ExampleJob::class);\n// assert that a job was pushed a given number of times on a given queue...\nQueue::assertPushedOn('queue-name', ExampleJob::class, 1);\n// assert that a job was pushed with a given payload on a given queue...\nQueue::assertPushedOn('queue-name', ExampleJob::class, function ($job) {\nreturn $job-&gt;example == 'example';\n});\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#queue-assertpushedwithchain","title":"Queue:: assertPushedWithChain","text":"<pre><code>&lt;?php\n/** @test */\npublic function queue_assert_pushed_with_chain(): void\n{\nQueue::fake();\n// or\nQueue::fake([\nExampleJob::class,\n]);\n// queue a job\nExampleJob::dispatch();\n// assert that a job was pushed with a given chain...\nQueue::assertPushedWithChain(ExampleJob::class, [\nnew AnotherJob,\nnew YetAnotherJob,\n]);\n// assert that a job was pushed with a given chain...\nQueue::assertPushedWithChain(ExampleJob::class, [\nnew AnotherJob,\nnew YetAnotherJob,\n], function ($job) {\nreturn $job-&gt;user-&gt;id === 1;\n});\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/tests/#queue-assertpushedwithoutchain","title":"Queue:: assertPushedWithoutChain","text":"<pre><code>&lt;?php\n/** @test */\npublic function queue_assert_pushed_without_chain(): void\n{\nQueue::fake();\n// or\nQueue::fake([\nExampleJob::class,\n]);\n// queue a job\nExampleJob::dispatch();\n// assert that a job was pushed without a given chain...\nQueue::assertPushedWithoutChain(ExampleJob::class);\n// assert that a job was pushed without a given chain and with a given payload...\nQueue::assertPushedWithoutChain(ExampleJob::class, function ($job) {\nreturn $job-&gt;exampleProperty === 'exampleValue';\n});\n}\n</code></pre>","tags":["laravel","tests","exception","event","mock","spy","expectException","expectExceptionMessage","assertDispatched","assertNotDispatched","assertDispatchedTimes","assertNotDispatchedTimes","once()"]},{"location":"laravel/valet/","title":"Valet","text":"","tags":["valet","commandos"]},{"location":"laravel/valet/#kommandos","title":"Kommandos","text":"","tags":["valet","commandos"]},{"location":"laravel/valet/#erstellt-v-hosts-links","title":"Erstellt V-Hosts Links","text":"<pre><code>valet link --secure meine-lokale-webseite\n</code></pre> <p>Info</p> <p>htttp://www.meine-lokale-webseite.test  htttps://www.meine-lokale-webseite.test</p>","tags":["valet","commandos"]},{"location":"laravel/valet/#loscht-die-v-hosts-links","title":"L\u00f6scht die V-Hosts Links","text":"<pre><code>valet unlink --secure meine-lokale-webseite\n</code></pre> <p>Info</p> <p>htttp://www.meine-lokale-webseite.test  htttps://www.meine-lokale-webseite.test</p>","tags":["valet","commandos"]},{"location":"laravel/valet/#alle-registrierten-valet-links-anzeigen","title":"Alle registrierten Valet-Links anzeigen","text":"<pre><code>valet links\n</code></pre>","tags":["valet","commandos"]},{"location":"laravel/valet/#listet-alle-verfugbaren-valet-kommandos-auf","title":"Listet alle verf\u00fcgbaren Valet Kommandos auf","text":"<pre><code>valet -h\nvalet --help\n</code></pre>","tags":["valet","commandos"]},{"location":"laravel/validation/","title":"Validation","text":"","tags":["laravel","validation","request","passed","passedValidation","prepareForValidation","unique","rule"]},{"location":"laravel/validation/#prepareforvalidation","title":"prepareForValidation","text":"<pre><code>&lt;?php\nuse Illuminate\\Validation\\Rule;\nuse Smake\\Common\\Http\\Requests\\Request;\nclass EditUserRequest extends Request\n{\nprotected function prepareForValidation()\n{\nparent::prepareForValidation();\n$this-&gt;merge([\n'nickname' =&gt; $this-&gt;input('nickname', '') . ' with Love',\n]);\n}\n}\n</code></pre>","tags":["laravel","validation","request","passed","passedValidation","prepareForValidation","unique","rule"]},{"location":"laravel/validation/#ruleunique-with-ignore-method-on-update","title":"Rule::unique with ignore method on update","text":"<p>Adding a record:</p> <pre><code>&lt;?php\nuse Illuminate\\Validation\\Rule;\nuse Smake\\Common\\Http\\Requests\\Request;\nclass AddUserRequest extends Request\n{\npublic function rules()\n{\nreturn [\n'email' =&gt; [\n'required',\n'email:strict',\n'max:255',\nRule::unique('users', 'email'),\n],\n];\n}\n}\n</code></pre> <p>Update an existing record:</p> <pre><code>&lt;?php\nuse Illuminate\\Validation\\Rule;\nuse Smake\\Common\\Http\\Requests\\Request;\nclass EditUserRequest extends Request\n{\npublic function rules()\n{\nreturn [\n'email' =&gt; [\n'required',\n'email:strict',\n'max:255',\nRule::unique('users', 'email')-&gt;ignore($this-&gt;route('userId')),\n],\n];\n}\n}\n</code></pre>","tags":["laravel","validation","request","passed","passedValidation","prepareForValidation","unique","rule"]},{"location":"laravel/validation/#passedvalidation","title":"passedValidation","text":"<pre><code>&lt;?php\nuse Illuminate\\Validation\\Rule;\nuse Smake\\Common\\Http\\Requests\\Request;\nclass EditUserRequest extends Request\n{\nprotected function passedValidation()\n{\n$this-&gt;merge([\n'nickname' =&gt; $this-&gt;input('nickname', '') . '\u2764\ufe0f',\n]);\n$this-&gt;getValidatorInstance()-&gt;setData(\ncollect($this-&gt;input())\n-&gt;only(collect($this-&gt;rules()]-&gt;keys())\n-&gt;all()\n);\n}\n}\n</code></pre>","tags":["laravel","validation","request","passed","passedValidation","prepareForValidation","unique","rule"]},{"location":"laravel/composer/commands/","title":"Composer","text":"","tags":["composer","kommandos"]},{"location":"laravel/composer/commands/#package-installieren","title":"package installieren","text":"<pre><code>composer require package/your-package-name\n</code></pre>","tags":["composer","kommandos"]},{"location":"laravel/composer/commands/#package-deinstallieren","title":"package deinstallieren","text":"<pre><code>composer remove package/your-package-name\n</code></pre>","tags":["composer","kommandos"]},{"location":"laravel/composer/commands/#package-updaten","title":"package updaten","text":"<pre><code>composer update package/your-package-name\n</code></pre>","tags":["composer","kommandos"]},{"location":"laravel/composer/commands/#package-updaten-alle","title":"package updaten (alle)","text":"<pre><code>composer update\n</code></pre>","tags":["composer","kommandos"]},{"location":"laravel/composer/commands/#package-updaten-alle-mit-neuer-version","title":"package updaten (alle) mit neuer Version","text":"<pre><code>composer update --with-dependencies\n</code></pre>","tags":["composer","kommandos"]},{"location":"laravel/composer/commands/#package-updaten-alle-mit-neuer-version-und-sicherheitsupdates","title":"package updaten (alle) mit neuer Version und Sicherheitsupdates","text":"<pre><code>composer update --with-all-dependencies\n</code></pre>","tags":["composer","kommandos"]},{"location":"laravel/composer/pest/","title":"Pest","text":"","tags":["composer","pest"]},{"location":"laravel/composer/pest/#composerjson","title":"composer.json","text":"<pre><code>{\n\"require-dev\": {\n\"pestphp/pest\": \"^1.22\",\n\"pestphp/pest-plugin-laravel\": \"^1.3\",\n\"pestphp/pest-plugin-livewire\": \"^1.0\",\n\"phpstan/extension-installer\": \"^1.1\",\n\"phpstan/phpstan-deprecation-rules\": \"^1.0\",\n\"phpstan/phpstan-phpunit\": \"^1.0\",\n\"phpunit/php-code-coverage\": \"^9.2\",\n\"phpunit/phpunit\": \"^9.5\"\n},\n\"scripts\": {\n\"test:pest\": \"vendor/bin/pest --order-by default -d memory_limit=6144M\",\n\"test:pest-coverage\": \"php -dpcov.enabled=1 -dpcov.directory=. -dpcov.exclude='~vendor~' vendor/bin/pest -d memory_limit=6144M --testdox --verbose --coverage --min=85\",\n\"test:unit\": \"vendor/bin/testbench package:test --no-coverage\",\n\"test:types\": \"vendor/bin/phpstan analyse\",\n\"test\": [\n\"@lint:fix\",\n\"@test:types\",\n\"@test:unit\"\n]\n}\n</code></pre>","tags":["composer","pest"]},{"location":"laravel/forge/envoyer-and-forge/","title":"Envoyer and forge","text":"","tags":["laravel","forge","queue","worker"]},{"location":"laravel/forge/envoyer-and-forge/#envoyer","title":"Envoyer","text":"<p>Envoyer ist ein Deployment-Tool, das speziell f\u00fcr die Bereitstellung von Anwendungen auf Servern entwickelt wurde. Es kann eine nahtlose Integration mit Forge bieten, einem verwalteten Server-Hosting-Service, der es Benutzern erm\u00f6glicht, Server-Instanzen zu erstellen und zu konfigurieren und dann ihre Anwendungen auf diesen Servern zu hosten. Envoyer bietet eine Benutzeroberfl\u00e4che, die es Benutzern erm\u00f6glicht, ihre Anwendungen auf ihren Servern zu deployen und zu verwalten.</p>","tags":["laravel","forge","queue","worker"]},{"location":"laravel/forge/envoyer-and-forge/#forge","title":"Forge","text":"<p>Forge stellt wiederum die notwendigen Ressourcen bereit, um die Server-Instanzen zu hosten und zu konfigurieren, auf denen die Anwendung l\u00e4uft. Forge verwendet auch Rezepte (Provisioning Scripts), um die Server zu konfigurieren, bevor die Anwendung bereitgestellt wird. Diese Rezepte k\u00f6nnen z.B. dazu verwendet werden, PHP-Versionen, Datenbankkonfigurationen, Webserver-Konfigurationen und mehr zu definieren. Envoyer nutzt diese Rezepte, um sicherzustellen, dass die Serverinstanzen, auf denen die Anwendung bereitgestellt wird, richtig konfiguriert sind.</p>","tags":["laravel","forge","queue","worker"]},{"location":"laravel/forge/envoyer-and-forge/#envoyer-und-forge","title":"Envoyer und Forge","text":"<p>Zusammengefasst spielt Envoyer eine wichtige Rolle bei der Bereitstellung und Verwaltung von Anwendungen auf den Servern, die von Forge bereitgestellt werden. Es nutzt die Konfigurationen und Rezepte von Forge, um sicherzustellen, dass die Serverinstanzen korrekt konfiguriert sind und die Anwendungen reibungslos auf diesen Instanzen laufen.</p>","tags":["laravel","forge","queue","worker"]},{"location":"laravel/forge/queue-worker/","title":"Laravel Forge queue worker","text":"<p>Hier ein paar Tipps und Tricks zum Laravel Forge queue worker.</p>","tags":["laravel","forge","queue","worker"]},{"location":"laravel/forge/queue-worker/#maximum-seconds-per-job","title":"Maximum Seconds Per Job","text":"<p>Die Option \"Maximum Seconds Per Job\" ist eine Einstellung, die bei der Konfiguration eines Workers in Forge verf\u00fcgbar ist. Sie gibt an, wie viel Zeit ein Worker maximal f\u00fcr die Ausf\u00fchrung einer einzelnen Aufgabe (Job) aufwenden darf.</p> <p>In vielen F\u00e4llen ist es wichtig, dass Aufgaben schnell und zuverl\u00e4ssig ausgef\u00fchrt werden, um die Leistung der Anwendung zu maximieren und sicherzustellen, dass Benutzer eine gute Erfahrung machen. Gleichzeitig k\u00f6nnen einige Aufgaben jedoch sehr zeitaufw\u00e4ndig sein und den Worker blockieren, was dazu f\u00fchrt, dass andere Aufgaben nicht ausgef\u00fchrt werden k\u00f6nnen. Die Option \"Maximum Seconds Per Job\" hilft, dieses Problem zu l\u00f6sen, indem sie sicherstellt, dass eine einzelne Aufgabe nicht zu lange dauert.</p> <p>Die \"Maximum Seconds Per Job\"-Einstellung gibt an, wie lange der Worker maximal f\u00fcr die Ausf\u00fchrung einer einzelnen Aufgabe aufwenden darf. Wenn die Aufgabe innerhalb dieser Zeit abgeschlossen wird, wird der Worker die Ergebnisse zur\u00fcckgeben und auf die n\u00e4chste Aufgabe warten. Wenn die Aufgabe jedoch l\u00e4nger als die angegebene Zeit dauert, wird der Worker die Aufgabe abbrechen und auf die n\u00e4chste Aufgabe warten.</p> <p>Diese Einstellung ist n\u00fctzlich, um sicherzustellen, dass der Worker effizient arbeitet und nicht blockiert wird. Wenn Aufgaben sehr unterschiedlich in ihrer Dauer sind, kann es jedoch schwierig sein, eine geeignete \"Maximum Seconds Per Job\"-Einstellung zu w\u00e4hlen. In diesem Fall kann es erforderlich sein, die Einstellung anzupassen oder mehrere Worker zu verwenden, um sicherzustellen, dass alle Aufgaben schnell und zuverl\u00e4ssig ausgef\u00fchrt werden.</p>","tags":["laravel","forge","queue","worker"]},{"location":"laravel/forge/queue-worker/#rest-seconds-when-empty","title":"Rest Seconds When Empty","text":"<p>Die Option \"Rest Seconds When Empty\" bezieht sich auf eine Einstellung, die bei der Konfiguration eines Workers in Forge verf\u00fcgbar ist. Diese Einstellung gibt an, wie lange ein Worker pausieren soll, wenn er keine Aufgaben auszuf\u00fchren hat.</p> <p>Wenn ein Worker keine Aufgaben hat, kann er unn\u00f6tigerweise Ressourcen verbrauchen, indem er CPU-Zyklen und Arbeitsspeicher verwendet, um nach neuen Aufgaben zu suchen. Um dies zu vermeiden, kann der \"Rest Seconds When Empty\" -Parameter verwendet werden, um den Worker anzuweisen, f\u00fcr eine bestimmte Zeit zu pausieren, bevor er erneut nach neuen Aufgaben sucht.</p> <p>Die \"Rest Seconds When Empty\"-Einstellung wird normalerweise in Sekunden angegeben und kann je nach Anwendungsfall angepasst werden. Wenn zum Beispiel der Worker Aufgaben hat, die sehr h\u00e4ufig eintreffen, k\u00f6nnte es sinnvoll sein, eine relativ kurze Ruhezeit einzustellen, um sicherzustellen, dass der Worker schnell auf neue Aufgaben reagieren kann. Andererseits, wenn der Worker nur gelegentlich Aufgaben erh\u00e4lt, k\u00f6nnte es sinnvoll sein, eine l\u00e4ngere Ruhezeit einzustellen, um Ressourcen zu sparen und die Kosten zu reduzieren.</p>","tags":["laravel","forge","queue","worker"]},{"location":"laravel/forge/queue-worker/#graceful-shutdown-seconds","title":"Graceful Shutdown Seconds","text":"<p>Die Option \"Graceful Shutdown Seconds\" ist eine Einstellung, die bei der Konfiguration eines Workers in Forge verf\u00fcgbar ist. Sie gibt an, wie viel Zeit dem Worker zur Verf\u00fcgung steht, um laufende Aufgaben abzuschlie\u00dfen, bevor er heruntergefahren wird.</p> <p>In einigen F\u00e4llen kann es notwendig sein, einen Worker herunterzufahren, beispielsweise wenn eine neue Version der Anwendung bereitgestellt wird oder wenn der Worker nicht mehr ben\u00f6tigt wird. Wenn der Worker jedoch w\u00e4hrend der Ausf\u00fchrung einer Aufgabe heruntergefahren wird, kann dies zu unerwarteten Fehlern oder Datenverlust f\u00fchren. Um dies zu vermeiden, gibt es die Option \"Graceful Shutdown Seconds\".</p> <p>Diese Einstellung gibt an, wie viel Zeit der Worker haben soll, um laufende Aufgaben abzuschlie\u00dfen, bevor er heruntergefahren wird. Der Worker setzt den \"Shutdown\"-Prozess in Gang, indem er neue Aufgaben ablehnt und dann auf das Ende der laufenden Aufgaben wartet. Wenn die Zeit, die in der \"Graceful Shutdown Seconds\"-Einstellung angegeben ist, abgelaufen ist, beendet der Worker alle noch laufenden Aufgaben und wird anschlie\u00dfend heruntergefahren.</p> <p>Die \"Graceful Shutdown Seconds\"-Einstellung ist optional, da es in einigen F\u00e4llen nicht erforderlich sein kann, dass der Worker Aufgaben vor dem Herunterfahren abarbeitet. Wenn jedoch eine solche Einstellung erforderlich ist, kann dies dazu beitragen, dass der Worker heruntergefahren wird, ohne dass es zu Fehlern oder Datenverlust kommt.</p>","tags":["laravel","forge","queue","worker"]},{"location":"laravel/forge/queue-worker/#das-zusammenspiel-zwischen-graceful-shutdown-seconds-und-maximum-seconds-per-job","title":"Das Zusammenspiel zwischen \"Graceful Shutdown Seconds\" und \"Maximum Seconds Per Job\"","text":"<p>Das Zusammenspiel zwischen \"Graceful Shutdown Seconds\" und \"Maximum Seconds Per Job\" kann wichtig sein, da sie beide dazu beitragen k\u00f6nnen, sicherzustellen, dass ein Worker zuverl\u00e4ssig arbeitet und Aufgaben schnell und effizient ausf\u00fchrt.</p> <p>Wenn der \"Graceful Shutdown Seconds\" Wert zu niedrig ist, besteht das Risiko, dass der Worker nicht gen\u00fcgend Zeit hat, um laufende Aufgaben ordnungsgem\u00e4\u00df abzuschlie\u00dfen, bevor er heruntergefahren wird. Wenn andererseits der \"Maximum Seconds Per Job\" Wert zu hoch ist, besteht das Risiko, dass der Worker f\u00fcr zu lange Zeit an einer einzelnen Aufgabe arbeitet und dadurch andere Aufgaben blockiert und der Durchsatz sinkt.</p> <p>Eine gute Praxis ist es, die \"Maximum Seconds Per Job\" Einstellung so zu w\u00e4hlen, dass die meisten Aufgaben in der Regel innerhalb dieser Zeit abgeschlossen werden k\u00f6nnen. Wenn jedoch eine Aufgabe l\u00e4nger als diese Zeit dauert, sollte der \"Graceful Shutdown Seconds\" Wert so gesetzt sein, dass der Worker gen\u00fcgend Zeit hat, um die laufende Aufgabe abzuschlie\u00dfen, bevor er heruntergefahren wird.</p> <p>Es ist jedoch auch wichtig zu beachten, dass es in einigen F\u00e4llen sinnvoll sein kann, eine h\u00f6here \"Maximum Seconds Per Job\"-Einstellung zu w\u00e4hlen, wenn es sich um komplexe oder ressourcenintensive Aufgaben handelt. In diesem Fall sollte der \"Graceful Shutdown Seconds\" Wert entsprechend angepasst werden, um sicherzustellen, dass der Worker gen\u00fcgend Zeit hat, um diese Aufgaben zu beenden.</p> <p>Offizielle Dokumentation von Forge:</p> <ul> <li>Creating A Queue Worker: Forge - creating-a-queue-worker</li> <li>Forge ddocumentation: Forge introduction</li> </ul>","tags":["laravel","forge","queue","worker"]},{"location":"laravel/packages/own-packages/","title":"Own packages","text":"","tags":["laravel","package","package-entwicklung"]},{"location":"laravel/packages/own-packages/#beispiel-anhand-maggomannfilament-model-translator","title":"Beispiel anhand maggomann/filament-model-translator","text":"<p>composer,json-File:</p> <pre><code>\"require\": {\n\"maggomann/filament-model-translator\": \"dev-master\",\n</code></pre> <p>Im CLI folgenden Befehl ausf\u00fchren:</p> <pre><code>composer config repositories.maggomann/filament-model-translator '{\"type\": \"path\", \"url\": \"../../LaravelPackages/filament-model-translator\"}' --file composer.json\ncomposer update\n</code></pre> <p>Dies sollte folgende Ausgabe wiedergeben:</p> <pre><code>Lock file operations: 1 install, 0 updates, 0 removals\n  - Locking maggomann/filament-model-translator (dev-master)\nWriting lock file\nInstalling dependencies from lock file (including require-dev)\nPackage operations: 1 install, 0 updates, 0 removals\n  - Installing maggomann/filament-model-translator (dev-master): Symlinking from ../../LaravelPackages/filament-model-translator\n</code></pre>","tags":["laravel","package","package-entwicklung"]},{"location":"laravel/packages/own-packages/#webseiten-verlinkungen","title":"Webseiten-Verlinkungen","text":"<p>Paket lokal testen</p> <p>Paket-Dokumentation</p>","tags":["laravel","package","package-entwicklung"]},{"location":"laravel/packages/satis/","title":"Satis","text":"<p>\"Satis\" ist eine Open-Source-Software f\u00fcr PHP-Entwickler, die f\u00fcr das Verwalten von Abh\u00e4ngigkeiten und das Erstellen von Paketen verwendet wird. Mit Satis k\u00f6nnen Entwickler ein privates Repository f\u00fcr ihre PHP-Pakete erstellen und verwalten, anstatt sie auf \u00f6ffentlichen Repositories wie Packagist zu ver\u00f6ffentlichen.</p> <p>Satis erm\u00f6glicht es Entwicklern, ihre Abh\u00e4ngigkeiten in einem einzigen Repository zu verwalten und dieses Repository f\u00fcr interne Zwecke zu nutzen. Dies ist besonders n\u00fctzlich f\u00fcr Unternehmen oder Organisationen, die ihre eigenen PHP-Pakete haben und sie intern verwalten m\u00f6chten.</p> <p>Satis verwendet die Composer-Technologie, um Pakete zu erstellen und Abh\u00e4ngigkeiten zu verwalten. Es erm\u00f6glicht Entwicklern auch, benutzerdefinierte Repositories hinzuzuf\u00fcgen und ihre Pakete auf anderen Repositories zu ver\u00f6ffentlichen, falls gew\u00fcnscht.</p> <p>https://github.com/composer/satis</p> <p>Auf dieser Seite findest du die Dokumentation sowie den Quellcode und weitere Informationen zu Satis.</p> <p>https://alexvanderbist.com/2021/setting-up-and-securing-a-private-composer-repository/</p>","tags":["Open-Source-Software","Infrastruktur"]},{"location":"laravel/tipps/calculation/","title":"Calculation","text":"<p>BCMath: https://www.php.net/manual/de/book.bc.php github moneyphp/money: https://github.com/moneyphp/money web2.0rechner: https://web2.0rechner.de/</p> <p>Der BcMathCalculator berechnet die Nachkommastellen genau, wenn man mit String-Werten rechnet. Werden die Werte aber in einen Float gecastet, rundet float gem\u00e4\u00df der Rundungsregel bis zur 12. Nachkommastelle und f\u00fcllt dann jede weitere Nachkommastelle mit der Zahl 0 auf.</p> <pre><code>&lt;?php\nuse Money\\Calculator\\BcMathCalculator;\n$result = (new BcMathCalculator())-&gt;divide('15.000000000000000', '1.19');\n// $result =&gt; 12.60504201680672\n$result = (float) (new BcMathCalculator())-&gt;divide('15.000000000000000', '1.19');\n// $result =&gt; 12.605042016807\n// Float rounds up to the 12th decimal place and fills all further decimal places with a 0.\n</code></pre> <p>Hier ein Beispiel der genaueren Rechnung: ![[web2orechner_rundung.png]]</p>","tags":["laravel","best-practice","calculation"]},{"location":"laravel/tipps/migrations-unique/","title":"Migrations","text":"","tags":["laravel","databse","DB","unique","migration"]},{"location":"laravel/tipps/migrations-unique/#unique-columns","title":"Unique columns","text":"<p>Laravel Example 1:</p> <pre><code>&lt;?php\nDB::update(\"\n    ALTER TABLE tournament_league_game_days\n    ADD COLUMN game_schedule_day_unique varchar (512)\n    GENERATED ALWAYS AS\n    (\n        CONCAT(\n            CONCAT(day, '#', game_schedule_id),\n            '#',\n            IF(deleted_at IS NULL, '-',  deleted_at)\n        )\n    ) VIRTUAL;\n\");\nDB::update(\"\n    CREATE UNIQUE INDEX game_schedule_day_unique ON tournament_league_game_days (game_schedule_day_unique);\n\");\n</code></pre> <p>Laravel Example 2:</p> <pre><code>&lt;?php\nSchema::table('tournament_league_game_days', function (Blueprint $table) {\n$table-&gt;string('game_schedule_day_unique')\n-&gt;virtualAs(\nDB::raw(\n\"CONCAT(\n                    CONCAT(day, '#', game_schedule_id),\n                    '#',\n                    IF(deleted_at IS NULL, '-',  deleted_at)\n                )\"\n)\n);\n});\nSchema::table('tournament_league_game_days', function (Blueprint $table) {\n$table-&gt;unique(['game_schedule_day_unique'], 'game_schedule_day_unique_index');\n});\n</code></pre> <ul> <li>Original tweet by Tobias_Petry.sql</li> </ul>","tags":["laravel","databse","DB","unique","migration"]},{"location":"laravel/tipps/override-of-artisan-commands/","title":"\u00dcberschreibung von Artisanbefehlen","text":"<p>In Laravel k\u00f6nnen Standard Artisan-Befehle wie \"migrate\" \u00fcberschrieben werden, indem ein neuer Befehl definiert wird, der den urspr\u00fcnglichen Befehl ersetzt. Dies kann in der \"app/Console/Kernel.php\" Datei durchgef\u00fchrt werden.</p> <p>Zun\u00e4chst m\u00fcssen Sie einen neuen Befehl erstellen. Verwenden Sie dazu den folgenden Befehl in der Befehlszeile:</p> <pre><code>php artisan make:command CustomMigrate\n</code></pre> <p>Dies erstellt eine neue Datei namens \"CustomMigrate.php\" im Verzeichnis \"app/Console/Commands\". \u00d6ffnen Sie diese Datei und suchen Sie nach der \"handle\" Methode.</p> <p>In dieser Methode k\u00f6nnen Sie Ihre eigene Logik hinzuf\u00fcgen, um zu bestimmen, ob der Migrationsbefehl ausgef\u00fchrt werden soll oder nicht. Wenn der Befehl nicht ausgef\u00fchrt werden soll, k\u00f6nnen Sie eine Fehlermeldung ausgeben. Ansonsten k\u00f6nnen Sie den urspr\u00fcnglichen Migrationsbefehl aufrufen, indem Sie \"parent::handle($input, $output);\" verwenden.</p> <p>Hier ist ein Beispiel, das die Logik implementiert, die Sie erw\u00e4hnt haben:</p> <pre><code>&lt;?php\nnamespace App\\Console\\Commands;\nuse Illuminate\\Console\\Command;\nclass CustomMigrate extends Command\n{\nprotected $signature = 'migrate';\nprotected $description = 'Custom migrate command that outputs an error message on \"local\" environment';\npublic function handle()\n{\nif (app()-&gt;environment('local')) {\n$this-&gt;error('Migrate command cannot be run on local systems');\nexit;\n}\nparent::handle();\n}\n}\n</code></pre> <p>In diesem Beispiel wird der Migrationsbefehl nur ausgef\u00fchrt, wenn die Anwendung nicht im Localenmodus l\u00e4uft. Wenn die Anwendung im Produktionsmodus l\u00e4uft, wird eine Fehlermeldung ausgegeben.</p> <p>Um den neuen Befehl zu registrieren, \u00f6ffnen Sie die \"app/Console/Kernel.php\" Datei und f\u00fcgen Sie den folgenden Code hinzu:</p> <pre><code>&lt;?php\nprotected $commands = [\n\\App\\Console\\Commands\\CustomMigrate::class,\n];\n</code></pre> <p>Dies registriert den neuen Befehl im Laravel-Kernel, so dass er \u00fcber die Befehlszeile ausgef\u00fchrt werden kann, indem einfach \"php artisan migrate\" eingegeben wird.</p> <p>Warning</p> <p>Stellen Sie sicher, dass Sie die Bedingungen f\u00fcr die Ausf\u00fchrung des Befehls sorgf\u00e4ltig pr\u00fcfen, um unbeabsichtigte oder unerw\u00fcnschte Ergebnisse zu vermeiden.</p>","tags":["laravel","best-practice","artisan","commands"]},{"location":"laravel/tipps/service-container-and-ioc/","title":"Service Container und IoC-Container","text":"","tags":["laravel","best-practice","tipps","ioc","service-container"]},{"location":"laravel/tipps/service-container-and-ioc/#was-ist-ein-service-container","title":"Was ist ein Service Container?","text":"<pre><code>&lt;?php\n// good\napp(MyAction::class-&gt;execute($myModel);\n// bad\n(new MyAction())-&gt;execute($myModel);\n</code></pre> <p>Der Service Container ist ein leistungsf\u00e4higes Tool, mit dem Sie Ihre Abh\u00e4ngigkeiten zwischen Ihren Klassen definieren und organisieren k\u00f6nnen. Durch die Verwendung des Service Containers k\u00f6nnen Sie Ihre Abh\u00e4ngigkeiten zentral verwalten und vermeiden, dass Sie harte Abh\u00e4ngigkeiten in Ihren Klassen haben. Sie k\u00f6nnen auch leicht Mock-Objekte f\u00fcr Tests erstellen, indem Sie Abh\u00e4ngigkeiten durch Testdoubles ersetzen.</p> <p>Das Konzept des Service Containers wird h\u00e4ufig in Laravel-Anwendungen verwendet, um Klasseninstanzen zu erstellen und zu verwalten. Anstatt Klassen manuell zu instanziieren, k\u00f6nnen Sie eine Klasse als \"Service\" im Container registrieren und dann auf diese Klasse durch den Container zugreifen.</p> <p>Wenn Sie <code>new MyAction()</code> verwenden, instanziieren Sie die Klasse manuell. Dies kann problematisch sein, wenn die Klasse selbst Abh\u00e4ngigkeiten hat, die ebenfalls manuell instanziiert werden m\u00fcssen. Wenn Sie stattdessen die Klasse im Service Container registrieren und den Container verwenden, um auf die Klasse zuzugreifen, kann der Container die Abh\u00e4ngigkeiten f\u00fcr Sie automatisch aufl\u00f6sen.</p> <p>Der folgende Code zeigt, wie Sie eine Klasse im Service Container registrieren und dann auf diese Klasse zugreifen k\u00f6nnen:</p> <pre><code>&lt;?php\n// Registrieren Sie die Klasse im Container\napp()-&gt;bind(MyAction::class);\n// Zugriff auf die Klasse durch den Container\napp()-&gt;make(MyAction::class)-&gt;execute($myModel);\n// or\napp(MyAction::class)-&gt;execute($myModel);\n</code></pre> <p>Indem Sie den Service Container verwenden, k\u00f6nnen Sie die Abh\u00e4ngigkeiten Ihrer Klassen zentral verwalten und die Code-Wartbarkeit verbessern.</p>","tags":["laravel","best-practice","tipps","ioc","service-container"]},{"location":"laravel/tipps/service-container-and-ioc/#vorteile-der-verwendung-des-service-containers","title":"Vorteile der Verwendung des Service Containers","text":"<p>Einer der Vorteile der Verwendung des Service Containers ist, dass Sie Ihre Abh\u00e4ngigkeiten zentral verwalten und austauschen k\u00f6nnen. Wenn Sie eine Klasse manuell instanziieren, k\u00f6nnen Sie diese Klasse nur schwer austauschen, wenn Sie sie in Ihren Tests durch eine Mock-Klasse ersetzen m\u00f6chten.</p> <p>Wenn Sie jedoch eine Klasse im Service Container registrieren und den Container verwenden, um auf diese Klasse zuzugreifen, k\u00f6nnen Sie die registrierte Klasse durch eine andere Klasse ersetzen, die die gleiche Schnittstelle implementiert. Dies ist insbesondere n\u00fctzlich, wenn Sie Tests durchf\u00fchren m\u00f6chten, bei denen Sie bestimmte Funktionen einer Klasse isoliert testen m\u00f6chten, ohne von anderen Klassen abh\u00e4ngig zu sein.</p> <p>Ein weiterer Vorteil ist, dass die Verwendung des Service Containers den Code lesbarer macht, da es einfacher ist, die Abh\u00e4ngigkeiten von Klassen zu sehen, wenn sie im Container registriert sind. Dar\u00fcber hinaus kann der Service Container dazu beitragen, den Code modularer zu gestalten, da er es einfacher macht, Ihre Anwendung in kleinere, wiederverwendbare Komponenten zu unterteilen.</p> <p>Insgesamt bietet die Verwendung des Service Containers viele Vorteile f\u00fcr die Entwicklung von Laravel-Anwendungen, einschlie\u00dflich der zentralen Verwaltung von Abh\u00e4ngigkeiten, der Verbesserung der Testbarkeit und der Lesbarkeit des Codes.</p>","tags":["laravel","best-practice","tipps","ioc","service-container"]},{"location":"laravel/tipps/service-container-and-ioc/#was-ist-der-unterschied-zwischen-dem-service-container-und-dem-ioc-container","title":"Was ist der Unterschied zwischen dem Service Container und dem IoC-Container?","text":"<p>Der Service Container in Laravel ist eine Implementierung des Inversion of Control (IoC) Containers. Die Idee hinter dem IoC-Container ist es, die Kontrolle \u00fcber die Erstellung und Verwaltung von Objekten von der Anwendungsklasse selbst an eine externe Komponente, den IoC-Container, zu delegieren.</p> <p>Der IoC-Container ist ein Design-Pattern, das eng mit dem Dependency Injection (DI) Design-Pattern verbunden ist. Beide Muster haben das Ziel, die Abh\u00e4ngigkeiten von Klassen zu zentralisieren und die Erstellung von Objekten und die Verwaltung von Abh\u00e4ngigkeiten zu vereinfachen.</p> <p>In Laravel ist der Service Container der prim\u00e4re Mechanismus zur Verwaltung von Abh\u00e4ngigkeiten. Er erlaubt es, Klassen im Container zu registrieren und die Instanziierung und Verwaltung von Objekten automatisch zu handhaben. Der Service Container bietet auch Unterst\u00fctzung f\u00fcr Dependency Injection, da Abh\u00e4ngigkeiten automatisch aufgel\u00f6st werden k\u00f6nnen, wenn eine Klasse instanziiert wird.</p> <p>Insgesamt sind der Service Container und der IoC-Container eng miteinander verbunden und werden oft synonym verwendet. Beide sind wichtige Konzepte in der objektorientierten Programmierung und sind unverzichtbar f\u00fcr die Erstellung skalierbarer und wartbarer Anwendungen.</p>","tags":["laravel","best-practice","tipps","ioc","service-container"]},{"location":"mkdocs/commands/","title":"Kommandos","text":"","tags":["mkdocs","commands"]},{"location":"mkdocs/commands/#mkdocs-help","title":"mkdocs help","text":"<pre><code>mkdocs --help\n</code></pre>","tags":["mkdocs","commands"]},{"location":"mkdocs/commands/#mkdocs-new","title":"mkdocs new","text":"<pre><code>mkdocs new\n</code></pre>","tags":["mkdocs","commands"]},{"location":"mkdocs/commands/#mkdocs-build","title":"mkdocs build","text":"<pre><code>mkdocs build\n</code></pre>","tags":["mkdocs","commands"]},{"location":"mkdocs/commands/#mkdocs-serve","title":"mkdocs serve","text":"<pre><code>mkdocs serve\n</code></pre>","tags":["mkdocs","commands"]},{"location":"mkdocs/commands/#mkdocs-serve-livereload","title":"mkdocs serve --livereload","text":"<pre><code>mkdocs serve --livereload\n</code></pre>","tags":["mkdocs","commands"]},{"location":"mkdocs/install/","title":"Install python3","text":"<p>Weitere Information siehe python3.de</p>","tags":["mkdocs","installation"]},{"location":"mkdocs/install/#install-mkdocs","title":"Install mkdocs","text":"<pre><code>pip3 install mkdocs\n</code></pre>","tags":["mkdocs","installation"]},{"location":"mkdocs/pip/","title":"Pip3 Kommandos","text":"","tags":["mkdocs","pip3","konsolenkommandos"]},{"location":"mkdocs/pip/#pip3-version-anzeigen","title":"pip3 Version anzeigen","text":"<pre><code>pip3 --version\n</code></pre>","tags":["mkdocs","pip3","konsolenkommandos"]},{"location":"mkdocs/pip/#alle-installierten-pakete-auflisten","title":"Alle installierten Pakete auflisten","text":"<pre><code>pip3 list\n</code></pre>","tags":["mkdocs","pip3","konsolenkommandos"]},{"location":"mkdocs/pip/#pip3-aktualisieren","title":"pip3 aktualisieren","text":"<pre><code>pip3 install --upgrade pip\n</code></pre>","tags":["mkdocs","pip3","konsolenkommandos"]},{"location":"mkdocs/pip/#alle-installierten-pakete-aktualisieren","title":"Alle installierten Pakete aktualisieren","text":"<pre><code>pip3 freeze --local | grep -v '^\\-e' | cut -d = -f 1  | xargs -n1 pip3 install -U\n</code></pre>","tags":["mkdocs","pip3","konsolenkommandos"]},{"location":"mkdocs/pip/#mkdocs-aktualisieren","title":"mkdocs aktualisieren","text":"<pre><code>pip3 install --upgrade mkdocs\n</code></pre>","tags":["mkdocs","pip3","konsolenkommandos"]},{"location":"mkdocs/pip/#mkdocs-material-aktualisieren","title":"mkdocs Material aktualisieren","text":"<pre><code>pip3 install --upgrade mkdocs-material\n</code></pre>","tags":["mkdocs","pip3","konsolenkommandos"]},{"location":"mkdocs/pip/#mkdocs-material-extensions-aktualisieren","title":"mkdocs Material Extensions aktualisieren","text":"<pre><code>pip3 install --upgrade mkdocs-material-extensions\n</code></pre>","tags":["mkdocs","pip3","konsolenkommandos"]},{"location":"mkdocs/plugins/","title":"Plugins","text":"","tags":["mkdocs","plugins"]},{"location":"mkdocs/plugins/#mkdocs-glightbox","title":"mkdocs-glightbox","text":"<pre><code>pip3 install mkdocs-glightbox\n</code></pre>","tags":["mkdocs","plugins"]},{"location":"mkdocs/plugins/#mkdocs-minify-plugin","title":"mkdocs-minify-plugin","text":"<pre><code>pip3 install mkdocs-minify-plugin\n</code></pre>","tags":["mkdocs","plugins"]},{"location":"mkdocs/plugins/#mkdocs-static-i18n","title":"mkdocs-static-i18n","text":"<pre><code>pip3 install mkdocs-static-i18n\npip3 install mkdocs-static-i18n --use-pep517\n</code></pre>","tags":["mkdocs","plugins"]},{"location":"mkdocs/plugins/#mkdocs-admonition","title":"mkdocs-admonition","text":"<pre><code>pip3 install mkdocs-admonition\n</code></pre>","tags":["mkdocs","plugins"]},{"location":"mkdocs/plugins/#mkdocs-pdf-export-plugin","title":"mkdocs-pdf-export-plugin","text":"<pre><code>pip3 install mkdocs-pdf-export-plugin\n</code></pre>","tags":["mkdocs","plugins"]},{"location":"mkdocs/python3/","title":"Install python3","text":"<pre><code>python3 -m ensurepip --upgrade\n</code></pre>","tags":["python","installation"]},{"location":"mkdocs/python3/#python3-version","title":"python3 --version","text":"<pre><code>python3 --version\n</code></pre>","tags":["python","installation"]},{"location":"mkdocs/templates/","title":"Templates","text":"<pre><code>pip3 install mkdocs-material\n</code></pre>","tags":["mkdocs","temaplates"]},{"location":"php/pest/","title":"Pest","text":"","tags":["commandos","pest"]},{"location":"php/pest/#kommandos","title":"Kommandos","text":"","tags":["commandos","pest"]},{"location":"php/pest/#pest-composer-testpest-coverage","title":"pest: composer test:pest-coverage","text":"<p>Siehe hier: pest.de</p>","tags":["commandos","pest"]},{"location":"php/pest/#pest-datei-testen","title":"pest: Datei Testen","text":"<pre><code>composer test:pest-coverage Tests\\Pfad\\Zur\\Datei\\DateiOhneEndung\n</code></pre>","tags":["commandos","pest"]},{"location":"php/phpstan/","title":"phpstan","text":"<p>PHPStan ist ein Tool f\u00fcr statische Code-Analyse in PHP. Es \u00fcberpr\u00fcft den Code auf Typfehler, unbeabsichtigte Seiteneffekte und andere potenzielle Fehlerquellen. PHPStan bietet Entwicklern eine h\u00f6here Code-Qualit\u00e4t und hilft dabei, potenzielle Fehler im Code zu finden, bevor sie in der Produktion auftreten. Das Tool nutzt dabei eine Kombination aus Typ-Inferenz und statischer Analyse, um sicherzustellen, dass der Code typsicher ist und bestimmten Coding-Standards entspricht. Es ist auch eine Erweiterung von PHP und kann in der Entwicklungsumgebung oder als Teil von Continuous Integration/Continuous Deployment (CI/CD) Pipelines verwendet werden, um sicherzustellen, dass der Code in jeder Phase der Entwicklung korrekt funktioniert.</p>","tags":["phpstan","commandos"]},{"location":"php/phpstan/#kommandos","title":"Kommandos","text":"","tags":["phpstan","commandos"]},{"location":"php/phpstan/#phpstan-der-tagliche-wahnsinn","title":"phpstan: Der t\u00e4gliche Wahnsinn","text":"<pre><code>vendor/bin/phpstan clear-result-cache --memory-limit=5G\nvendor/bin/phpstan analyse --ansi --memory-limit=5G\nvendor/bin/phpstan --generate-baseline --memory-limit=5G\n</code></pre>","tags":["phpstan","commandos"]},{"location":"wiki/command-line-commands/","title":"Command line commands","text":"","tags":["wiki","linux","commands"]},{"location":"wiki/command-line-commands/#ls-la","title":"ls -la","text":"<p>Der Befehl \"ls\" steht f\u00fcr \"list\" und wird verwendet, um den Inhalt eines Verzeichnisses aufzulisten. Ohne weitere Optionen zeigt der Befehl \"ls\" einfach eine Liste der Dateien und Verzeichnisse im aktuellen Verzeichnis an.</p> <p>Die Option \"-l\" (kleines L) ist eine Schalteroption, die den langen Ausgabeformat von \"ls\" aktiviert. Wenn Sie \"ls -l\" eingeben, erhalten Sie eine detaillierte Liste der Dateien und Verzeichnisse im aktuellen Verzeichnis, die folgende Informationen enth\u00e4lt:</p> <ul> <li>Dateiberechtigungen</li> <li>Anzahl der harten Links</li> <li>Name des Besitzers</li> <li>Name der Gruppe</li> <li>Dateigr\u00f6\u00dfe</li> <li>Datum und Uhrzeit der letzten \u00c4nderung</li> <li>Dateiname</li> </ul> <p>Die Option \"-a\" (kleines A) ist eine weitere Schalteroption, die alle Dateien und Verzeichnisse einschlie\u00dflich der versteckten Dateien im aktuellen Verzeichnis auflistet. Versteckte Dateien beginnen normalerweise mit einem Punkt \".\" (z.B. .bashrc, .gitignore).</p> <p>Wenn Sie \"ls -la\" eingeben, erhalten Sie eine detaillierte Liste aller Dateien und Verzeichnisse im aktuellen Verzeichnis, einschlie\u00dflich versteckter Dateien. Die Ausgabe enth\u00e4lt alle Informationen, die auch bei \"ls -l\" angezeigt werden, jedoch mit zus\u00e4tzlichen Informationen \u00fcber versteckte Dateien und Verzeichnisse.</p>","tags":["wiki","linux","commands"]},{"location":"wiki/command-line-commands/#rm-rf","title":"rm -rf","text":"<p>Der Befehl \"rm -rf\" ist ein Kommando, das in Unix-basierten Betriebssystemen verwendet wird, um Dateien und Verzeichnisse dauerhaft zu l\u00f6schen. Hier ist eine Erkl\u00e4rung der einzelnen Bestandteile des Befehls:</p> <ul> <li> <p>\"rm\" steht f\u00fcr \"remove\" und ist das Kommando zum L\u00f6schen von Dateien und Verzeichnissen.</p> </li> <li> <p>Das Flag \"-r\" steht f\u00fcr \"recursive\" und gibt an, dass der Befehl rekursiv angewendet werden soll, um sowohl Verzeichnisse als auch deren Inhalte zu l\u00f6schen. Ohne dieses Flag w\u00fcrde \"rm\" nur einzelne Dateien l\u00f6schen, aber keine Verzeichnisse.</p> </li> <li> <p>Das Flag \"-f\" steht f\u00fcr \"force\" und bewirkt, dass der Befehl ohne R\u00fcckfrage oder Best\u00e4tigung ausgef\u00fchrt wird. Es werden keine Warnungen angezeigt, und selbst schreibgesch\u00fctzte Dateien werden gel\u00f6scht, ohne dass der Benutzer dazu aufgefordert wird.</p> </li> </ul> <p>Zusammen ergeben diese Optionen \"rm -rf\" einen Befehl, der alle Dateien und Verzeichnisse in einem angegebenen Pfad und deren Unterordnern l\u00f6scht, ohne den Benutzer um Best\u00e4tigung zu bitten. Da dieser Befehl sehr m\u00e4chtig ist und keine Sicherheitsvorkehrungen enth\u00e4lt, ist es wichtig, ihn mit Vorsicht zu verwenden, um versehentliches L\u00f6schen von wichtigen Daten zu vermeiden.</p>","tags":["wiki","linux","commands"]},{"location":"wiki/iaas/","title":"Iaas","text":"","tags":["wiki","infrastructure"]},{"location":"wiki/iaas/#infrastructure-as-a-service-iaas","title":"Infrastructure as a Service (IaaS)","text":"<p>Infrastructure as a Service (IaaS) ist eine Form des Cloud Computing, bei der IT-Infrastruktur \u00fcber das Internet bereitgestellt wird. IaaS ist eine der drei wichtigsten Kategorien von Cloud Computing-Diensten, neben Software as a Service (SaaS) und Platform as a Service (PaaS).</p>","tags":["wiki","infrastructure"]},{"location":"wiki/linux-screen/","title":"Linux screen","text":"<ol> <li>Identify the name of the session:</li> </ol> <pre><code> $ screen -ls\n</code></pre> <ol> <li>Close a session:</li> </ol> <pre><code>$ screen -XS &lt;session-id&gt; quit\n</code></pre> <ul> <li>screen</li> </ul> <p>Befehl zum Installieren der Pakete:</p> <pre><code>sudo apt-get install screen\n</code></pre> <p>Oder mit apturl installieren, Link: apt://screen</p>","tags":["wiki","linux","screen"]},{"location":"wiki/linux-screen/#bedienung","title":"Bedienung","text":"<p>Mit dem Befehl screen in einem Terminal l\u00e4sst sich der Fenstermanager starten.</p>","tags":["wiki","linux","screen"]},{"location":"wiki/linux-screen/#allgemein","title":"Allgemein","text":"<p>Nach dem Aufruf von screen scheint es so, als ob nichts geschehen w\u00e4re. Das stimmt aber nicht, denn im Hintergrund l\u00e4uft nun screen zum Verwalten der Sitzungen. Man kann nun ganz normal weiterarbeiten und verschiedene Programme starten, wie man es gewohnt ist.</p>","tags":["wiki","linux","screen"]},{"location":"wiki/linux-screen/#wichtige-befehle","title":"Wichtige Befehle","text":"<p>Die drei wichtigsten Befehle bzw. Tastenkombinationen, die man kennen sollte, sind:</p> <ul> <li>Strg + A , gefolgt von C zum Erstellen eines neuen Fensters</li> <li>Strg + A , gefolgt von N zum Wechseln zum n\u00e4chsten Fenster</li> <li>Strg + A , gefolgt von D zum Trennen (detach) der Verbindung zur aktuellen Sitzung, die Sitzung l\u00e4uft dann im Hintergrund weiter</li> </ul> <p>Eine \u00dcbersicht \u00fcber alle Tastenk\u00fcrzel erh\u00e4lt man mit Strg + A , gefolgt von ? .</p> <p>Eine Sitzung beendet man, indem man die dort laufende Shell beendet, also entweder mit dem Befehl <code>exit</code> oder durch Dr\u00fccken von Strg + D.</p>","tags":["wiki","linux","screen"]},{"location":"wiki/linux-screen/#weitere-befehle","title":"Weitere Befehle","text":"<p>Starten einer neuen Sitzung mit dem Namen \"sitzung1\"</p> <pre><code>screen -S sitzung1\n</code></pre> <p>Trennt (engl.: \"detach\") die Verbindung zur aktuellen Sitzung: Strg + A + D</p> <p>Nimmt die Sitzung wieder auf, falls nur eine einzige Sitzung im Hintergrund l\u00e4uft:</p> <p>Nimmt die Sitzung mit dem Namen \"sitzung1\" wieder auf:</p> <pre><code>screen -r sitzung1\n</code></pre> <p>Auflisten der Namen aller laufenden Screen-Sitzungen:</p> <p>Trennt die Verbindung zu einer laufenden Sitzung mit dem Namen \"sitzung1\" (sehr hilfreich, wenn man z.B. die Verbindung per ssh verloren hat und deswegen die Sitzung nicht trennen konnte):</p> <pre><code>screen -d sitzung1\n</code></pre> <p>Die Sitzung mit dem Namen \"sitzung1\" kann an mehreren Computern gleichzeitig angezeigt werden:</p> <pre><code>screen -rx sitzung1\n</code></pre> <p>An die Sitzung mit dem Namen \"sitzung1\" einen Befehl senden und ausf\u00fchren (\\n f\u00fcr [ENTER]):</p> <pre><code>screen -S sitzung1 -X stuff $'ls -l\\n'\n</code></pre> <p>Visuelle Benachrichtigung umschalten (Flackern oder Ton; wenn der Bildschirm manchmal flackert, sollte man diesen Befehl ausf\u00fchren, bis links unten \"switched to audible bell\" steht.): Strg + A + G</p>","tags":["wiki","linux","screen"]},{"location":"wiki/linux-screen/#unterschied-zwischen-sitzung-und-fenster","title":"Unterschied zwischen Sitzung und Fenster","text":"<p>Den Unterschied zwischen einer Screen-Sitzung und einem Screen-Fenster kann man sich etwa so wie bei einem Browser mit Tabs vorstellen, wobei Screen-Sitzungen einem Browserfenster und Screen-Fenster einem Browser-Tab entsprechen. Es k\u00f6nnen mehrere Screen-Sitzungen gleichzeitig laufen und in jeder Screen-Sitzung k\u00f6nnen mehrere Screen-Fenster ge\u00f6ffnet sein, so wie man mehrere Browserfenster \u00f6ffnen kann und in jedem Browserfenster mehrere Tabs ge\u00f6ffnet sein k\u00f6nnen.</p>","tags":["wiki","linux","screen"]},{"location":"wiki/linux-screen/#ausgabe-scrollen","title":"Ausgabe scrollen","text":"<p>Um in der Ausgabe eines Screen-Fenster mit den bekannten Tastenkombinationen \u21e7 + Bild \u2191 und \u21e7 + Bild \u2193 zu scrollen, tr\u00e4gt man die Zeile</p> <pre><code>termcapinfo xterm|xterms|xs|rxvt ti@:te@\n</code></pre> <p>in die Datei .screenrc (welche eventuell noch angelegt werden muss) im Heimatverzeichnis ein.</p> <p>Falls das nicht funktioniert, bleibt noch die M\u00f6glichkeit, mit Strg + A + Esc in den copy-Modus zu wechseln und dort mit den Pfeiltasten oder Strg + U (halbes Fenster hoch), Strg + D (halbes Fenster runter), Strg + B (ganzes Fenster zur\u00fcck), Strg + F (ganzes Fenster vorw\u00e4rts) zu scrollen. Danach verl\u00e4sst man den copy-Modus mit Esc oder Q .</p>","tags":["wiki","linux","screen"]},{"location":"wiki/linux-screen/#links","title":"Links","text":"<ul> <li> <p>Projektseite \ud83c\uddec\ud83c\udde7</p> </li> <li> <p>tmux - Alternative zu screen</p> </li> <li> <p>byobu - Erweiterung f\u00fcr screen</p> </li> </ul>","tags":["wiki","linux","screen"]},{"location":"wiki/mysql/","title":"Mysql","text":"","tags":["wiki","mysql","commands"]},{"location":"wiki/mysql/#maximale-anzahl-von-gleichzeitigen-verbindungen","title":"Maximale Anzahl von gleichzeitigen Verbindungen","text":"<p>In MySQL k\u00f6nnen Sie die maximale Anzahl von gleichzeitigen Verbindungen mit der folgenden Abfrage ermitteln:</p> <pre><code>SHOW VARIABLES LIKE 'max_connections';\n</code></pre> <p>Diese Abfrage gibt das maximale Limit f\u00fcr die Anzahl der Verbindungen zur\u00fcck, die zur gleichen Zeit auf den MySQL-Server zugreifen k\u00f6nnen. Beachten Sie jedoch, dass dieses Limit von der Konfiguration des MySQL-Servers abh\u00e4ngt und nicht unbedingt der tats\u00e4chlichen Anzahl von gleichzeitigen Transaktionen entspricht, die ausgef\u00fchrt werden k\u00f6nnen.</p>","tags":["wiki","mysql","commands"]},{"location":"wiki/mysql/#aktuelle-anzahl-von-verbindungen","title":"Aktuelle Anzahl von Verbindungen","text":"<p>Um die aktuelle Anzahl von Verbindungen anzuzeigen, die zu einem bestimmten Zeitpunkt auf den MySQL-Server zugreifen, k\u00f6nnen Sie die folgende Abfrage verwenden:</p> <pre><code>SHOW STATUS WHERE `variable_name` = 'Threads_connected';\n</code></pre> <p>Diese Abfrage gibt die Anzahl der aktiven Verbindungen zur\u00fcck, die auf den MySQL-Server zugreifen. Beachten Sie jedoch, dass die Anzahl der Verbindungen schwanken kann, da Verbindungen ge\u00f6ffnet und geschlossen werden, w\u00e4hrend die Datenbank verwendet wird.</p>","tags":["wiki","mysql","commands"]},{"location":"en/mac-os-commands/","title":"Mac OS Command Line Commands","text":"","tags":["awesome"]},{"location":"en/mac-os-commands/#file-management","title":"File Management:","text":"","tags":["awesome"]},{"location":"en/mac-os-commands/#cd","title":"cd","text":"<p>Change the current directory. For example, <code>cd ~/Documents</code> changes the current directory to \"Documents\" in the home directory.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#ls","title":"ls","text":"<p>Lists the contents of the current directory. For example, <code>ls -l</code> shows a list of files and directories in the current directory.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#pwd","title":"pwd","text":"<p>Shows the current directory. For example, <code>pwd</code> shows the current directory.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#mkdir","title":"mkdir","text":"<p>Creates a new directory. For example, <code>mkdir ~/Documents/MyProject</code> creates a new directory named \"MyProject\" in the \"Documents\" directory in the home directory.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#rm","title":"rm","text":"<p>Removes a file or directory. For example, <code>rm ~/Documents/MyProject</code> removes the \"MyProject\" directory in the \"Documents\" directory in the home directory.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#cp","title":"cp","text":"<p>Copies a file or directory. For example, <code>cp ~/Documents/MyProject ~/Desktop/MyProject</code> copies the \"MyProject\" directory in the \"Documents\" directory in the home directory to the \"MyProject\" directory on the desktop.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#mv","title":"mv","text":"<p>Moves a file or directory. For example, <code>mv ~/Documents/MyProject ~/Desktop/MyProject</code> moves the \"MyProject\" directory in the \"Documents\" directory in the home directory to the \"MyProject\" directory on the desktop.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#open","title":"open","text":"<p>Opens a file or directory. For example, <code>open ~/Documents/MyProject</code> opens the \"MyProject\" directory in the \"Documents\" directory in the home directory.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#find","title":"find","text":"<p>Finds files and directories. For example, <code>find ~/Documents -name MyProject</code> finds files and directories named \"MyProject\" in the \"Documents\" directory in the home directory.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#grep","title":"grep","text":"<p>Searches a file or text for a pattern or expression. For example, <code>grep \"error\" log.txt</code> shows all lines in the \"log.txt\" file that contain the word \"error\".</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#less","title":"less","text":"<p>Shows the contents of a file. For example, <code>less log.txt</code> shows the contents of the \"log.txt\" file.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#head","title":"head","text":"<p>Shows the first lines of a file. For example, <code>head log.txt</code> shows the first 10 lines of the \"log.txt\" file.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#tail","title":"tail","text":"<p>Shows the last lines of a file. For example, <code>tail log.txt</code> shows the last 10 lines of the \"log.txt\" file.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#touch","title":"touch","text":"<p>Creates an empty file. For example, <code>touch log.txt</code> creates an empty file named \"log.txt\".</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#system-monitoring","title":"System Monitoring:","text":"","tags":["awesome"]},{"location":"en/mac-os-commands/#top","title":"top","text":"<p>Shows a list of running processes. For example, <code>top</code> shows a list of running processes.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#ps","title":"ps","text":"<p>Shows a list of running processes. For example, <code>ps aux</code> shows all processes on the system.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#ifconfig","title":"ifconfig","text":"<p>Shows the network configuration. For example, <code>ifconfig en0</code> shows the configuration of the \"en0\" network adapter.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#network-tools","title":"Network Tools:","text":"","tags":["awesome"]},{"location":"en/mac-os-commands/#ping","title":"ping","text":"<p>Sends a ping to a host. For example, <code>ping google.com</code> sends a ping to \"google.com\".</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#ssh","title":"ssh","text":"<p>Connects to a remote server via Secure Shell (SSH). For example, `ssh</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#file-system-tools","title":"File System Tools","text":"","tags":["awesome"]},{"location":"en/mac-os-commands/#df","title":"df","text":"<p>Shows the free space on the file systems. For example, <code>df -h</code> shows the free space in a human-readable form.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#du","title":"du","text":"<p>Shows the size of files and directories. For example, <code>du -sh</code> shows the size of the current directory in a human-readable form.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#tar","title":"tar","text":"<p>Creates or extracts a tar archive. For example, <code>tar -xvf archive.tar</code> extracts the archive \"archive.tar\".</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#unzip","title":"unzip","text":"<p>Unzips a ZIP file. For example, <code>unzip archive.zip</code> unzips the ZIP file \"archive.zip\".</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#diskutil","title":"diskutil","text":"<p>Shows information about the disks. For example, <code>diskutil list</code> shows a list of disks.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#ln","title":"ln","text":"<p>Creates a symbolic link. For example, <code>ln -s ~/Documents/MyProject ~/Desktop/MyProject</code> creates a symbolic link to the \"MyProject\" directory in the \"Documents\" directory in the home directory on the desktop.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#mount","title":"mount","text":"<p>Mounts a file system. For example, <code>mount -t iso9660 image.iso /mnt/iso</code> mounts the ISO file \"image.iso\" to the directory \"/mnt/iso\".</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#access-rights-tools","title":"Access Rights Tools","text":"","tags":["awesome"]},{"location":"en/mac-os-commands/#chmod","title":"chmod","text":"<p>Changes the access rights for a file or directory. For example, <code>chmod 755 script.sh</code> gives the script \"script.sh\" the permission to be executed.</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#chown","title":"chown","text":"<p>Changes the owner of a file or directory. For example, <code>chown user file.txt</code> changes the owner of the file \"file.txt\" to the user \"user\".</p>","tags":["awesome"]},{"location":"en/mac-os-commands/#root-tools","title":"Root Tools","text":"","tags":["awesome"]},{"location":"en/mac-os-commands/#sudo","title":"sudo","text":"<p>Executes a command as superuser. For example, <code>sudo reboot</code> reboots the computer.</p>","tags":["awesome"]},{"location":"en/atlassian/manage-kanban-boards/#creating-a-kanban-board","title":"Creating a Kanban Board","text":"<ol> <li>Open Jira and sign in with your login credentials.</li> <li>Click on \"Boards\" in the top navigation bar and select \"Create Board\" from the dropdown menu.</li> <li>Choose \"Kanban Board\" from the list of board types and click \"Next.\"</li> <li>Give the board a name and select the projects you want to represent on the board by holding down the CTRL or CMD key.</li> <li>Set the filter options for the board by selecting the corresponding criteria, and click \"Create Board\" to create the Kanban board.</li> </ol> <p>Once the board is created, you can create tasks and stories and assign them to the corresponding columns on the board. If you want to add tasks from other projects, you can do so by assigning them to the corresponding columns on the board. This allows you to get an overview of tasks from various projects on a single board.</p>","tags":["atlassian","boards-delete"]},{"location":"en/atlassian/manage-kanban-boards/#creating-a-new-category","title":"Creating a New Category","text":"<ol> <li>Click on the Kanban board to which you want to add a new category.</li> <li>Click on the gear icon in the upper right corner of the board and select \"Board Settings\" from the dropdown menu.</li> <li>Click on \"Columns\" in the left menu.</li> <li>Click on \"Add Column\" to create a new column.</li> <li>Enter a name for the new column and set the position of the column on the board.</li> <li>Optionally, set WIP (Work-in-Progress) limits for the column.</li> <li>Click \"Add Column\" to create the new category.</li> </ol> <p>After creating the new category, you can drag and drop tasks and stories into the new column.</p>","tags":["atlassian","boards-delete"]},{"location":"en/atlassian/manage-kanban-boards/#deleting-a-kanban-board","title":"Deleting a Kanban Board","text":"<p>To delete a board in Atlassian, you should follow these steps:</p> <ol> <li>Go to your Atlassian account and sign in.</li> <li>Click on the \"Boards\" button in the top menu bar.</li> <li>Select the board you want to delete.</li> <li>Click on the gear icon in the top right corner of the board.</li> <li>Click on \"Delete Board\".</li> <li>Confirm the deletion of the board by clicking on \"Delete\".</li> </ol> <p>Warning</p> <p>Please note that when you delete a board, all associated tasks and comments will also be deleted. Therefore, make sure to save or export all important information before deleting the board.</p>","tags":["atlassian","boards-delete"]},{"location":"en/aws/access-key-change/#changing-access-key","title":"Changing Access Key","text":"<p>To change the Access Key in the AWS Management Console, please follow these steps:</p> <ol> <li>Sign in to the AWS Management Console.</li> <li>From the top menu, select \"Services\" and then choose \"IAM.\"</li> <li>Click on \"Users\" and select the user whose Access Key you want to change.</li> <li>Click on the \"Security Credentials\" tab and scroll down to \"Access Keys.\"</li> <li>Click \"Create Access Key\" and make note of the Access Key ID and Secret Access Key.</li> <li>Disable the old Access Key by clicking on the \"Disable\" button.</li> <li>Test the new Access Key by incorporating it into your applications or services.</li> </ol> <p>Please note that changing the Access Key will affect all applications or services that use the old Access Key. Make sure to update all relevant applications to ensure they are using the new Access Key.</p>","tags":["aws","passwort-aendern","access-key"]},{"location":"en/best-practice/destruct-method/","title":"PHP __desctruct","text":"<p>In PHP,</p> <p><code>__construct()</code></p> <p>is called while creating an object and</p> <p><code>__destruct()</code></p> <p>is called while the object is being removed from memory. Using this knowledge, we can create more fluent APIs as demonstrated by Freek Van der Herten in this short video.</p> <p>Now let's see when PHP calls</p> <p><code>__destruct()</code> <code>exactly.</code></p> <p>An object is removed from memory if you explicitly remove it:</p> <pre><code>&lt;?php\n$object = new Object();\nunset($object); // __destruct will be called immediately.\n$object = null; // __destruct will be called immediately.\n</code></pre> <p>It's also called when the scope where the object live is about to be terminated, for example at the end of a controller method:</p> <pre><code>&lt;?php\nfunction store(Request $request)\n{\n$object = new Object();\nUser::create(...);\n// __destruct will be called here.\nreturn view('welcome');\n}\n</code></pre> <p>Even if we're within a long running process, queued job for example, __destruct will be called before the end of the handle method:</p> <pre><code>&lt;?php\nfunction handle()\n{\n$object = new Object();\nUser::create(...);\n// __destruct will be called here.\n}\n</code></pre> <p>It'll also be called when the script is being terminated:</p> <pre><code>&lt;?php\nfunction handle()\n{\n$object = new Object();\nUser::create(...);\n// __destruct will be called here.\nexit(1);\n}\n</code></pre> <ul> <li>Original article by Mohamed Said</li> </ul>","tags":["php","desctruct"]},{"location":"en/best-practice/pull-request-splitting/#pull-request-splitting-pull-request-partitioning","title":"Pull Request Splitting | Pull Request Partitioning","text":"<p>In software development, the technical term \"pull request splitting\" or \"pull request partitioning\" is used to divide a pull request into several smaller pull requests.</p> <p>The process of pull request splitting is a method to simplify code review and integration of changes into a code base. For complex or large changes, it can be difficult to review and integrate a large pull request. Splitting the pull request into smaller units makes it easier to review and integrate changes into the code base.</p> <p>An example of pull request splitting might be when a developer wants to integrate a new feature into an existing application. Instead of bundling all the changes into one large pull request, the developer could split the pull request into several smaller units, such as one unit for the new database table, one unit for the back-end logic, and one unit for the front-end integration. This way, reviewers can more easily track the changes and provide more targeted feedback.</p> <p>Pull request splitting, then, is a method of breaking down large and complex changes into smaller and more easily understood units to facilitate code review and integration of changes.</p>","tags":["git","github","best-practice","pull-request","pull-request-splitting"]},{"location":"en/best-practice/race-condition/#race-condition","title":"Race Condition","text":"<p>A race condition (a race to access resources) is an undesirable situation that occurs when a device or system attempts to perform two or more operations simultaneously. But because of the particular nature of each device or system, the operations must be performed in the correct order to be truly correct.</p> <p>A simple example of a race condition is a light switch. In some houses or apartments, there are multiple light switches connected to a common overhead light. When these types of switches are used, the particular switch position becomes irrelevant. If the light is on, and you move any other switch from its current (on) position, the light will be turned off again. The situation is similar when the light is off: using each switch in its current position turns the light on. On this basis, one must now imagine what could happen if two people at two different switches try to switch on the light at exactly the same time. One switch action could turn off the other, or both simultaneous actions could result in a short circuit.</p> <p>Race conditions are generally associated with computer science and IT. In computer memory or [[storage]], a race condition can occur when read and write commands for large amounts of data are received at nearly the same time and the device attempts to overwrite some or all of the old data while that old data is still being read. As a result, one or more of the following phenomena may occur: a computer crash, an unidentifiable \"illegal operation,\" invocation and shutdown of a program, errors reading the old data, or errors writing the new data. A race condition can also occur when arrangements are not implemented in the correct order.</p> <p>For example, suppose that two processes need to perform a bit flip (bit change) at a specific memory location. Under normal circumstances, the operation should proceed as follows:</p> <p>Process 1</p><p>Process 2</p><p>Memory Value</p><p>Read value</p><p>0</p><p>Flip value</p><p>1</p><p>Read value</p><p>1</p><p>Flip value</p><p>0</p> <p>Process 1 thus performs a bit flip by setting the memory value from 0 to 1. Process 2 then performs a bit flip and changes the memory value from 1 to 0.</p> <p>In a race condition, these two processes lead to an overlap, and the sequence could possibly look like the following:</p> <p>Process 1</p><p>Process 2</p><p>Memory Value</p><p>Read value</p><p>0</p><p>Read value</p><p>0</p><p>Flip value</p><p>1</p><p>Flip value</p><p>1</p> <p>In this example, the bit has a closing value of 1, but should have a value of 0. This happens because the second process does not know that process 1 is performing a simultaneous bit flip.</p>","tags":["best-practice","race-condition"]},{"location":"en/best-practice/race-condition/#wie-man-race-conditions-verhindert","title":"Wie man Race Conditions verhindert","text":"<p>In computer environments, race conditions can be prevented by prioritizing memory access. This means that the read command is always executed first and terminated if read and write commands are received at approximately the same time.</p> <p>In a network, a race condition can occur when two users want to access an available channel at the same time and neither of the computers involved receives a notification that the channel is already busy before granting access. Statistically, this type of overlap is highly likely to occur in networks with long time delays - for example, those based on geostationary satellites. To prevent such a competitive situation from developing, one must design a priority scheme. This might consist, for example, of ensuring that the user whose username begins with an earlier letter in the alphabet (or a lower number) gets access first whenever two users attempt to access the system in a defined period of time. Hackers are able to exploit such sensitive race conditions and use them to gain unauthorized access to networks.</p> <p>Race conditions also occasionally occur at logical access points (gates) when certain inputs conflict with each other. Because the output of the gate takes a certain amount of time to respond to any change in the inputs, sensitive networks or devices behind the gate can be deceived about the current state of the output and therefore fail to function correctly.</p>","tags":["best-practice","race-condition"]},{"location":"en/best-practice/try-catch-finally/#try-catch-finally","title":"Try catch finally","text":"<p>Errors and exceptions occur when running our scripts, that is part of the nature of things. However, it is necessary to distinguish errors from each other and handle them accordingly. For this we can use the keywords try, catch and finally in PHP.</p>","tags":["php","try-catch"]},{"location":"en/best-practice/try-catch-finally/#try-catch-block","title":"try catch Block","text":"<p>We can handle errors and exceptions if the code that produces them is written in a try block. We can then catch them with the catch keyword.</p> <pre><code>&lt;?php\ntry {\n# Tu was\n} catch (Exception $e) {\n# K\u00fcmmere dich um Ausnahmen\n}\n</code></pre>","tags":["php","try-catch"]},{"location":"en/best-practice/try-catch-finally/#errors-and-exceptions","title":"Errors and exceptions","text":"<p>An error occurs, for example, when you call a function that was never defined.</p> <pre><code>&lt;?php undefinierte_funktion(); ?&gt;\n</code></pre> <p>Output:</p> <pre><code>Fatal error: Uncaught Error: Call to undefined function undefinierte\\_funktion() in C:\\\\xampp\\\\htdocs\\\\codecitrus\\\\try\\_catch.php:1 Stack trace: #0 {main} thrown in C:\\\\xampp\\\\htdocs\\\\codecitrus\\\\try\\_catch.php on line 1\n</code></pre> <p>To define code that is executed only when an error (Error) occurs, you can apply try and catch.</p> <pre><code>&lt;?php\ntry {\nundefinierte_funktion();\necho 'Es ist kein Fehler aufgetreten';\n} catch (Error $e) {\necho 'Ein Fehler ist aufgetreten' . '&lt;br&gt;';\necho $e-&gt;getMessage();\n}\n</code></pre> <p>Output:</p> <pre><code>Ein Fehler ist aufgetreten\nCall to undefined function undefinierte_funktion()\n</code></pre> <p>If instead an exception (exception) occurs, you must specify so in the catch block to handle it.</p> <pre><code>&lt;?php\nfunction ausnahme() {\nthrow new Exception('Eine Ausnahme ist aufgetreten');\n}\ntry {\nausnahme();\n} catch (Exception $e) {\necho $e-&gt;getMessage();\n}\n</code></pre> <p>Output:</p> <pre><code>Eine Ausnahme ist aufgetreten\n</code></pre>","tags":["php","try-catch"]},{"location":"en/best-practice/try-catch-finally/#multiple-catch-blocks","title":"Multiple catch blocks","text":"<p>The previous explanations have dealt with both exceptions and errors. To catch both, you could define two catch blocks in a row.</p> <pre><code>&lt;?php\ntry {\nundefinierte_funktion();\n} catch (Exception $e) {\necho 'Exception';\n} catch (Error $e) {\necho 'Error';\n}\n</code></pre> <p>Output:</p> <pre><code>Error\n</code></pre> <p>Another possibility is to intercept throwable with catch. Throwable is the interface that every PHP class must implement if it is to be called with throw. For the next example, the exception function we defined earlier will be used again.</p> <pre><code>&lt;?php\ntry {\nundefinierte_funktion();\n} catch (Throwable $t) {\necho 'Gotta catch \\'em all!';\n}\n// Gotta catch 'em all!\ntry {\nausnahme();\n} catch (Throwable $t) {\necho 'Schnapp sie dir alle!';\n}\n// Schnapp sie dir alle!\n</code></pre>","tags":["php","try-catch"]},{"location":"en/best-practice/try-catch-finally/#finally-block","title":"finally Block","text":"<p>You can add more code to your block with the finally keyword. Finally allows you to write code that will be executed whether an error occurs or not.</p> <pre><code>&lt;?php\nfunction finally_beispiel_1() {\ntry {\nthrow new Exception();\n} catch (Exception $e) {\necho \"Exception!\" . '&lt;br&gt;';\n} finally {\necho \"Finally!\";\n}\n}\nfinally_beispiel_1();\n</code></pre> <p>Output:</p> <pre><code>Exception!\nFinally!\n</code></pre>","tags":["php","try-catch"]},{"location":"en/best-practice/try-catch-finally/#return-in-finally","title":"return in finally","text":"<p>return can lead to unexpected results when using finally.</p> <pre><code>&lt;?php\nfunction finally_beispiel_2() {\ntry {\nthrow new Exception();\nreturn 1;\n} catch (Exception $e) {\necho \"Exception!\" . '&lt;br&gt;';\nreturn 2;\n} finally {\necho \"Finally!\" . '&lt;br&gt;';\nreturn 3;\n}\n}\necho finally_beispiel_2();\n</code></pre> <p>Output:</p> <pre><code>Exception!\nFinally!\n3\n</code></pre> <p>In the previous example, the value of return from the catch block was simply overwritten with that from finally. The same would happen if return had already received a value from try.</p>","tags":["php","try-catch"]},{"location":"en/best-practice/try-catch-finally/#conclusion","title":"Conclusion","text":"<p>With try, catch and finally, PHP provides us with powerful tools to handle exceptions and errors. We can use them to create logs, run alternate routines, or simply stop our script. However, care should be taken when we use our code in such blocks with return, as this may lead to unexpected results.</p> <ul> <li>Original Artikel von Patrick</li> </ul>","tags":["php","try-catch"]},{"location":"en/best-practice/workflow-pull-request-splitting/#sample-workflow","title":"Sample workflow","text":"<p>Here's a sample workflow for creating and managing blog posts with pull request splitting:</p> <pre><code>graph TD\n    A((master-branch)) -- create --&gt; B((blog-db-migration))\n    A -- create --&gt; C((blog-list-page))\n    A -- create --&gt; D((blog-create-entry))\n    A -- create --&gt; E((blog-edit-entry))\n    B -- merge --&gt; A\n    C -- merge --&gt; A\n    D -- merge --&gt; A\n    E -- merge --&gt; A\n    B -- merge --&gt; C\n    C -- merge --&gt; D\n    D -- merge --&gt; E</code></pre> <ol> <li>Create a new branch from the master branch with a meaningful name such as \"blog-db-migration\" for the migrations.<ol> <li>Perform all necessary steps to implement and test the migrations.</li> </ol> </li> <li>Create another branch from the current master branch with a name like \"blog-list-page\" for listing the blog entries.<ol> <li>Add the previous branch \"blog-db-migration\" to this new branch \"blog-list-page\" and perform all the necessary steps to implement and test the listing of blog entries.</li> </ol> </li> <li>Create another branch from the current master branch with a name like \"blog-create-entry\" for adding new blog entries.<ol> <li>Merge the previous branch \"blog-list-page\" into this new branch \"blog-create-entry\" and perform all necessary steps to implement and test adding new blog entries.</li> </ol> </li> <li>Create another branch from the current master branch with a name like \"blog-edit-entry\" for editing existing blog entries.<ol> <li>Merge the previous branch \"blog-create-entry\" into this new branch \"blog-edit-entry\" and perform all necessary steps to implement and test editing of existing blog entries.</li> </ol> </li> </ol> <p>Warning</p> <p>It is important that each pull request functions independently and contains only the necessary changes. Therefore, each pull request should only be evaluated if the previous pull request has already been merged and the pull request under review has been updated as a result. Failure to do so can result in too many files being displayed in the pull request for review, which can make the review more difficult. It is also important to indicate in each pull request what other pull requests it builds on to ensure that they are reviewed and merged in the correct order.</p> <p>Tip</p> <p>Stashes can be used as a workaround to organize changes in different branches</p> <p>If you notice while working that you have made changes in the current branch, but they should actually be assigned to another branch, you can use stashing as a workaround. You can save the files in question in a stash, so that you can assign them to the correct branch later. This way you can avoid that changes accidentally end up in the wrong branch and thus disrupt the workflow. After creating the stash, you can later distribute it to the appropriate branch and delete the stash.</p> <p>Tip</p> <p>It is useful to periodically synchronize the code with the main branch to ensure that there are no conflicts when the pull requests are to be memoized.</p>","tags":["git","github","best-practice","pull-request","pull-request-splitting"]},{"location":"en/best-practice/workflow-release-into-master/#workflow-release-into-master","title":"Workflow release into master","text":"<p>This is one of many possible methods to integrate the release into the master branch. The advantage of this method is that both local and origin branches are updated to the latest state.</p> <ol> <li>Checkout the Dev-Release branch.</li> <li>Pull the changes from the upstream release branch into the local Dev-Release branch.</li> <li>Commit the changes in the local Dev-Release branch.</li> <li>Push the Dev-Release branch to the origin release branch.</li> <li>Checkout the Dev-Master branch.</li> <li>Pull the changes from the upstream master branch into the local Dev-Master branch.</li> <li>Commit the changes in the local Dev-Master branch.</li> <li>Push the Dev-Master branch to the origin master branch.</li> <li>Create a new branch named \"release-into-master\" based on the Dev-Master branch and checkout the new branch.</li> <li>Pull the changes from the origin release branch into the new \"release-into-master\" branch.</li> <li>Push the new \"release-into-master\" branch to the origin release-into-master branch.</li> <li>Create a pull request to merge the changes from the Dev-Release branch into the Dev-Master branch.</li> </ol> <pre><code>sequenceDiagram\n    participant Dev\n    participant Upstream\n    participant Origin\n    Dev -&gt;&gt;+ Upstream: Checkout Dev/Release Branch\n    Upstream --&gt;&gt;- Dev: Send Changes for Dev/Release Branch\n    Dev -&gt;&gt;+ Dev: Pull from Upstream/Release into Dev/Release Branch\n    Dev -&gt;&gt;+ Dev: Commit Changes in Dev/Release Branch\n    Dev -&gt;&gt;+ Origin: Push Dev/Release Branch to Origin/Release\n    Dev -&gt;&gt;+ Upstream: Checkout Dev/Master Branch\n    Upstream --&gt;&gt;- Dev: Send Changes for Dev/Master Branch\n    Dev -&gt;&gt;+ Dev: Pull from Upstream/Master into Dev/Master Branch\n    Dev -&gt;&gt;+ Dev: Commit Changes in Dev/Master Branch\n    Dev -&gt;&gt;+ Origin: Push Dev/Master Branch to Origin/Master\n    Dev -&gt;&gt;+ Dev: Create Release-into-Master Branch based on Dev/Master Branch\n    Dev -&gt;&gt;+ Dev: Checkout Dev/Release-into-Master Branch\n    Dev -&gt;&gt;+ Origin: Pull from Origin/Release into Dev/Release-into-Master Branch\n    Dev -&gt;&gt;+ Origin: Push Dev/Release-into-Master Branch to Origin/Release-into-Master\n    Dev -&gt;&gt;+ Origin: Create Pull Request to merge Origin/Release-into-Master Branch into Upstream/Master Branch</code></pre>","tags":["git","github","best-practice","pull-request","workflow-release-into-master"]},{"location":"en/best-practice/coding-standards/conventional-commits/#summary","title":"Summary","text":"<p>Conventional commits is a method of standardizing commit messages in Git repositories that makes it easier to track and trace changes in the code base. It is a set of rules and conventions that define how commit messages should be structured to ensure consistency and clear meaning.</p> <p>The structure of Conventional Commits consists of a prefix and a message body. The prefix consists of a type that indicates the nature of the change, and optionally a range specification that identifies the affected code range. The message text should contain a brief summary of the change and optionally a longer description or explanation of the change.</p> <p>By using Conventional Commits, developers can quickly find out what type of changes were made in a commit and what code areas are affected. This makes it easier to review and track the changes, which is especially beneficial for larger projects or when collaborating with other developers.</p> <p>Conventional Commits is an open source project and can be used by developers around the world. There are also a number of tools and plugins that support Conventional Commits and facilitate integration into the development toolchain.</p>","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"en/best-practice/coding-standards/conventional-commits/#parentheses-in-prefix-for-scope-specification","title":"Parentheses in prefix for scope specification.","text":"<p>Generally, parentheses are used to indicate the scope of the commit, such as the module or tool that is affected by the change. When using parentheses, you should put the scope in parentheses, followed by a colon and a space, before writing the actual commit description text.</p> range specification description (area) The area affected by the change (e.g. (login), (registration)","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"en/best-practice/coding-standards/conventional-commits/#examp","title":"Examp","text":"<pre><code>feat(login): add remember me checkbox\n</code></pre> <p>The use of parentheses in the prefix in Conventional Commits is optional and depends on the specific implementation or convention used in your project or organization.</p> <p>However, if you decide to use parentheses in the prefix, you should make sure that this is clearly stated in your project's documentation so that all developers working on the project can follow the same convention. If you decide not to use parentheses in the prefix, however, it is important that you write a clear and consistent commit description that states the purpose and scope of the change, so that other developers can easily understand and track the change as described above.</p>","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"en/best-practice/coding-standards/conventional-commits/#sources-and-tools","title":"Sources and tools","text":"","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"en/best-practice/coding-standards/conventional-commits/#official-documentation","title":"Official documentation","text":"<p>Conventional Commits</p>","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"en/best-practice/coding-standards/conventional-commits/#commitizen","title":"Commitizen","text":"<p>\"Commitizen\", provides a simplified way to write Git commit messages that conform to the conventions of \"Conventional Commits\".</p> <p>The Commitizen web application provides a graphical user interface that helps developers create a standardized commit message through an interactive process. This can help ensure that commit messages are consistent and readable, which can help facilitate team collaboration.</p> <p>Commitizen</p>","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"en/best-practice/coding-standards/naming-conventions/#kebab-case","title":"Kebab Case","text":"<p>In this format, words are separated with hyphens, for example, \"my-variable-name\". This format is often used in CSS files.</p>","tags":["coding-standards","best-practice","naming-conventions"]},{"location":"en/best-practice/coding-standards/naming-conventions/#pascal-case","title":"Pascal Case","text":"<p>Similar to Camel Case, but the first letter of each word is capitalized, e.g. \"MyVariableName\". This format is often used in object-oriented programming and C#.</p>","tags":["coding-standards","best-practice","naming-conventions"]},{"location":"en/best-practice/coding-standards/naming-conventions/#screaming-snake-case","title":"Screaming Snake Case","text":"<p>This is a variant of the Snake Case where all letters are capitalized and words are separated by underscores, e.g. \"MY_VARIABLEN_NAME\". This format is often used to indicate constants.</p>","tags":["coding-standards","best-practice","naming-conventions"]},{"location":"en/best-practice/coding-standards/naming-conventions/#train-case","title":"Train Case","text":"<p>Similar to Kebab Case, but with capital letters, e.g. \"MY-VARIABLEN-NAME\". This format is used in some languages like Ruby and Lisp.</p>","tags":["coding-standards","best-practice","naming-conventions"]},{"location":"en/best-practice/coding-standards/naming-conventions/#hungarian-notation","title":"Hungarian Notation","text":"<p>In this format, the variable name is prefixed with a prefix that indicates the type of variable. For example, a variable containing a string can be prefixed with \"str\", e.g. \"strName\".</p>","tags":["coding-standards","best-practice","naming-conventions"]},{"location":"en/best-practice/coding-standards/naming-conventions/#upper-camel-case-oder-studlycase","title":"Upper Camel Case oder StudlyCase","text":"<p>This is similar to Pascal Case, but the first letter of the first word is also capitalized. This format is sometimes called \"StudlyCase\" because it is reminiscent of the capitalization of study or key words, e.g. \"MyTollerVariableName\".</p>","tags":["coding-standards","best-practice","naming-conventions"]},{"location":"en/best-practice/coding-standards/naming-conventions/#lower-camel-case-oder-dromedar-case","title":"Lower Camel Case oder dromedar case","text":"<p>Also known as \"dromedar case\", similar to Camel Case, but the first letter of the first word is written in lower case, e.g. \"myTollerVariablenName\". This format is often used in Java and JavaScript.</p>","tags":["coding-standards","best-practice","naming-conventions"]},{"location":"en/best-practice/coding-standards/naming-conventions/#mixed-case","title":"Mixed Case","text":"<p>This format contains both upper and lower case letters in a random way, e.g. \"MeInVaRiAbLeNaMe\". It is not recommended because it can affect the readability of the code.</p>","tags":["coding-standards","best-practice","naming-conventions"]},{"location":"en/best-practice/coding-standards/naming-conventions/#abbreviations","title":"Abbreviations","text":"<p>Some developers use abbreviations for variable names to make them shorter, e.g. \"i\" for \"index\" or \"num\" for \"number\". It is important to ensure that the abbreviations are clear to everyone on the team to avoid misunderstandings.</p>","tags":["coding-standards","best-practice","naming-conventions"]},{"location":"en/best-practice/coding-standards/semantic-versioning/#summary","title":"Summary","text":"<p>0.0.0</p> <p>MAJOR version, when incompatible API changes are made. MINOR version, when new functionalities are added in a backward compatible way PATCH version, when backward compatible bug fixes are made.</p> <p>Additional pre-release and build metadata designations are available as extensions to the MAJOR.MINOR.PATCH format.</p> <p>https://semver.org</p>","tags":["git","github","best-practice","pull-request","conventional-commits"]},{"location":"en/clean-code/boy-scouting-principle/","title":"Boy-Scouting-Principle - Scout Rule","text":"","tags":["clean-code","boy-scouting-principle","pfadfinderregel"]},{"location":"en/clean-code/boy-scouting-principle/#zusammenfassung","title":"Zusammenfassung","text":"<p>The Boy Scout software development principle and the Pathfinder rule in software development are important principles that developers can apply to improve code and ensure that it stays up to date.</p> <p>The Boy Scout principle asks developers to improve code at every opportunity by \"cleaning it up\" to ensure it remains readable, understandable, and maintainable. This may mean that developers scan the code to find potential bugs or inefficient code structures and fix them. It may also mean that they rewrite the code to make it more understandable and easier to maintain.</p> <p>The Pathfinder Rule states that developers should structure code so that it is easy to read, understand, and extend. This may mean that they divide the code into small, well-structured modules that perform clearly defined tasks. Developers should also use meaningful variable names, functions, and classes to make the code more understandable, as well as add sufficient comments to describe how the code works and its intent.</p> <p>In summary, both the Boy Scout principle and the Pathfinder rule aim to make code more readable, understandable, and maintainable to ensure that software stays current and ready to meet user and organizational needs.</p>","tags":["clean-code","boy-scouting-principle","pfadfinderregel"]},{"location":"en/clean-code/solid-design-principles/#summary","title":"Summary","text":"<p>The SOLID design principles are a group of five principles proposed by Robert C. Martin to improve software designs. Each of these principles provides a basic guide to help improve the quality, maintainability, and extensibility of software.</p> <p>The five SOLID principles are:</p>","tags":["clean-code","solid-design-principles","solid"]},{"location":"en/clean-code/solid-design-principles/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>Single Responsibility Principle (SRP): A class should have only one responsibility. This means that it should perform only one task and be vulnerable to only one type of change.</p> <pre><code>&lt;?php\n// bad\nclass Customer {\nprivate $name;\nprivate $email;\npublic function __construct($name, $email) {\n$this-&gt;name = $name;\n$this-&gt;email = $email;\n}\npublic function getName() {\nreturn $this-&gt;name;\n}\npublic function getEmail() {\nreturn $this-&gt;email;\n}\npublic function sendEmail($subject, $body) {\n// Code to send an e-mail\n}\n}\n/*\nIn this example, the `Customer` class is responsible for storing customer information and providing access methods as well as sending emails. The class thus has multiple responsibilities, making it harder to maintain and extend.\n*/\n// good\nclass Customer {\nprivate $name;\nprivate $email;\npublic function __construct($name, $email) {\n$this-&gt;name = $name;\n$this-&gt;email = $email;\n}\npublic function getName() {\nreturn $this-&gt;name;\n}\npublic function getEmail() {\nreturn $this-&gt;email;\n}\n}\nclass EmailSender {\npublic function sendEmail(Customer $customer) {\n$email = $customer-&gt;getEmail();\n// Code to send an e-mail\n}\n}\n/*\nIn this example, the `Customer` class is only responsible for storing customer information and providing access methods. The `EmailSender` class is only responsible for sending emails. Both classes fulfill only one responsibility each.\n*/\n</code></pre>","tags":["clean-code","solid-design-principles","solid"]},{"location":"en/clean-code/solid-design-principles/#open-closed-principle-ocp","title":"Open-Closed Principle (OCP)","text":"<p>Software entities (classes, modules, functions, etc.) should be open to extension but closed to modification. This means that the functionality of a software entity should be extended by adding new code modules or classes without having to change the existing code.</p> <pre><code>&lt;?php\n// bad\nclass AreaCalculator {\npublic function calculate($shapes) {\n$area = 0;\nforeach ($shapes as $shape) {\nif ($shape instanceof Circle) {\n$area += pi() * pow($shape-&gt;getRadius(), 2);\n} elseif ($shape instanceof Rectangle) {\n$area += $shape-&gt;getLength() * $shape-&gt;getWidth();\n}\n// Other conditions for other forms\n}\nreturn $area;\n}\n}\n/*\nIn this example, the `AreaCalculator` class is open to modification because it needs to be changed when a new shape is added. The `Circle` and `Rectangle` classes are also open to modification, as they require new methods when new shapes are added.\n*/\n// good\ninterface Shape {\npublic function area();\n}\nclass Circle implements Shape {\nprivate $radius;\npublic function __construct($radius) {\n$this-&gt;radius = $radius;\n}\npublic function area() {\nreturn pi() * pow($this-&gt;radius, 2);\n}\n}\nclass Rectangle implements Shape {\nprivate $length;\nprivate $width;\npublic function __construct($length, $width) {\n$this-&gt;length = $length;\n$this-&gt;width = $width;\n}\npublic function area() {\nreturn $this-&gt;length * $this-&gt;width;\n}\n}\nclass AreaCalculator {\npublic function calculate(Shape $shape) {\nreturn $shape-&gt;area();\n}\n}\n/*\nIn this example, the `Circle` and `Rectangle` classes are closed to changes because they do not change their functionality when new shapes are added. The `AreaCalculator` class is open to extensions, since it can be easily extended to support calculating the area of new shapes.\n*/\n</code></pre>","tags":["clean-code","solid-design-principles","solid"]},{"location":"en/clean-code/solid-design-principles/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<p>Objects of a derived class should be replaceable by objects of its base class without affecting the program. This means that a derived class should inherit all the behaviors of its base class without changing the behavior of the program.</p> <pre><code>&lt;?php\n// bad\nclass Vehicle {\nprotected $fuel;\npublic function refuel($fuel) {\n// Code for refueling the vehicle\n}\npublic function accelerate() {\n// Code for accelerating the vehicle\n}\n}\nclass Car extends Vehicle {\npublic function refuel($fuel) {\nif ($fuel &gt; 50) {\nthrow new Exception('Too much fuel');\n}\nparent::refuel($fuel);\n}\npublic function accelerate() {\n// Code to accelerate the car\n}\n}\n/*\nIn this example, the `Car` class violates the Liskov Substitution Principle because it violates the contract terms of the `Vehicle` class. The `refuel()` method of the `Car` class performs an additional check to ensure that too much fuel is not added. If a section of code calls the `refuel()` method on a `Vehicle` instance and gets a `Car` instance instead, the additional checking might result in unexpected errors or exceptions.\n*/\n// good\nclass Vehicle {\npublic function startEngine() {\n// Code to start the engine\n}\n}\nclass Car extends Vehicle {\npublic function startEngine() {\nparent::startEngine();\n// Code specifically for cars to start the engine\n}\n}\nclass ElectricCar extends Car {\npublic function startEngine() {\n// Code for starting the electric motor\n}\n}\n/*\nIn this example, the `ElectricCar` class can be used instead of the `Car` class without any problems, since it inherits all the methods and behaviors of the `Car` class and can also override them if necessary.\n*/\n</code></pre>","tags":["clean-code","solid-design-principles","solid"]},{"location":"en/clean-code/solid-design-principles/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<p>Interface Segregation Principle (ISP): Interfaces should be tailored to the specific needs of clients. This means that a class should not be forced to implement methods or properties that it does not need.</p> <pre><code>&lt;?php\n// bad\ninterface Animal {\npublic function move();\npublic function fly();\npublic function swim();\n}\nclass Bird implements Animal {\npublic function move() {\n// Code for the movement of a bird\n}\npublic function fly() {\n// Code for flying a bird\n}\npublic function swim() {\nthrow new Exception('Birds cannot swim');\n}\n}\nclass Fish implements Animal {\npublic function move() {\n// Code for the movement of a fish\n}\npublic function fly() {\nthrow new Exception('Fish cannot fly');\n}\npublic function swim() {\n// Code for swimming a fish\n}\n}\n/*\nIn this example, the `Animal` interface violates the interface segregation principle because it combines methods for flying, swimming, and moving, even though not all animals have these abilities. The `Bird` class must implement the `swim()` method even though birds cannot swim, and the `Fish` class must implement the `fly()` method even though fish cannot fly. This leads to unexpected errors or exceptions when the code accesses an instance of `Bird` or `Fish` and calls an unexpected method.\n*/\n// good\ninterface Animal {\npublic function move();\n}\ninterface FlyableAnimal extends Animal {\npublic function fly();\n}\ninterface SwimmableAnimal extends Animal {\npublic function swim();\n}\nclass Bird implements FlyableAnimal {\npublic function move() {\n// Code for the movement of a fish\n}\npublic function fly() {\n// Code for flying a bird\n}\n}\nclass Fish implements SwimmableAnimal {\npublic function move() {\n// Code zur Bewegung eines Fisches\n}\npublic function swim() {\n// Code for swimming a fish\n}\n}\n/*\nIn this example, we have applied the interface segregation principle by defining separate interfaces for flying and swimming, each inheriting from the general `Animal` interface. This allows us to ensure that classes that cannot fly are not forced to implement a `fly()` method, and classes that cannot swim are not forced to implement a `swim()` method. In this case, the `bird` and `fish` classes implement only the methods relevant to their respective modes of locomotion.\n*/\n</code></pre>","tags":["clean-code","solid-design-principles","solid"]},{"location":"en/clean-code/solid-design-principles/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<p>Dependency Inversion Principle (DIP): Dependencies should be based on abstract interfaces, not on concrete implementations. This means that higher modules should not depend on lower modules and that abstract modules should not depend on concrete modules.</p> <pre><code>&lt;?php\n// bad\nclass MySqlDatabase {\npublic function connect() {\n// Code to connect to a MySQL database\n}\n}\nclass UserRepository {\nprivate $database;\npublic function __construct() {\n$this-&gt;database = new MySqlDatabase();\n}\npublic function getUsers() {\n$this-&gt;database-&gt;connect();\n// Code to retrieve users from the database\n}\n}\n/*\nIn this example, the Dependency Inversion Principle is violated because the `UserRepository` class is directly bound to the concrete implementation `MySqlDatabase`. If we want to use another database like PostgreSQL, we have to change the code in the `UserRepository` class. This causes the code to become rigid and difficult to extend. To preserve the DIP, the `UserRepository` class should use the `DatabaseInterface` abstraction instead of being directly bound to the concrete implementation..\n*/\n// good\ninterface DatabaseInterface {\npublic function connect();\n}\nclass MySqlDatabase implements DatabaseInterface {\npublic function connect() {\n// Code to connect to a MySQL database\n}\n}\nclass PostgreSqlDatabase implements DatabaseInterface {\npublic function connect() {\n// Code to connect to a PostgreSQL database\n}\n}\nclass UserRepository {\nprivate $database;\npublic function __construct(DatabaseInterface $database) {\n$this-&gt;database = $database;\n}\npublic function getUsers() {\n$this-&gt;database-&gt;connect();\n// Code to retrieve users from the database\n}\n}\n/*\nIn this example, we have applied the Dependency Inversion Principle by creating a `DatabaseInterface` abstraction that is implemented by concrete implementations `MySqlDatabase` and `PostgreSqlDatabase`. Instead of instantiating the concrete implementations directly in the `UserRepository` class, we inject the abstraction through the constructor. This way, the `UserRepository` class is no longer bound directly to concrete implementations, but only to the `DatabaseInterface` abstraction. This makes it easier to replace the database used and promotes flexibility and reusability of the code.\n*/\n</code></pre>","tags":["clean-code","solid-design-principles","solid"]},{"location":"en/github/git/#github-key-change-or-clean-up","title":"Github key change or clean up","text":"<pre><code>composer update --lock\n</code></pre>","tags":["github","push","force-push","github-key","lock","clone"]},{"location":"en/github/git/#repository-from-github-download","title":"Repository from GitHub download","text":"<pre><code>git clone your-repository-url\n</code></pre>","tags":["github","push","force-push","github-key","lock","clone"]},{"location":"en/laravel/migrations/","title":"Laravel Migrations","text":"<p>Laravel Migrations is a version control system for databases that allows defining, modifying, and deleting tables. Migrations make collaboration within a team easier.</p>","tags":["laravel","databse","DB","migrations"]},{"location":"en/laravel/migrations/#creating-a-migration","title":"Creating a Migration","text":"<pre><code>php artisan make:migration create_your_table_name_table\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"en/laravel/migrations/#running-migrations","title":"Running Migrations","text":"<p>This command executes all the up methods of migration files that have not yet been executed.</p> <pre><code>php artisan migrate\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"en/laravel/migrations/#checking-the-status-of-migrations","title":"Checking the Status of Migrations","text":"<pre><code>php artisan migrate:status\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"en/laravel/migrations/#rolling-back-migrations","title":"Rolling Back Migrations","text":"<p>This command executes all the down methods of migration files that were previously executed by the <code>php artisan migrate</code> command.</p> <pre><code>php artisan migrate:rollback\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"en/laravel/migrations/#specifying-how-many-php-artisan-migrate-commands-to-roll-back","title":"Specifying How Many <code>php artisan migrate</code> Commands to Roll Back","text":"<p>In this case, all the down methods of migration files that were applied with the last three <code>php artisan migrate</code> commands will be executed.</p> <pre><code>php artisan migrate:rollback --step=3\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"en/laravel/migrations/#merging-squashing-migrations-into-a-sql-file","title":"Merging (Squashing) Migrations into a SQL File","text":"<pre><code>php artisan schema:dump\n\n# Dump the current database schema and prune all existing migrations...\nphp artisan schema:dump --prune\n</code></pre>","tags":["laravel","databse","DB","migrations"]},{"location":"en/laravel/composer/commands/#package-install","title":"package install","text":"<pre><code>composer require package/your-package-name\n</code></pre>","tags":["composer","kommandos"]},{"location":"en/laravel/composer/commands/#package-uninstall","title":"package uninstall","text":"<pre><code>composer remove package/your-package-name\n</code></pre>","tags":["composer","kommandos"]},{"location":"en/laravel/composer/commands/#package-updaten-all","title":"package updaten (all)","text":"<pre><code>composer update\n</code></pre>","tags":["composer","kommandos"]},{"location":"en/laravel/composer/commands/#package-updaten-all-with-new-version","title":"package updaten (all) with new version","text":"<pre><code>composer update --with-dependencies\n</code></pre>","tags":["composer","kommandos"]},{"location":"en/laravel/composer/commands/#package-updaten-all-with-new-version-and-security-updates","title":"package updaten (all) with new version and security updates","text":"<pre><code>composer update --with-all-dependencies\n</code></pre>","tags":["composer","kommandos"]},{"location":"en/laravel/forge/envoyer-and-forge/#envoyer","title":"Envoyer","text":"<p>Envoyer is a deployment tool specifically designed for deploying applications on servers. It can provide seamless integration with Forge, a managed server hosting service that allows users to create and configure server instances and then host their applications on those servers. Envoyer offers a user interface that enables users to deploy and manage their applications on their servers.</p>","tags":["laravel","forge","queue","worker"]},{"location":"en/laravel/forge/envoyer-and-forge/#forge","title":"Forge","text":"<p>Forge, in turn, provides the necessary resources to host and configure the server instances on which the application runs. Forge also uses recipes (provisioning scripts) to configure the servers before the application is deployed. These recipes can be used to define PHP versions, database configurations, web server configurations, and more. Envoyer utilizes these recipes to ensure that the server instances on which the application is deployed are properly configured.</p>","tags":["laravel","forge","queue","worker"]},{"location":"en/laravel/forge/envoyer-and-forge/#envoyer-and-forge","title":"Envoyer and Forge","text":"<p>In summary, Envoyer plays an important role in deploying and managing applications on the servers provided by Forge. It uses Forge's configurations and recipes to ensure that the server instances are correctly configured and that the applications run smoothly on these instances.</p>","tags":["laravel","forge","queue","worker"]},{"location":"en/laravel/forge/queue-worker/","title":"Laravel Forge queue worker","text":"<p>Here are a few tips and tricks for the Laravel Forge que worker.</p>","tags":["laravel","forge","queue","worker"]},{"location":"en/laravel/forge/queue-worker/#maximum-seconds-per-job","title":"Maximum Seconds Per Job","text":"<p>The Maximum Seconds Per Job option is a setting available when configuring a worker in Forge. It specifies the maximum amount of time a worker can spend executing a single task (job).</p> <p>In many cases, it is important that tasks are executed quickly and reliably to maximize application performance and ensure that users have a good experience. At the same time, however, some tasks can be very time-consuming and block the worker, preventing other tasks from running. The Maximum Seconds Per Job option helps solve this problem by ensuring that a single task does not take too long.</p> <p>The \"Maximum Seconds Per Job\" setting specifies the maximum amount of time the worker can spend executing a single task. If the task is completed within this time, the worker will return the results and wait for the next task. However, if the task takes longer than the specified time, the worker will abort the task and wait for the next task.</p> <p>This setting is useful to ensure that the worker works efficiently and does not get blocked. However, if tasks vary greatly in duration, it may be difficult to choose an appropriate \"Maximum Seconds Per Job\" setting. In this case, it may be necessary to adjust the setting or use multiple workers to ensure that all tasks are executed quickly and reliably.</p>","tags":["laravel","forge","queue","worker"]},{"location":"en/laravel/forge/queue-worker/#rest-seconds-when-empty","title":"Rest Seconds When Empty","text":"<p>The Rest Seconds When Empty option refers to a setting available when configuring a worker in Forge. This setting specifies how long a worker should pause when it has no tasks to perform.</p> <p>When a worker has no tasks, it can unnecessarily consume resources by using CPU cycles and memory to look for new tasks. To avoid this, the \"Rest Seconds When Empty\" parameter can be used to instruct the worker to pause for a specified time before searching again for new tasks.</p> <p>The \"Rest Seconds When Empty\" setting is usually specified in seconds and can be adjusted depending on the use case. For example, if the worker has tasks that arrive very frequently, it might make sense to set a relatively short idle time to ensure that the worker can respond quickly to new tasks. On the other hand, if the worker receives tasks only occasionally, it might make sense to set a longer idle time to save resources and reduce costs.</p>","tags":["laravel","forge","queue","worker"]},{"location":"en/laravel/forge/queue-worker/#graceful-shutdown-seconds","title":"Graceful Shutdown Seconds","text":"<p>The Graceful Shutdown Seconds option is a setting available when configuring a worker in Forge. It specifies how much time the worker has to complete running tasks before it is shut down.</p> <p>In some cases, it may be necessary to shut down a worker, such as when a new version of the application is deployed or when the worker is no longer needed. However, if the worker is shut down while a task is running, this can lead to unexpected errors or data loss. To avoid this, there is an option called \"Graceful Shutdown Seconds\".</p> <p>This setting specifies how much time the worker should have to complete running tasks before shutting down. The Worker initiates the \"Shutdown\" process by rejecting new tasks and then waiting for the running tasks to finish. When the time specified in the Graceful Shutdown Seconds setting expires, the worker completes all tasks still in progress and then shuts down.</p> <p>The Graceful Shutdown Seconds setting is optional because in some cases it may not be necessary for the worker to complete tasks before shutting down. However, when such a setting is required, it can help ensure that the worker shuts down without causing errors or data loss.</p>","tags":["laravel","forge","queue","worker"]},{"location":"en/laravel/forge/queue-worker/#the-interplay-between-graceful-shutdown-seconds-and-maximum-seconds-per-job","title":"The interplay between Graceful Shutdown Seconds and Maximum Seconds Per Job.","text":"<p>The interaction between \"Graceful Shutdown Seconds\" and \"Maximum Seconds Per Job\" can be important, as they can both help to ensure that a worker is working reliably and performing tasks quickly and efficiently.</p> <p>If the \"Graceful Shutdown Seconds\" value is too low, there is a risk that the worker will not have enough time to properly complete ongoing tasks before shutting down. On the other hand, if the \"Maximum Seconds Per Job\" value is too high, there is a risk that the worker will work on a single task for too long, blocking other tasks and reducing throughput.</p> <p>A good practice is to set the \"Maximum Seconds Per Job\" setting so that most tasks can usually be completed within this time. However, if a task takes longer than this time, the \"Graceful Shutdown Seconds\" value should be set so that the worker has enough time to complete the ongoing task before shutting down.</p> <p>However, it is also important to note that in some cases it may be appropriate to select a higher \"Maximum Seconds Per Job\" setting when dealing with complex or resource intensive tasks. In this case, the \"Graceful Shutdown Seconds\" value should be adjusted accordingly to ensure that the worker has enough time to complete these tasks.</p> <p>Official documentation of Forge:</p> <ul> <li>Creating A Queue Worker: Forge - creating-a-queue-worker</li> <li>Forge ddocumentation: Forge introduction</li> </ul>","tags":["laravel","forge","queue","worker"]},{"location":"en/laravel/packages/own-packages/#example-using-maggomannfilament-model-translator","title":"Example using maggomann/filament-model-translator","text":"<p>composer,json-File:</p> <pre><code>\"require\": {\n\"maggomann/filament-model-translator\": \"dev-master\",\n</code></pre> <p>Execute the following command in the CLI:</p> <pre><code>composer config repositories.maggomann/filament-model-translator '{\"type\": \"path\", \"url\": \"../../LaravelPackages/filament-model-translator\"}' --file composer.json\ncomposer update\n</code></pre> <p>This should reflect the following output:</p> <pre><code>Lock file operations: 1 install, 0 updates, 0 removals\n  - Locking maggomann/filament-model-translator (dev-master)\nWriting lock file\nInstalling dependencies from lock file (including require-dev)\nPackage operations: 1 install, 0 updates, 0 removals\n  - Installing maggomann/filament-model-translator (dev-master): Symlinking from ../../LaravelPackages/filament-model-translator\n</code></pre>","tags":["laravel","package","package-entwicklung"]},{"location":"en/laravel/packages/own-packages/#website-links","title":"Website links","text":"<p>Paket lokal testen</p> <p>Paket-Dokumentation</p>","tags":["laravel","package","package-entwicklung"]},{"location":"en/laravel/packages/satis/","title":"Satis","text":"<p>\"Satis\" is an open source software for PHP developers used for managing dependencies and building packages. With Satis, developers can create and manage a private repository for their PHP packages instead of publishing them to public repositories like Packagist.</p> <p>Satis allows developers to manage their dependencies in a single repository and use that repository for internal purposes. This is especially useful for companies or organizations that have their own PHP packages and want to manage them internally.</p> <p>Satis uses Composer technology to create packages and manage dependencies. It also allows developers to add custom repositories and publish their packages to other repositories if desired.</p> <p>https://github.com/composer/satis</p> <p>On this page you can find the documentation as well as the source code and more information about Satis.</p> <p>https://alexvanderbist.com/2021/setting-up-and-securing-a-private-composer-repository/</p>","tags":["Open-Source-Software","Infrastruktur"]},{"location":"en/laravel/tipps/calculation/","title":"Calculation","text":"<p>BCMath: https://www.php.net/manual/de/book.bc.php github moneyphp/money: https://github.com/moneyphp/money web2.0rechner: https://web2.0rechner.de/</p> <p>The BcMathCalculator calculates the decimal places exactly when calculating with string values. However, if the values are cast into a float, float rounds up to the 12th decimal place according to the rounding rule and then fills each further decimal place with the number 0.</p> <pre><code>&lt;?php\nuse Money\\Calculator\\BcMathCalculator;\n$result = (new BcMathCalculator())-&gt;divide('15.000000000000000', '1.19');\n// $result =&gt; 12.60504201680672\n$result = (float) (new BcMathCalculator())-&gt;divide('15.000000000000000', '1.19');\n// $result =&gt; 12.605042016807\n// Float rounds up to the 12th decimal place and fills all further decimal places with a 0.\n</code></pre> <p>Hier ein Beispiel der genaueren Rechnung: ![[web2orechner_rundung.png]]</p>","tags":["laravel","best-practice","calculation"]},{"location":"en/laravel/tipps/override-of-artisan-commands/","title":"Overriding Artisan commands","text":"<p>In Laravel, standard Artisan commands such as \"migrate\" can be overridden by defining a new command to replace the original command. This can be done in the \"app/Console/Kernel.php\" file.</p> <p>First, you need to create a new command. To do this, use the following command in the command line:</p> <pre><code>php artisan make:command CustomMigrate\n</code></pre> <p>This will create a new file called \"CustomMigrate.php\" in the \"app/Console/Commands\" directory. Open this file and look for the \"handle\" method.</p> <p>In this method, you can add your own logic to determine whether the migration command should be executed or not. If the command should not be executed, you can issue an error message. Otherwise, you can call the original migration command by using \"parent::handle($input, $output);\".</p> <p>Here is an example that implements the logic you mentioned:</p> <pre><code>&lt;?php\nnamespace App\\Console\\Commands;\nuse Illuminate\\Console\\Command;\nclass CustomMigrate extends Command\n{\nprotected $signature = 'migrate';\nprotected $description = 'Custom migrate command that outputs an error message on \"local\" environment';\npublic function handle()\n{\nif (app()-&gt;environment('local')) {\n$this-&gt;error('Migrate command cannot be run on local systems');\nexit;\n}\nparent::handle();\n}\n}\n</code></pre> <p>In this example, the migration command is executed only when the application is not running in locale mode. If the application is running in production mode, an error message is issued.</p> <p>To register the new command, open the \"app/Console/Kernel.php\" file and add the following code:</p> <pre><code>&lt;?php\nprotected $commands = [\n\\App\\Console\\Commands\\CustomMigrate::class,\n];\n</code></pre> <p>This registers the new command in the Laravel kernel so that it can be run from the command line by simply typing \"php artisan migrate\".</p> <p>Warning</p> <p>Be sure to carefully review the conditions for executing the command to avoid unintended or undesirable results.</p>","tags":["laravel","best-practice","artisan","commands"]},{"location":"en/laravel/tipps/service-container-and-ioc/","title":"Service Container and IoC-Container","text":"","tags":["laravel","best-practice","tipps","ioc","service-container"]},{"location":"en/laravel/tipps/service-container-and-ioc/#what-is-a-service-container","title":"What is a service container?","text":"<pre><code>&lt;?php\n// good\napp(MyAction::class-&gt;execute($myModel);\n// bad\n(new MyAction())-&gt;execute($myModel);\n</code></pre> <p>The Service Container is a powerful tool that allows you to define and organize your dependencies between your classes. By using the Service Container, you can centrally manage your dependencies and avoid having hard dependencies in your classes. You can also easily create mock objects for tests by replacing dependencies with test doubles.</p> <p>The concept of a service container is commonly used in Laravel applications to create and manage class instances. Instead of manually instantiating classes, you can register a class as a `service' in the container and then access that class through the container.</p> <p>If you use <code>new MyAction()</code>, you instantiate the class manually. This can be problematic if the class itself has dependencies that also need to be instantiated manually. Instead, if you register the class in the service container and use the container to access the class, the container can resolve the dependencies for you automatically.</p> <p>The following code shows how to register a class in the service container and then access that class:</p> <pre><code>&lt;?php\n// Registrieren Sie die Klasse im Container\napp()-&gt;bind(MyAction::class);\n// Zugriff auf die Klasse durch den Container\napp()-&gt;make(MyAction::class)-&gt;execute($myModel);\n// or\napp(MyAction::class)-&gt;execute($myModel);\n</code></pre> <p>By using the Service Container, you can centrally manage the dependencies of your classes and improve code maintainability.</p>","tags":["laravel","best-practice","tipps","ioc","service-container"]},{"location":"en/laravel/tipps/service-container-and-ioc/#advantages-of-using-the-service-container","title":"Advantages of using the Service Container","text":"<p>One of the advantages of using the Service Container is that you can manage and swap your dependencies centrally. If you manually instantiate a class, it is difficult to swap that class if you want to replace it with a mock class in your tests.</p> <p>However, if you register a class in the service container and use the container to access that class, you can replace the registered class with another class that implements the same interface. This is especially useful if you want to run tests where you want to test specific functions of a class in isolation, without depending on other classes.</p> <p>Another advantage is that using the Service Container makes the code more readable, since it is easier to see the dependencies of classes when they are registered in the container. In addition, the Service Container can help make the code more modular, as it makes it easier to divide your application into smaller, reusable components.</p> <p>Overall, using the Service Container provides many benefits for Laravel application development, including centralized dependency management, improved testability, and code readability.</p>","tags":["laravel","best-practice","tipps","ioc","service-container"]},{"location":"en/laravel/tipps/service-container-and-ioc/#what-is-the-difference-between-the-service-container-and-the-ioc-container","title":"What is the difference between the Service Container and the IoC container?","text":"<p>The Service Container in Laravel is an implementation of the Inversion of Control (IoC) container. The idea behind the IoC container is to delegate control over the creation and management of objects from the application class itself to an external component, the IoC container.</p> <p>The IoC container is a design pattern that is closely related to the Dependency Injection (DI) design pattern. Both patterns aim to centralize class dependencies and simplify object creation and dependency management.</p> <p>In Laravel, the service container is the primary dependency management mechanism. It allows you to register classes in the container and handle the instantiation and management of objects automatically. The Service Container also provides support for dependency injection, as dependencies can be automatically resolved when a class is instantiated.</p> <p>Overall, the service container and the IoC container are closely related and are often used interchangeably. Both are important concepts in object-oriented programming and are essential for creating scalable and maintainable applications.</p>","tags":["laravel","best-practice","tipps","ioc","service-container"]},{"location":"en/php/pest/#commands","title":"Commands","text":"","tags":["commandos","pest"]},{"location":"en/php/pest/#pest-composer-testpest-coverage","title":"pest: composer test:pest-coverage","text":"<p>See here: pest.en</p>","tags":["commandos","pest"]},{"location":"en/php/pest/#pest-file-testing","title":"pest: File testing","text":"<pre><code>composer test:pest-coverage Tests\\Path\\File\\FileWithoutEndings\n</code></pre>","tags":["commandos","pest"]},{"location":"en/php/phpstan/","title":"phpstan","text":"<p>PHPStan is a tool for static code analysis in PHP. It checks the code for type errors, unintended page effects and other potential sources of errors. PHPStan provides developers with higher quality code and helps find potential errors in the code before they occur in production. The tool does this by using a combination of type inference and static analysis to ensure that code is type-safe and meets certain coding standards. It is also an extension of PHP and can be used in the development environment or as part of Continuous Integration/Continuous Deployment (CI/CD) pipelines to ensure that code works correctly at every stage of development.</p>","tags":["phpstan","commandos"]},{"location":"en/php/phpstan/#commands","title":"Commands","text":"","tags":["phpstan","commandos"]},{"location":"en/php/phpstan/#phpstan-the-daily-madness","title":"phpstan: The daily madness","text":"<pre><code>vendor/bin/phpstan clear-result-cache --memory-limit=5G\nvendor/bin/phpstan analyse --ansi --memory-limit=5G\nvendor/bin/phpstan --generate-baseline --memory-limit=5G\n</code></pre>","tags":["phpstan","commandos"]},{"location":"en/wiki/command-line-commands/#ls-la","title":"ls -la","text":"<p>The command \"ls\" stands for \"list\" and is used to list the contents of a directory. Without any additional options, the \"ls\" command simply displays a list of files and directories in the current directory.</p> <p>The option \"-l\" (lowercase L) is a switch option that enables the long output format of \"ls\". When you type \"ls -l\", you will get a detailed list of the files and directories in the current directory, which includes the following information:</p> <ul> <li>File permissions</li> <li>Number of hard links</li> <li>Name of the owner</li> <li>Name of the group</li> <li>File size</li> <li>Date and time of last modification</li> <li>File name</li> </ul> <p>The option \"-a\" (lowercase A) is another switch option that lists all files and directories, including hidden files, in the current directory. Hidden files usually start with a dot \".\" (e.g. .bashrc, .gitignore).</p> <p>If you type \"ls -la\", you will get a detailed list of all files and directories in the current directory, including hidden files. The output contains all the information that is also displayed with \"ls -l\", but with additional information about hidden files and directories.</p>","tags":["wiki","linux","commands"]},{"location":"en/wiki/command-line-commands/#rm-rf","title":"rm -rf","text":"<p>The command \"rm -rf\" is a command used in Unix-based operating systems to permanently delete files and directories. Here is an explanation of the individual components of the command:</p> <ul> <li> <p>\"rm\" stands for \"remove\" and is the command for deleting files and directories.</p> </li> <li> <p>The flag \"-r\" stands for \"recursive\" and specifies that the command should be applied recursively to delete both directories and their contents. Without this flag, \"rm\" would only delete individual files, but not directories.</p> </li> <li> <p>The flag \"-f\" stands for \"force\" and causes the command to be executed without prompting or confirmation. No warnings are displayed, and even read-only files are deleted without the user being prompted.</p> </li> </ul> <p>Together, these options \"rm -rf\" create a command that deletes all files and directories in a specified path and their subdirectories without prompting the user for confirmation. Since this command is very powerful and does not contain any security precautions, it is important to use it with caution to avoid accidentally deleting important data.</p>","tags":["wiki","linux","commands"]},{"location":"en/wiki/iaas/#infrastructure-as-a-service-iaas","title":"Infrastructure as a Service (IaaS)","text":"<p>Infrastructure as a Service (IaaS) is a form of cloud computing in which IT infrastructure is provided via the Internet. IaaS is one of the three most important categories of cloud computing services, along with Software as a Service (SaaS) and Platform as a Service (PaaS).</p>","tags":["wiki","infrastructure"]},{"location":"en/wiki/linux-screen/","title":"Linux screen","text":"<ol> <li>Identify the name of the session:</li> </ol> <pre><code> $ screen -ls\n</code></pre> <ol> <li>Close a session:</li> </ol> <pre><code>$ screen -XS &lt;session-id&gt; quit\n</code></pre> <ul> <li>screen</li> </ul> <p>Command to install the packages:</p> <pre><code>sudo apt-get install screen\n</code></pre> <p>Or install with apturl, link: apt://screen</p>","tags":["wiki","linux","screen"]},{"location":"en/wiki/linux-screen/#opera","title":"Opera","text":"<p>The window manager can be started with the command screen in a terminal.</p>","tags":["wiki","linux","screen"]},{"location":"en/wiki/linux-screen/#general","title":"General","text":"<p>After calling screen, it seems as if nothing has happened. But this is not true, because screen is now running in the background to manage the sessions. You can now continue working normally and start various programs as you are used to.</p>","tags":["wiki","linux","screen"]},{"location":"en/wiki/linux-screen/#important-commands","title":"Important commands","text":"<p>The three most important commands or key combinations you should know are:</p> <ul> <li>Ctrl + A , followed by C to create a new window</li> <li>Ctrl + A , followed by N to switch to the next window</li> <li>Ctrl + A followed by D to detach the connection to the current session, the session will continue running in the background.</li> </ul> <p>For an overview of all keyboard shortcuts, press Ctrl + A followed by ?</p> <p>A session is ended by terminating the shell running there, i.e. either with the <code>exit</code> command or by pressing Ctrl + D .</p>","tags":["wiki","linux","screen"]},{"location":"en/wiki/linux-screen/#other-commands","title":"Other commands","text":"<p>Start a new session with the name \"sitzung1\".</p> <pre><code>screen -S sitzung1\n</code></pre> <p>Disconnects from the current session: Ctrl + A + D.</p> <p>Resumes the session if only one session is running in the background:</p> <p>Resumes the session with the name \"sitzung1\":</p> <pre><code>screen -r sitzung1\n</code></pre> <p>List the names of all running screen sessions:</p> <p>Disconnects a running session with the name \"sitzung1\" (very useful if, for example, you lost the connection via ssh and therefore could not disconnect the session):</p> <pre><code>screen -d sitzung1\n</code></pre> <p>The session named \"sitzung1\" can be displayed on several computers at the same time:</p> <pre><code>screen -rx sitzung1\n</code></pre> <p>Send a command to the session named \"sitzung1\" and execute it (\\n for [ENTER]):</p> <pre><code>screen -S sitzung1 -X stuff $'ls -l\\n'\n</code></pre> <p>Toggle visual notification (flicker or sound; if the screen sometimes flickers, you should run this command until it says \"switched to audible bell\" at the bottom left): Ctrl + A + G</p>","tags":["wiki","linux","screen"]},{"location":"en/wiki/linux-screen/#difference-between-session-and-window","title":"Difference between session and window","text":"<p>The difference between a screen session and a screen window can be thought of as something like a browser with tabs, where screen sessions correspond to a browser window and screen windows correspond to a browser tab. You can have multiple screen sessions running at the same time and multiple screen windows open in each screen session, just as you can have multiple browser windows open and multiple tabs open in each browser window.</p>","tags":["wiki","linux","screen"]},{"location":"en/wiki/linux-screen/#scrolling-output","title":"Scrolling output","text":"<p>To scroll in the output of a screen window using the familiar key combinations \u21e7 + image \u2191 and \u21e7 + image \u2193, enter the line</p> <pre><code>termcapinfo xterm|xterms|xs|rxvt ti@:te@\n</code></pre> <p>Into the file .screenrc (which may still have to be created) in the home directory.</p> <p>If this does not work, there is still the possibility to switch to the copy mode with Ctrl + A + Esc and to scroll there with the arrow keys or Ctrl + U (half window up), Ctrl + D (half window down), Ctrl + B (whole window back), Ctrl + F (whole window forward). After that you can leave the copy mode by pressing Esc or Q .</p>","tags":["wiki","linux","screen"]},{"location":"en/wiki/mysql/#maximum-number-of-concurrent-connections","title":"Maximum number of concurrent connections","text":"<p>In MySQL, you can determine the maximum number of concurrent connections with the following query:</p> <pre><code>SHOW VARIABLES LIKE 'max_connections';\n</code></pre> <p>This query returns the maximum limit for the number of connections that can access the MySQL server at the same time. However, note that this limit depends on the configuration of the MySQL server and does not necessarily correspond to the actual number of concurrent transactions that can be executed.</p>","tags":["wiki","mysql","commands"]},{"location":"en/wiki/mysql/#current-number-of-connections","title":"Current number of connections","text":"<p>To display the current number of connections accessing the MySQL server at a given time, you can use the following query:</p> <pre><code>SHOW STATUS WHERE `variable_name` = 'Threads_connected';\n</code></pre> <p>This query returns the number of active connections accessing the MySQL server. However, note that the number of connections can fluctuate as connections are opened and closed while the database is in use.</p>","tags":["wiki","mysql","commands"]}]}